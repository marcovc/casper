/************************************************************************** *   This file is part of CaSPER (http://proteina.di.fct.unl.pt/casper).   *
*
 *                                                                         *
 *   Copyright:                                                            *
 *   2005-2008 - Marco Correia <marco.v.correia@gmail.com>                 *
 *                                                                         *
 *   Licensed under the Apache License, Version 2.0 (the "License");       * 
 *   you may not use this file except in compliance with the License.      * 
 *   You may obtain a copy of the License at                               * 
 *            http://www.apache.org/licenses/LICENSE-2.0                   * 
 *   Unless required by applicable law or agreed to in writing, software   * 
 *   distributed under the License is distributed on an                    * 
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,          * 
 *   either express or implied.                                            * 
 *   See the License for the specific language governing permissions and   * 
 *   limitations under the License.                                        *
 \*************************************************************************/
/************************************************************************** *   This file is part of CaSPER (http://proteina.di.fct.unl.pt/casper).   *
*
 *                                                                         *
 *   Copyright:                                                            *
 *   2005-2008 - Marco Correia <marco.v.correia@gmail.com>                 *
 *                                                                         *
 *   Licensed under the Apache License, Version 2.0 (the "License");       * 
 *   you may not use this file except in compliance with the License.      * 
 *   You may obtain a copy of the License at                               * 
 *            http://www.apache.org/licenses/LICENSE-2.0                   * 
 *   Unless required by applicable law or agreed to in writing, software   * 
 *   distributed under the License is distributed on an                    * 
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,          * 
 *   either express or implied.                                            * 
 *   See the License for the specific language governing permissions and   * 
 *   limitations under the License.                                        *
 \*************************************************************************/
// --- RELATIONS (Compile time expressions) ---
/** Symmetric unary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel1<Sym,ValExpr< T1 > > operator-(const ValExpr< T1 >& rh) { return Rel1<Sym,ValExpr< T1 > >(rh);} /** Negation unary operator.  \ingroup LogicalRelations */ template< class T1 > inline Rel1<Not,ValExpr< T1 > > operator!(const ValExpr< T1 >& rh) { return Rel1<Not,ValExpr< T1 > >(rh);} /** Absolute value unary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel1<Abs,ValExpr< T1 > > abs(const ValExpr< T1 >& rh) { return Rel1<Abs,ValExpr< T1 > >(rh);} /** Min value (from a sequence) unary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel1<Min,ValExpr< T1 > > min(const ValExpr< T1 >& rh) { return Rel1<Min,ValExpr< T1 > >(rh);} /** Max value (from a sequence) unary operator. \ingroup ArithRelations */ template< class T1 > inline Rel1<Max,ValExpr< T1 > > max(const ValExpr< T1 >& rh) { return Rel1<Max,ValExpr< T1 > >(rh);}
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1, class T > inline Rel2<Equal,ValExpr< T1 >,T > operator==(const ValExpr< T1 >& lh, const T& rh) { return Rel2<Equal,ValExpr< T1 >,T >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<GreaterEqual,ValExpr< T1 >,T > operator>=(const ValExpr< T1 >& lh, const T& rh) { return Rel2<GreaterEqual,ValExpr< T1 >,T >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<LessEqual,ValExpr< T1 >,T > operator<=(const ValExpr< T1 >& lh, const T& rh) { return Rel2<LessEqual,ValExpr< T1 >,T >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1, class T > inline Rel2<Distinct,ValExpr< T1 >,T > operator!=(const ValExpr< T1 >& lh, const T& rh) { return Rel2<Distinct,ValExpr< T1 >,T >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<Greater,ValExpr< T1 >,T > operator>(const ValExpr< T1 >& lh, const T& rh) { return Rel2<Greater,ValExpr< T1 >,T >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<Less,ValExpr< T1 >,T > operator<(const ValExpr< T1 >& lh, const T& rh) { return Rel2<Less,ValExpr< T1 >,T >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Add,ValExpr< T1 >,T > operator+(const ValExpr< T1 >& lh, const T& rh) { return Rel2<Add,ValExpr< T1 >,T >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Sub,ValExpr< T1 >,T > operator-(const ValExpr< T1 >& lh, const T& rh) { return Rel2<Sub,ValExpr< T1 >,T >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Mul,ValExpr< T1 >,T > operator*(const ValExpr< T1 >& lh, const T& rh) { return Rel2<Mul,ValExpr< T1 >,T >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Div,ValExpr< T1 >,T > operator/(const ValExpr< T1 >& lh, const T& rh) { return Rel2<Div,ValExpr< T1 >,T >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T1, class T > inline Rel2<And,ValExpr< T1 >,T > operator&&(const ValExpr< T1 >& lh, const T& rh) { return Rel2<And,ValExpr< T1 >,T >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class T1, class T > inline Rel2<Or,ValExpr< T1 >,T > operator||(const ValExpr< T1 >& lh, const T& rh) { return Rel2<Or,ValExpr< T1 >,T >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1 > inline Rel2<Equal,Int,ValExpr< T1 > > operator==(const Int& lh, const ValExpr< T1 >& rh) { return Rel2<Equal,Int,ValExpr< T1 > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<GreaterEqual,Int,ValExpr< T1 > > operator>=(const Int& lh, const ValExpr< T1 >& rh) { return Rel2<GreaterEqual,Int,ValExpr< T1 > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<LessEqual,Int,ValExpr< T1 > > operator<=(const Int& lh, const ValExpr< T1 >& rh) { return Rel2<LessEqual,Int,ValExpr< T1 > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1 > inline Rel2<Distinct,Int,ValExpr< T1 > > operator!=(const Int& lh, const ValExpr< T1 >& rh) { return Rel2<Distinct,Int,ValExpr< T1 > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Greater,Int,ValExpr< T1 > > operator>(const Int& lh, const ValExpr< T1 >& rh) { return Rel2<Greater,Int,ValExpr< T1 > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Less,Int,ValExpr< T1 > > operator<(const Int& lh, const ValExpr< T1 >& rh) { return Rel2<Less,Int,ValExpr< T1 > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Add,Int,ValExpr< T1 > > operator+(const Int& lh, const ValExpr< T1 >& rh) { return Rel2<Add,Int,ValExpr< T1 > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Sub,Int,ValExpr< T1 > > operator-(const Int& lh, const ValExpr< T1 >& rh) { return Rel2<Sub,Int,ValExpr< T1 > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Mul,Int,ValExpr< T1 > > operator*(const Int& lh, const ValExpr< T1 >& rh) { return Rel2<Mul,Int,ValExpr< T1 > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Div,Int,ValExpr< T1 > > operator/(const Int& lh, const ValExpr< T1 >& rh) { return Rel2<Div,Int,ValExpr< T1 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T1 > inline Rel2<And,Int,ValExpr< T1 > > operator&&(const Int& lh, const ValExpr< T1 >& rh) { return Rel2<And,Int,ValExpr< T1 > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class T1 > inline Rel2<Or,Int,ValExpr< T1 > > operator||(const Int& lh, const ValExpr< T1 >& rh) { return Rel2<Or,Int,ValExpr< T1 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1 > inline Rel2<Equal,Bool,ValExpr< T1 > > operator==(const Bool& lh, const ValExpr< T1 >& rh) { return Rel2<Equal,Bool,ValExpr< T1 > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<GreaterEqual,Bool,ValExpr< T1 > > operator>=(const Bool& lh, const ValExpr< T1 >& rh) { return Rel2<GreaterEqual,Bool,ValExpr< T1 > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<LessEqual,Bool,ValExpr< T1 > > operator<=(const Bool& lh, const ValExpr< T1 >& rh) { return Rel2<LessEqual,Bool,ValExpr< T1 > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1 > inline Rel2<Distinct,Bool,ValExpr< T1 > > operator!=(const Bool& lh, const ValExpr< T1 >& rh) { return Rel2<Distinct,Bool,ValExpr< T1 > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Greater,Bool,ValExpr< T1 > > operator>(const Bool& lh, const ValExpr< T1 >& rh) { return Rel2<Greater,Bool,ValExpr< T1 > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Less,Bool,ValExpr< T1 > > operator<(const Bool& lh, const ValExpr< T1 >& rh) { return Rel2<Less,Bool,ValExpr< T1 > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Add,Bool,ValExpr< T1 > > operator+(const Bool& lh, const ValExpr< T1 >& rh) { return Rel2<Add,Bool,ValExpr< T1 > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Sub,Bool,ValExpr< T1 > > operator-(const Bool& lh, const ValExpr< T1 >& rh) { return Rel2<Sub,Bool,ValExpr< T1 > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Mul,Bool,ValExpr< T1 > > operator*(const Bool& lh, const ValExpr< T1 >& rh) { return Rel2<Mul,Bool,ValExpr< T1 > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Div,Bool,ValExpr< T1 > > operator/(const Bool& lh, const ValExpr< T1 >& rh) { return Rel2<Div,Bool,ValExpr< T1 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T1 > inline Rel2<And,Bool,ValExpr< T1 > > operator&&(const Bool& lh, const ValExpr< T1 >& rh) { return Rel2<And,Bool,ValExpr< T1 > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class T1 > inline Rel2<Or,Bool,ValExpr< T1 > > operator||(const Bool& lh, const ValExpr< T1 >& rh) { return Rel2<Or,Bool,ValExpr< T1 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1 > inline Rel2<Equal,Double,ValExpr< T1 > > operator==(const Double& lh, const ValExpr< T1 >& rh) { return Rel2<Equal,Double,ValExpr< T1 > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<GreaterEqual,Double,ValExpr< T1 > > operator>=(const Double& lh, const ValExpr< T1 >& rh) { return Rel2<GreaterEqual,Double,ValExpr< T1 > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<LessEqual,Double,ValExpr< T1 > > operator<=(const Double& lh, const ValExpr< T1 >& rh) { return Rel2<LessEqual,Double,ValExpr< T1 > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1 > inline Rel2<Distinct,Double,ValExpr< T1 > > operator!=(const Double& lh, const ValExpr< T1 >& rh) { return Rel2<Distinct,Double,ValExpr< T1 > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Greater,Double,ValExpr< T1 > > operator>(const Double& lh, const ValExpr< T1 >& rh) { return Rel2<Greater,Double,ValExpr< T1 > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Less,Double,ValExpr< T1 > > operator<(const Double& lh, const ValExpr< T1 >& rh) { return Rel2<Less,Double,ValExpr< T1 > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Add,Double,ValExpr< T1 > > operator+(const Double& lh, const ValExpr< T1 >& rh) { return Rel2<Add,Double,ValExpr< T1 > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Sub,Double,ValExpr< T1 > > operator-(const Double& lh, const ValExpr< T1 >& rh) { return Rel2<Sub,Double,ValExpr< T1 > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Mul,Double,ValExpr< T1 > > operator*(const Double& lh, const ValExpr< T1 >& rh) { return Rel2<Mul,Double,ValExpr< T1 > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Div,Double,ValExpr< T1 > > operator/(const Double& lh, const ValExpr< T1 >& rh) { return Rel2<Div,Double,ValExpr< T1 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T1 > inline Rel2<And,Double,ValExpr< T1 > > operator&&(const Double& lh, const ValExpr< T1 >& rh) { return Rel2<And,Double,ValExpr< T1 > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class T1 > inline Rel2<Or,Double,ValExpr< T1 > > operator||(const Double& lh, const ValExpr< T1 >& rh) { return Rel2<Or,Double,ValExpr< T1 > >(lh,rh); }
/** Symmetric unary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel1<Sym,BndExpr< T1 > > operator-(const BndExpr< T1 >& rh) { return Rel1<Sym,BndExpr< T1 > >(rh);} /** Negation unary operator.  \ingroup LogicalRelations */ template< class T1 > inline Rel1<Not,BndExpr< T1 > > operator!(const BndExpr< T1 >& rh) { return Rel1<Not,BndExpr< T1 > >(rh);} /** Absolute value unary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel1<Abs,BndExpr< T1 > > abs(const BndExpr< T1 >& rh) { return Rel1<Abs,BndExpr< T1 > >(rh);} /** Min value (from a sequence) unary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel1<Min,BndExpr< T1 > > min(const BndExpr< T1 >& rh) { return Rel1<Min,BndExpr< T1 > >(rh);} /** Max value (from a sequence) unary operator. \ingroup ArithRelations */ template< class T1 > inline Rel1<Max,BndExpr< T1 > > max(const BndExpr< T1 >& rh) { return Rel1<Max,BndExpr< T1 > >(rh);}
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1, class T > inline Rel2<Equal,BndExpr< T1 >,T > operator==(const BndExpr< T1 >& lh, const T& rh) { return Rel2<Equal,BndExpr< T1 >,T >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<GreaterEqual,BndExpr< T1 >,T > operator>=(const BndExpr< T1 >& lh, const T& rh) { return Rel2<GreaterEqual,BndExpr< T1 >,T >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<LessEqual,BndExpr< T1 >,T > operator<=(const BndExpr< T1 >& lh, const T& rh) { return Rel2<LessEqual,BndExpr< T1 >,T >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1, class T > inline Rel2<Distinct,BndExpr< T1 >,T > operator!=(const BndExpr< T1 >& lh, const T& rh) { return Rel2<Distinct,BndExpr< T1 >,T >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<Greater,BndExpr< T1 >,T > operator>(const BndExpr< T1 >& lh, const T& rh) { return Rel2<Greater,BndExpr< T1 >,T >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<Less,BndExpr< T1 >,T > operator<(const BndExpr< T1 >& lh, const T& rh) { return Rel2<Less,BndExpr< T1 >,T >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Add,BndExpr< T1 >,T > operator+(const BndExpr< T1 >& lh, const T& rh) { return Rel2<Add,BndExpr< T1 >,T >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Sub,BndExpr< T1 >,T > operator-(const BndExpr< T1 >& lh, const T& rh) { return Rel2<Sub,BndExpr< T1 >,T >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Mul,BndExpr< T1 >,T > operator*(const BndExpr< T1 >& lh, const T& rh) { return Rel2<Mul,BndExpr< T1 >,T >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Div,BndExpr< T1 >,T > operator/(const BndExpr< T1 >& lh, const T& rh) { return Rel2<Div,BndExpr< T1 >,T >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T1, class T > inline Rel2<And,BndExpr< T1 >,T > operator&&(const BndExpr< T1 >& lh, const T& rh) { return Rel2<And,BndExpr< T1 >,T >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class T1, class T > inline Rel2<Or,BndExpr< T1 >,T > operator||(const BndExpr< T1 >& lh, const T& rh) { return Rel2<Or,BndExpr< T1 >,T >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1 > inline Rel2<Equal,Int,BndExpr< T1 > > operator==(const Int& lh, const BndExpr< T1 >& rh) { return Rel2<Equal,Int,BndExpr< T1 > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<GreaterEqual,Int,BndExpr< T1 > > operator>=(const Int& lh, const BndExpr< T1 >& rh) { return Rel2<GreaterEqual,Int,BndExpr< T1 > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<LessEqual,Int,BndExpr< T1 > > operator<=(const Int& lh, const BndExpr< T1 >& rh) { return Rel2<LessEqual,Int,BndExpr< T1 > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1 > inline Rel2<Distinct,Int,BndExpr< T1 > > operator!=(const Int& lh, const BndExpr< T1 >& rh) { return Rel2<Distinct,Int,BndExpr< T1 > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Greater,Int,BndExpr< T1 > > operator>(const Int& lh, const BndExpr< T1 >& rh) { return Rel2<Greater,Int,BndExpr< T1 > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Less,Int,BndExpr< T1 > > operator<(const Int& lh, const BndExpr< T1 >& rh) { return Rel2<Less,Int,BndExpr< T1 > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Add,Int,BndExpr< T1 > > operator+(const Int& lh, const BndExpr< T1 >& rh) { return Rel2<Add,Int,BndExpr< T1 > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Sub,Int,BndExpr< T1 > > operator-(const Int& lh, const BndExpr< T1 >& rh) { return Rel2<Sub,Int,BndExpr< T1 > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Mul,Int,BndExpr< T1 > > operator*(const Int& lh, const BndExpr< T1 >& rh) { return Rel2<Mul,Int,BndExpr< T1 > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Div,Int,BndExpr< T1 > > operator/(const Int& lh, const BndExpr< T1 >& rh) { return Rel2<Div,Int,BndExpr< T1 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T1 > inline Rel2<And,Int,BndExpr< T1 > > operator&&(const Int& lh, const BndExpr< T1 >& rh) { return Rel2<And,Int,BndExpr< T1 > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class T1 > inline Rel2<Or,Int,BndExpr< T1 > > operator||(const Int& lh, const BndExpr< T1 >& rh) { return Rel2<Or,Int,BndExpr< T1 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1 > inline Rel2<Equal,Bool,BndExpr< T1 > > operator==(const Bool& lh, const BndExpr< T1 >& rh) { return Rel2<Equal,Bool,BndExpr< T1 > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<GreaterEqual,Bool,BndExpr< T1 > > operator>=(const Bool& lh, const BndExpr< T1 >& rh) { return Rel2<GreaterEqual,Bool,BndExpr< T1 > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<LessEqual,Bool,BndExpr< T1 > > operator<=(const Bool& lh, const BndExpr< T1 >& rh) { return Rel2<LessEqual,Bool,BndExpr< T1 > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1 > inline Rel2<Distinct,Bool,BndExpr< T1 > > operator!=(const Bool& lh, const BndExpr< T1 >& rh) { return Rel2<Distinct,Bool,BndExpr< T1 > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Greater,Bool,BndExpr< T1 > > operator>(const Bool& lh, const BndExpr< T1 >& rh) { return Rel2<Greater,Bool,BndExpr< T1 > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Less,Bool,BndExpr< T1 > > operator<(const Bool& lh, const BndExpr< T1 >& rh) { return Rel2<Less,Bool,BndExpr< T1 > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Add,Bool,BndExpr< T1 > > operator+(const Bool& lh, const BndExpr< T1 >& rh) { return Rel2<Add,Bool,BndExpr< T1 > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Sub,Bool,BndExpr< T1 > > operator-(const Bool& lh, const BndExpr< T1 >& rh) { return Rel2<Sub,Bool,BndExpr< T1 > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Mul,Bool,BndExpr< T1 > > operator*(const Bool& lh, const BndExpr< T1 >& rh) { return Rel2<Mul,Bool,BndExpr< T1 > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Div,Bool,BndExpr< T1 > > operator/(const Bool& lh, const BndExpr< T1 >& rh) { return Rel2<Div,Bool,BndExpr< T1 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T1 > inline Rel2<And,Bool,BndExpr< T1 > > operator&&(const Bool& lh, const BndExpr< T1 >& rh) { return Rel2<And,Bool,BndExpr< T1 > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class T1 > inline Rel2<Or,Bool,BndExpr< T1 > > operator||(const Bool& lh, const BndExpr< T1 >& rh) { return Rel2<Or,Bool,BndExpr< T1 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1 > inline Rel2<Equal,Double,BndExpr< T1 > > operator==(const Double& lh, const BndExpr< T1 >& rh) { return Rel2<Equal,Double,BndExpr< T1 > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<GreaterEqual,Double,BndExpr< T1 > > operator>=(const Double& lh, const BndExpr< T1 >& rh) { return Rel2<GreaterEqual,Double,BndExpr< T1 > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<LessEqual,Double,BndExpr< T1 > > operator<=(const Double& lh, const BndExpr< T1 >& rh) { return Rel2<LessEqual,Double,BndExpr< T1 > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1 > inline Rel2<Distinct,Double,BndExpr< T1 > > operator!=(const Double& lh, const BndExpr< T1 >& rh) { return Rel2<Distinct,Double,BndExpr< T1 > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Greater,Double,BndExpr< T1 > > operator>(const Double& lh, const BndExpr< T1 >& rh) { return Rel2<Greater,Double,BndExpr< T1 > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Less,Double,BndExpr< T1 > > operator<(const Double& lh, const BndExpr< T1 >& rh) { return Rel2<Less,Double,BndExpr< T1 > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Add,Double,BndExpr< T1 > > operator+(const Double& lh, const BndExpr< T1 >& rh) { return Rel2<Add,Double,BndExpr< T1 > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Sub,Double,BndExpr< T1 > > operator-(const Double& lh, const BndExpr< T1 >& rh) { return Rel2<Sub,Double,BndExpr< T1 > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Mul,Double,BndExpr< T1 > > operator*(const Double& lh, const BndExpr< T1 >& rh) { return Rel2<Mul,Double,BndExpr< T1 > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Div,Double,BndExpr< T1 > > operator/(const Double& lh, const BndExpr< T1 >& rh) { return Rel2<Div,Double,BndExpr< T1 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T1 > inline Rel2<And,Double,BndExpr< T1 > > operator&&(const Double& lh, const BndExpr< T1 >& rh) { return Rel2<And,Double,BndExpr< T1 > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class T1 > inline Rel2<Or,Double,BndExpr< T1 > > operator||(const Double& lh, const BndExpr< T1 >& rh) { return Rel2<Or,Double,BndExpr< T1 > >(lh,rh); }
/** Symmetric unary operator.  \ingroup ArithRelations */ template< class T1, class T2 > inline Rel1<Sym,DomExpr< T1,T2> > operator-(const DomExpr< T1,T2>& rh) { return Rel1<Sym,DomExpr< T1,T2> >(rh);} /** Negation unary operator.  \ingroup LogicalRelations */ template< class T1, class T2 > inline Rel1<Not,DomExpr< T1,T2> > operator!(const DomExpr< T1,T2>& rh) { return Rel1<Not,DomExpr< T1,T2> >(rh);} /** Absolute value unary operator.  \ingroup ArithRelations */ template< class T1, class T2 > inline Rel1<Abs,DomExpr< T1,T2> > abs(const DomExpr< T1,T2>& rh) { return Rel1<Abs,DomExpr< T1,T2> >(rh);} /** Min value (from a sequence) unary operator.  \ingroup ArithRelations */ template< class T1, class T2 > inline Rel1<Min,DomExpr< T1,T2> > min(const DomExpr< T1,T2>& rh) { return Rel1<Min,DomExpr< T1,T2> >(rh);} /** Max value (from a sequence) unary operator. \ingroup ArithRelations */ template< class T1, class T2 > inline Rel1<Max,DomExpr< T1,T2> > max(const DomExpr< T1,T2>& rh) { return Rel1<Max,DomExpr< T1,T2> >(rh);}
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1, class T2, class T > inline Rel2<Equal,DomExpr< T1,T2>,T > operator==(const DomExpr< T1,T2>& lh, const T& rh) { return Rel2<Equal,DomExpr< T1,T2>,T >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T2, class T > inline Rel2<GreaterEqual,DomExpr< T1,T2>,T > operator>=(const DomExpr< T1,T2>& lh, const T& rh) { return Rel2<GreaterEqual,DomExpr< T1,T2>,T >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T2, class T > inline Rel2<LessEqual,DomExpr< T1,T2>,T > operator<=(const DomExpr< T1,T2>& lh, const T& rh) { return Rel2<LessEqual,DomExpr< T1,T2>,T >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1, class T2, class T > inline Rel2<Distinct,DomExpr< T1,T2>,T > operator!=(const DomExpr< T1,T2>& lh, const T& rh) { return Rel2<Distinct,DomExpr< T1,T2>,T >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1, class T2, class T > inline Rel2<Greater,DomExpr< T1,T2>,T > operator>(const DomExpr< T1,T2>& lh, const T& rh) { return Rel2<Greater,DomExpr< T1,T2>,T >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1, class T2, class T > inline Rel2<Less,DomExpr< T1,T2>,T > operator<(const DomExpr< T1,T2>& lh, const T& rh) { return Rel2<Less,DomExpr< T1,T2>,T >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class T1, class T2, class T > inline Rel2<Add,DomExpr< T1,T2>,T > operator+(const DomExpr< T1,T2>& lh, const T& rh) { return Rel2<Add,DomExpr< T1,T2>,T >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1, class T2, class T > inline Rel2<Sub,DomExpr< T1,T2>,T > operator-(const DomExpr< T1,T2>& lh, const T& rh) { return Rel2<Sub,DomExpr< T1,T2>,T >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1, class T2, class T > inline Rel2<Mul,DomExpr< T1,T2>,T > operator*(const DomExpr< T1,T2>& lh, const T& rh) { return Rel2<Mul,DomExpr< T1,T2>,T >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class T1, class T2, class T > inline Rel2<Div,DomExpr< T1,T2>,T > operator/(const DomExpr< T1,T2>& lh, const T& rh) { return Rel2<Div,DomExpr< T1,T2>,T >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T1, class T2, class T > inline Rel2<And,DomExpr< T1,T2>,T > operator&&(const DomExpr< T1,T2>& lh, const T& rh) { return Rel2<And,DomExpr< T1,T2>,T >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class T1, class T2, class T > inline Rel2<Or,DomExpr< T1,T2>,T > operator||(const DomExpr< T1,T2>& lh, const T& rh) { return Rel2<Or,DomExpr< T1,T2>,T >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1, class T2 > inline Rel2<Equal,Int,DomExpr< T1,T2> > operator==(const Int& lh, const DomExpr< T1,T2>& rh) { return Rel2<Equal,Int,DomExpr< T1,T2> >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T2 > inline Rel2<GreaterEqual,Int,DomExpr< T1,T2> > operator>=(const Int& lh, const DomExpr< T1,T2>& rh) { return Rel2<GreaterEqual,Int,DomExpr< T1,T2> >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T2 > inline Rel2<LessEqual,Int,DomExpr< T1,T2> > operator<=(const Int& lh, const DomExpr< T1,T2>& rh) { return Rel2<LessEqual,Int,DomExpr< T1,T2> >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1, class T2 > inline Rel2<Distinct,Int,DomExpr< T1,T2> > operator!=(const Int& lh, const DomExpr< T1,T2>& rh) { return Rel2<Distinct,Int,DomExpr< T1,T2> >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1, class T2 > inline Rel2<Greater,Int,DomExpr< T1,T2> > operator>(const Int& lh, const DomExpr< T1,T2>& rh) { return Rel2<Greater,Int,DomExpr< T1,T2> >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1, class T2 > inline Rel2<Less,Int,DomExpr< T1,T2> > operator<(const Int& lh, const DomExpr< T1,T2>& rh) { return Rel2<Less,Int,DomExpr< T1,T2> >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class T1, class T2 > inline Rel2<Add,Int,DomExpr< T1,T2> > operator+(const Int& lh, const DomExpr< T1,T2>& rh) { return Rel2<Add,Int,DomExpr< T1,T2> >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1, class T2 > inline Rel2<Sub,Int,DomExpr< T1,T2> > operator-(const Int& lh, const DomExpr< T1,T2>& rh) { return Rel2<Sub,Int,DomExpr< T1,T2> >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1, class T2 > inline Rel2<Mul,Int,DomExpr< T1,T2> > operator*(const Int& lh, const DomExpr< T1,T2>& rh) { return Rel2<Mul,Int,DomExpr< T1,T2> >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class T1, class T2 > inline Rel2<Div,Int,DomExpr< T1,T2> > operator/(const Int& lh, const DomExpr< T1,T2>& rh) { return Rel2<Div,Int,DomExpr< T1,T2> >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T1, class T2 > inline Rel2<And,Int,DomExpr< T1,T2> > operator&&(const Int& lh, const DomExpr< T1,T2>& rh) { return Rel2<And,Int,DomExpr< T1,T2> >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class T1, class T2 > inline Rel2<Or,Int,DomExpr< T1,T2> > operator||(const Int& lh, const DomExpr< T1,T2>& rh) { return Rel2<Or,Int,DomExpr< T1,T2> >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1, class T2 > inline Rel2<Equal,Bool,DomExpr< T1,T2> > operator==(const Bool& lh, const DomExpr< T1,T2>& rh) { return Rel2<Equal,Bool,DomExpr< T1,T2> >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T2 > inline Rel2<GreaterEqual,Bool,DomExpr< T1,T2> > operator>=(const Bool& lh, const DomExpr< T1,T2>& rh) { return Rel2<GreaterEqual,Bool,DomExpr< T1,T2> >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T2 > inline Rel2<LessEqual,Bool,DomExpr< T1,T2> > operator<=(const Bool& lh, const DomExpr< T1,T2>& rh) { return Rel2<LessEqual,Bool,DomExpr< T1,T2> >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1, class T2 > inline Rel2<Distinct,Bool,DomExpr< T1,T2> > operator!=(const Bool& lh, const DomExpr< T1,T2>& rh) { return Rel2<Distinct,Bool,DomExpr< T1,T2> >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1, class T2 > inline Rel2<Greater,Bool,DomExpr< T1,T2> > operator>(const Bool& lh, const DomExpr< T1,T2>& rh) { return Rel2<Greater,Bool,DomExpr< T1,T2> >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1, class T2 > inline Rel2<Less,Bool,DomExpr< T1,T2> > operator<(const Bool& lh, const DomExpr< T1,T2>& rh) { return Rel2<Less,Bool,DomExpr< T1,T2> >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class T1, class T2 > inline Rel2<Add,Bool,DomExpr< T1,T2> > operator+(const Bool& lh, const DomExpr< T1,T2>& rh) { return Rel2<Add,Bool,DomExpr< T1,T2> >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1, class T2 > inline Rel2<Sub,Bool,DomExpr< T1,T2> > operator-(const Bool& lh, const DomExpr< T1,T2>& rh) { return Rel2<Sub,Bool,DomExpr< T1,T2> >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1, class T2 > inline Rel2<Mul,Bool,DomExpr< T1,T2> > operator*(const Bool& lh, const DomExpr< T1,T2>& rh) { return Rel2<Mul,Bool,DomExpr< T1,T2> >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class T1, class T2 > inline Rel2<Div,Bool,DomExpr< T1,T2> > operator/(const Bool& lh, const DomExpr< T1,T2>& rh) { return Rel2<Div,Bool,DomExpr< T1,T2> >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T1, class T2 > inline Rel2<And,Bool,DomExpr< T1,T2> > operator&&(const Bool& lh, const DomExpr< T1,T2>& rh) { return Rel2<And,Bool,DomExpr< T1,T2> >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class T1, class T2 > inline Rel2<Or,Bool,DomExpr< T1,T2> > operator||(const Bool& lh, const DomExpr< T1,T2>& rh) { return Rel2<Or,Bool,DomExpr< T1,T2> >(lh,rh); }
/** Symmetric unary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel1<Sym,MutExpr< T1 > > operator-(const MutExpr< T1 >& rh) { return Rel1<Sym,MutExpr< T1 > >(rh);} /** Negation unary operator.  \ingroup LogicalRelations */ template< class T1 > inline Rel1<Not,MutExpr< T1 > > operator!(const MutExpr< T1 >& rh) { return Rel1<Not,MutExpr< T1 > >(rh);} /** Absolute value unary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel1<Abs,MutExpr< T1 > > abs(const MutExpr< T1 >& rh) { return Rel1<Abs,MutExpr< T1 > >(rh);} /** Min value (from a sequence) unary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel1<Min,MutExpr< T1 > > min(const MutExpr< T1 >& rh) { return Rel1<Min,MutExpr< T1 > >(rh);} /** Max value (from a sequence) unary operator. \ingroup ArithRelations */ template< class T1 > inline Rel1<Max,MutExpr< T1 > > max(const MutExpr< T1 >& rh) { return Rel1<Max,MutExpr< T1 > >(rh);}
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1, class T > inline Rel2<Equal,MutExpr< T1 >,T > operator==(const MutExpr< T1 >& lh, const T& rh) { return Rel2<Equal,MutExpr< T1 >,T >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<GreaterEqual,MutExpr< T1 >,T > operator>=(const MutExpr< T1 >& lh, const T& rh) { return Rel2<GreaterEqual,MutExpr< T1 >,T >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<LessEqual,MutExpr< T1 >,T > operator<=(const MutExpr< T1 >& lh, const T& rh) { return Rel2<LessEqual,MutExpr< T1 >,T >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1, class T > inline Rel2<Distinct,MutExpr< T1 >,T > operator!=(const MutExpr< T1 >& lh, const T& rh) { return Rel2<Distinct,MutExpr< T1 >,T >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<Greater,MutExpr< T1 >,T > operator>(const MutExpr< T1 >& lh, const T& rh) { return Rel2<Greater,MutExpr< T1 >,T >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<Less,MutExpr< T1 >,T > operator<(const MutExpr< T1 >& lh, const T& rh) { return Rel2<Less,MutExpr< T1 >,T >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Add,MutExpr< T1 >,T > operator+(const MutExpr< T1 >& lh, const T& rh) { return Rel2<Add,MutExpr< T1 >,T >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Sub,MutExpr< T1 >,T > operator-(const MutExpr< T1 >& lh, const T& rh) { return Rel2<Sub,MutExpr< T1 >,T >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Mul,MutExpr< T1 >,T > operator*(const MutExpr< T1 >& lh, const T& rh) { return Rel2<Mul,MutExpr< T1 >,T >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Div,MutExpr< T1 >,T > operator/(const MutExpr< T1 >& lh, const T& rh) { return Rel2<Div,MutExpr< T1 >,T >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T1, class T > inline Rel2<And,MutExpr< T1 >,T > operator&&(const MutExpr< T1 >& lh, const T& rh) { return Rel2<And,MutExpr< T1 >,T >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class T1, class T > inline Rel2<Or,MutExpr< T1 >,T > operator||(const MutExpr< T1 >& lh, const T& rh) { return Rel2<Or,MutExpr< T1 >,T >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1 > inline Rel2<Equal,Int,MutExpr< T1 > > operator==(const Int& lh, const MutExpr< T1 >& rh) { return Rel2<Equal,Int,MutExpr< T1 > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<GreaterEqual,Int,MutExpr< T1 > > operator>=(const Int& lh, const MutExpr< T1 >& rh) { return Rel2<GreaterEqual,Int,MutExpr< T1 > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<LessEqual,Int,MutExpr< T1 > > operator<=(const Int& lh, const MutExpr< T1 >& rh) { return Rel2<LessEqual,Int,MutExpr< T1 > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1 > inline Rel2<Distinct,Int,MutExpr< T1 > > operator!=(const Int& lh, const MutExpr< T1 >& rh) { return Rel2<Distinct,Int,MutExpr< T1 > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Greater,Int,MutExpr< T1 > > operator>(const Int& lh, const MutExpr< T1 >& rh) { return Rel2<Greater,Int,MutExpr< T1 > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Less,Int,MutExpr< T1 > > operator<(const Int& lh, const MutExpr< T1 >& rh) { return Rel2<Less,Int,MutExpr< T1 > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Add,Int,MutExpr< T1 > > operator+(const Int& lh, const MutExpr< T1 >& rh) { return Rel2<Add,Int,MutExpr< T1 > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Sub,Int,MutExpr< T1 > > operator-(const Int& lh, const MutExpr< T1 >& rh) { return Rel2<Sub,Int,MutExpr< T1 > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Mul,Int,MutExpr< T1 > > operator*(const Int& lh, const MutExpr< T1 >& rh) { return Rel2<Mul,Int,MutExpr< T1 > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Div,Int,MutExpr< T1 > > operator/(const Int& lh, const MutExpr< T1 >& rh) { return Rel2<Div,Int,MutExpr< T1 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T1 > inline Rel2<And,Int,MutExpr< T1 > > operator&&(const Int& lh, const MutExpr< T1 >& rh) { return Rel2<And,Int,MutExpr< T1 > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class T1 > inline Rel2<Or,Int,MutExpr< T1 > > operator||(const Int& lh, const MutExpr< T1 >& rh) { return Rel2<Or,Int,MutExpr< T1 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1 > inline Rel2<Equal,Bool,MutExpr< T1 > > operator==(const Bool& lh, const MutExpr< T1 >& rh) { return Rel2<Equal,Bool,MutExpr< T1 > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<GreaterEqual,Bool,MutExpr< T1 > > operator>=(const Bool& lh, const MutExpr< T1 >& rh) { return Rel2<GreaterEqual,Bool,MutExpr< T1 > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<LessEqual,Bool,MutExpr< T1 > > operator<=(const Bool& lh, const MutExpr< T1 >& rh) { return Rel2<LessEqual,Bool,MutExpr< T1 > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1 > inline Rel2<Distinct,Bool,MutExpr< T1 > > operator!=(const Bool& lh, const MutExpr< T1 >& rh) { return Rel2<Distinct,Bool,MutExpr< T1 > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Greater,Bool,MutExpr< T1 > > operator>(const Bool& lh, const MutExpr< T1 >& rh) { return Rel2<Greater,Bool,MutExpr< T1 > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Less,Bool,MutExpr< T1 > > operator<(const Bool& lh, const MutExpr< T1 >& rh) { return Rel2<Less,Bool,MutExpr< T1 > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Add,Bool,MutExpr< T1 > > operator+(const Bool& lh, const MutExpr< T1 >& rh) { return Rel2<Add,Bool,MutExpr< T1 > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Sub,Bool,MutExpr< T1 > > operator-(const Bool& lh, const MutExpr< T1 >& rh) { return Rel2<Sub,Bool,MutExpr< T1 > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Mul,Bool,MutExpr< T1 > > operator*(const Bool& lh, const MutExpr< T1 >& rh) { return Rel2<Mul,Bool,MutExpr< T1 > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Div,Bool,MutExpr< T1 > > operator/(const Bool& lh, const MutExpr< T1 >& rh) { return Rel2<Div,Bool,MutExpr< T1 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T1 > inline Rel2<And,Bool,MutExpr< T1 > > operator&&(const Bool& lh, const MutExpr< T1 >& rh) { return Rel2<And,Bool,MutExpr< T1 > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class T1 > inline Rel2<Or,Bool,MutExpr< T1 > > operator||(const Bool& lh, const MutExpr< T1 >& rh) { return Rel2<Or,Bool,MutExpr< T1 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1 > inline Rel2<Equal,Double,MutExpr< T1 > > operator==(const Double& lh, const MutExpr< T1 >& rh) { return Rel2<Equal,Double,MutExpr< T1 > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<GreaterEqual,Double,MutExpr< T1 > > operator>=(const Double& lh, const MutExpr< T1 >& rh) { return Rel2<GreaterEqual,Double,MutExpr< T1 > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<LessEqual,Double,MutExpr< T1 > > operator<=(const Double& lh, const MutExpr< T1 >& rh) { return Rel2<LessEqual,Double,MutExpr< T1 > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1 > inline Rel2<Distinct,Double,MutExpr< T1 > > operator!=(const Double& lh, const MutExpr< T1 >& rh) { return Rel2<Distinct,Double,MutExpr< T1 > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Greater,Double,MutExpr< T1 > > operator>(const Double& lh, const MutExpr< T1 >& rh) { return Rel2<Greater,Double,MutExpr< T1 > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Less,Double,MutExpr< T1 > > operator<(const Double& lh, const MutExpr< T1 >& rh) { return Rel2<Less,Double,MutExpr< T1 > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Add,Double,MutExpr< T1 > > operator+(const Double& lh, const MutExpr< T1 >& rh) { return Rel2<Add,Double,MutExpr< T1 > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Sub,Double,MutExpr< T1 > > operator-(const Double& lh, const MutExpr< T1 >& rh) { return Rel2<Sub,Double,MutExpr< T1 > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Mul,Double,MutExpr< T1 > > operator*(const Double& lh, const MutExpr< T1 >& rh) { return Rel2<Mul,Double,MutExpr< T1 > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Div,Double,MutExpr< T1 > > operator/(const Double& lh, const MutExpr< T1 >& rh) { return Rel2<Div,Double,MutExpr< T1 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T1 > inline Rel2<And,Double,MutExpr< T1 > > operator&&(const Double& lh, const MutExpr< T1 >& rh) { return Rel2<And,Double,MutExpr< T1 > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class T1 > inline Rel2<Or,Double,MutExpr< T1 > > operator||(const Double& lh, const MutExpr< T1 >& rh) { return Rel2<Or,Double,MutExpr< T1 > >(lh,rh); }
