/************************************************************************** *   This file is part of CaSPER (http://proteina.di.fct.unl.pt/casper).   *
*
 *                                                                         *
 *   Copyright:                                                            *
 *   2005-2008 - Marco Correia <marco.v.correia@gmail.com>                 *
 *                                                                         *
 *   Licensed under the Apache License, Version 2.0 (the "License");       * 
 *   you may not use this file except in compliance with the License.      * 
 *   You may obtain a copy of the License at                               * 
 *            http://www.apache.org/licenses/LICENSE-2.0                   * 
 *   Unless required by applicable law or agreed to in writing, software   * 
 *   distributed under the License is distributed on an                    * 
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,          * 
 *   either express or implied.                                            * 
 *   See the License for the specific language governing permissions and   * 
 *   limitations under the License.                                        *
 \*************************************************************************/
/************************************************************************** *   This file is part of CaSPER (http://proteina.di.fct.unl.pt/casper).   *
*
 *                                                                         *
 *   Copyright:                                                            *
 *   2005-2008 - Marco Correia <marco.v.correia@gmail.com>                 *
 *                                                                         *
 *   Licensed under the Apache License, Version 2.0 (the "License");       * 
 *   you may not use this file except in compliance with the License.      * 
 *   You may obtain a copy of the License at                               * 
 *            http://www.apache.org/licenses/LICENSE-2.0                   * 
 *   Unless required by applicable law or agreed to in writing, software   * 
 *   distributed under the License is distributed on an                    * 
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,          * 
 *   either express or implied.                                            * 
 *   See the License for the specific language governing permissions and   * 
 *   limitations under the License.                                        *
 \*************************************************************************/
// --- RELATIONS (Compile time expressions) ---
/** Symmetric unary operator.  \ingroup ArithRelations */ template< class T1, class T2 > inline Rel1<Sym,DomVar< T1,T2 > > operator-(const DomVar< T1,T2 >& rh) { return Rel1<Sym,DomVar< T1,T2 > >(rh);} /** Negation unary operator.  \ingroup LogicalRelations */ template< class T1, class T2 > inline Rel1<Not,DomVar< T1,T2 > > operator!(const DomVar< T1,T2 >& rh) { return Rel1<Not,DomVar< T1,T2 > >(rh);} /** Absolute value unary operator.  \ingroup ArithRelations */ template< class T1, class T2 > inline Rel1<Abs,DomVar< T1,T2 > > abs(const DomVar< T1,T2 >& rh) { return Rel1<Abs,DomVar< T1,T2 > >(rh);} /** Min value (from a sequence) unary operator.  \ingroup ArithRelations */ template< class T1, class T2 > inline Rel1<Min,DomVar< T1,T2 > > min(const DomVar< T1,T2 >& rh) { return Rel1<Min,DomVar< T1,T2 > >(rh);} /** Max value (from a sequence) unary operator. \ingroup ArithRelations */ template< class T1, class T2 > inline Rel1<Max,DomVar< T1,T2 > > max(const DomVar< T1,T2 >& rh) { return Rel1<Max,DomVar< T1,T2 > >(rh);}
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1, class T2, class T > inline Rel2<Equal,DomVar< T1,T2 >,T > operator==(const DomVar< T1,T2 >& lh, const T& rh) { return Rel2<Equal,DomVar< T1,T2 >,T >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T2, class T > inline Rel2<GreaterEqual,DomVar< T1,T2 >,T > operator>=(const DomVar< T1,T2 >& lh, const T& rh) { return Rel2<GreaterEqual,DomVar< T1,T2 >,T >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T2, class T > inline Rel2<LessEqual,DomVar< T1,T2 >,T > operator<=(const DomVar< T1,T2 >& lh, const T& rh) { return Rel2<LessEqual,DomVar< T1,T2 >,T >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1, class T2, class T > inline Rel2<Distinct,DomVar< T1,T2 >,T > operator!=(const DomVar< T1,T2 >& lh, const T& rh) { return Rel2<Distinct,DomVar< T1,T2 >,T >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1, class T2, class T > inline Rel2<Greater,DomVar< T1,T2 >,T > operator>(const DomVar< T1,T2 >& lh, const T& rh) { return Rel2<Greater,DomVar< T1,T2 >,T >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1, class T2, class T > inline Rel2<Less,DomVar< T1,T2 >,T > operator<(const DomVar< T1,T2 >& lh, const T& rh) { return Rel2<Less,DomVar< T1,T2 >,T >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class T1, class T2, class T > inline Rel2<Add,DomVar< T1,T2 >,T > operator+(const DomVar< T1,T2 >& lh, const T& rh) { return Rel2<Add,DomVar< T1,T2 >,T >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1, class T2, class T > inline Rel2<Sub,DomVar< T1,T2 >,T > operator-(const DomVar< T1,T2 >& lh, const T& rh) { return Rel2<Sub,DomVar< T1,T2 >,T >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1, class T2, class T > inline Rel2<Mul,DomVar< T1,T2 >,T > operator*(const DomVar< T1,T2 >& lh, const T& rh) { return Rel2<Mul,DomVar< T1,T2 >,T >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class T1, class T2, class T > inline Rel2<Div,DomVar< T1,T2 >,T > operator/(const DomVar< T1,T2 >& lh, const T& rh) { return Rel2<Div,DomVar< T1,T2 >,T >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T1, class T2, class T > inline Rel2<And,DomVar< T1,T2 >,T > operator&&(const DomVar< T1,T2 >& lh, const T& rh) { return Rel2<And,DomVar< T1,T2 >,T >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class T1, class T2, class T > inline Rel2<Or,DomVar< T1,T2 >,T > operator||(const DomVar< T1,T2 >& lh, const T& rh) { return Rel2<Or,DomVar< T1,T2 >,T >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T2 > inline Rel2<Equal,Int,DomVar< Int,T2 > > operator==(const Int& lh, const DomVar< Int,T2 >& rh) { return Rel2<Equal,Int,DomVar< Int,T2 > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T2 > inline Rel2<GreaterEqual,Int,DomVar< Int,T2 > > operator>=(const Int& lh, const DomVar< Int,T2 >& rh) { return Rel2<GreaterEqual,Int,DomVar< Int,T2 > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T2 > inline Rel2<LessEqual,Int,DomVar< Int,T2 > > operator<=(const Int& lh, const DomVar< Int,T2 >& rh) { return Rel2<LessEqual,Int,DomVar< Int,T2 > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T2 > inline Rel2<Distinct,Int,DomVar< Int,T2 > > operator!=(const Int& lh, const DomVar< Int,T2 >& rh) { return Rel2<Distinct,Int,DomVar< Int,T2 > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T2 > inline Rel2<Greater,Int,DomVar< Int,T2 > > operator>(const Int& lh, const DomVar< Int,T2 >& rh) { return Rel2<Greater,Int,DomVar< Int,T2 > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class T2 > inline Rel2<Less,Int,DomVar< Int,T2 > > operator<(const Int& lh, const DomVar< Int,T2 >& rh) { return Rel2<Less,Int,DomVar< Int,T2 > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class T2 > inline Rel2<Add,Int,DomVar< Int,T2 > > operator+(const Int& lh, const DomVar< Int,T2 >& rh) { return Rel2<Add,Int,DomVar< Int,T2 > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T2 > inline Rel2<Sub,Int,DomVar< Int,T2 > > operator-(const Int& lh, const DomVar< Int,T2 >& rh) { return Rel2<Sub,Int,DomVar< Int,T2 > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T2 > inline Rel2<Mul,Int,DomVar< Int,T2 > > operator*(const Int& lh, const DomVar< Int,T2 >& rh) { return Rel2<Mul,Int,DomVar< Int,T2 > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class T2 > inline Rel2<Div,Int,DomVar< Int,T2 > > operator/(const Int& lh, const DomVar< Int,T2 >& rh) { return Rel2<Div,Int,DomVar< Int,T2 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T2 > inline Rel2<And,Int,DomVar< Int,T2 > > operator&&(const Int& lh, const DomVar< Int,T2 >& rh) { return Rel2<And,Int,DomVar< Int,T2 > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class T2 > inline Rel2<Or,Int,DomVar< Int,T2 > > operator||(const Int& lh, const DomVar< Int,T2 >& rh) { return Rel2<Or,Int,DomVar< Int,T2 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T2 > inline Rel2<Equal,Bool,DomVar< Bool,T2 > > operator==(const Bool& lh, const DomVar< Bool,T2 >& rh) { return Rel2<Equal,Bool,DomVar< Bool,T2 > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T2 > inline Rel2<GreaterEqual,Bool,DomVar< Bool,T2 > > operator>=(const Bool& lh, const DomVar< Bool,T2 >& rh) { return Rel2<GreaterEqual,Bool,DomVar< Bool,T2 > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T2 > inline Rel2<LessEqual,Bool,DomVar< Bool,T2 > > operator<=(const Bool& lh, const DomVar< Bool,T2 >& rh) { return Rel2<LessEqual,Bool,DomVar< Bool,T2 > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T2 > inline Rel2<Distinct,Bool,DomVar< Bool,T2 > > operator!=(const Bool& lh, const DomVar< Bool,T2 >& rh) { return Rel2<Distinct,Bool,DomVar< Bool,T2 > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T2 > inline Rel2<Greater,Bool,DomVar< Bool,T2 > > operator>(const Bool& lh, const DomVar< Bool,T2 >& rh) { return Rel2<Greater,Bool,DomVar< Bool,T2 > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class T2 > inline Rel2<Less,Bool,DomVar< Bool,T2 > > operator<(const Bool& lh, const DomVar< Bool,T2 >& rh) { return Rel2<Less,Bool,DomVar< Bool,T2 > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class T2 > inline Rel2<Add,Bool,DomVar< Bool,T2 > > operator+(const Bool& lh, const DomVar< Bool,T2 >& rh) { return Rel2<Add,Bool,DomVar< Bool,T2 > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T2 > inline Rel2<Sub,Bool,DomVar< Bool,T2 > > operator-(const Bool& lh, const DomVar< Bool,T2 >& rh) { return Rel2<Sub,Bool,DomVar< Bool,T2 > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T2 > inline Rel2<Mul,Bool,DomVar< Bool,T2 > > operator*(const Bool& lh, const DomVar< Bool,T2 >& rh) { return Rel2<Mul,Bool,DomVar< Bool,T2 > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class T2 > inline Rel2<Div,Bool,DomVar< Bool,T2 > > operator/(const Bool& lh, const DomVar< Bool,T2 >& rh) { return Rel2<Div,Bool,DomVar< Bool,T2 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T2 > inline Rel2<And,Bool,DomVar< Bool,T2 > > operator&&(const Bool& lh, const DomVar< Bool,T2 >& rh) { return Rel2<And,Bool,DomVar< Bool,T2 > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class T2 > inline Rel2<Or,Bool,DomVar< Bool,T2 > > operator||(const Bool& lh, const DomVar< Bool,T2 >& rh) { return Rel2<Or,Bool,DomVar< Bool,T2 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T2 > inline Rel2<Equal,Double,DomVar< Double,T2 > > operator==(const Double& lh, const DomVar< Double,T2 >& rh) { return Rel2<Equal,Double,DomVar< Double,T2 > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T2 > inline Rel2<GreaterEqual,Double,DomVar< Double,T2 > > operator>=(const Double& lh, const DomVar< Double,T2 >& rh) { return Rel2<GreaterEqual,Double,DomVar< Double,T2 > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T2 > inline Rel2<LessEqual,Double,DomVar< Double,T2 > > operator<=(const Double& lh, const DomVar< Double,T2 >& rh) { return Rel2<LessEqual,Double,DomVar< Double,T2 > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T2 > inline Rel2<Distinct,Double,DomVar< Double,T2 > > operator!=(const Double& lh, const DomVar< Double,T2 >& rh) { return Rel2<Distinct,Double,DomVar< Double,T2 > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T2 > inline Rel2<Greater,Double,DomVar< Double,T2 > > operator>(const Double& lh, const DomVar< Double,T2 >& rh) { return Rel2<Greater,Double,DomVar< Double,T2 > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class T2 > inline Rel2<Less,Double,DomVar< Double,T2 > > operator<(const Double& lh, const DomVar< Double,T2 >& rh) { return Rel2<Less,Double,DomVar< Double,T2 > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class T2 > inline Rel2<Add,Double,DomVar< Double,T2 > > operator+(const Double& lh, const DomVar< Double,T2 >& rh) { return Rel2<Add,Double,DomVar< Double,T2 > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T2 > inline Rel2<Sub,Double,DomVar< Double,T2 > > operator-(const Double& lh, const DomVar< Double,T2 >& rh) { return Rel2<Sub,Double,DomVar< Double,T2 > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T2 > inline Rel2<Mul,Double,DomVar< Double,T2 > > operator*(const Double& lh, const DomVar< Double,T2 >& rh) { return Rel2<Mul,Double,DomVar< Double,T2 > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class T2 > inline Rel2<Div,Double,DomVar< Double,T2 > > operator/(const Double& lh, const DomVar< Double,T2 >& rh) { return Rel2<Div,Double,DomVar< Double,T2 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T2 > inline Rel2<And,Double,DomVar< Double,T2 > > operator&&(const Double& lh, const DomVar< Double,T2 >& rh) { return Rel2<And,Double,DomVar< Double,T2 > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class T2 > inline Rel2<Or,Double,DomVar< Double,T2 > > operator||(const Double& lh, const DomVar< Double,T2 >& rh) { return Rel2<Or,Double,DomVar< Double,T2 > >(lh,rh); }
/** Symmetric unary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel1<Sym,MutVar< T1 > > operator-(const MutVar< T1 >& rh) { return Rel1<Sym,MutVar< T1 > >(rh);} /** Negation unary operator.  \ingroup LogicalRelations */ template< class T1 > inline Rel1<Not,MutVar< T1 > > operator!(const MutVar< T1 >& rh) { return Rel1<Not,MutVar< T1 > >(rh);} /** Absolute value unary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel1<Abs,MutVar< T1 > > abs(const MutVar< T1 >& rh) { return Rel1<Abs,MutVar< T1 > >(rh);} /** Min value (from a sequence) unary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel1<Min,MutVar< T1 > > min(const MutVar< T1 >& rh) { return Rel1<Min,MutVar< T1 > >(rh);} /** Max value (from a sequence) unary operator. \ingroup ArithRelations */ template< class T1 > inline Rel1<Max,MutVar< T1 > > max(const MutVar< T1 >& rh) { return Rel1<Max,MutVar< T1 > >(rh);}
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1, class T > inline Rel2<Equal,MutVar< T1 >,T > operator==(const MutVar< T1 >& lh, const T& rh) { return Rel2<Equal,MutVar< T1 >,T >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<GreaterEqual,MutVar< T1 >,T > operator>=(const MutVar< T1 >& lh, const T& rh) { return Rel2<GreaterEqual,MutVar< T1 >,T >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<LessEqual,MutVar< T1 >,T > operator<=(const MutVar< T1 >& lh, const T& rh) { return Rel2<LessEqual,MutVar< T1 >,T >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1, class T > inline Rel2<Distinct,MutVar< T1 >,T > operator!=(const MutVar< T1 >& lh, const T& rh) { return Rel2<Distinct,MutVar< T1 >,T >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<Greater,MutVar< T1 >,T > operator>(const MutVar< T1 >& lh, const T& rh) { return Rel2<Greater,MutVar< T1 >,T >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<Less,MutVar< T1 >,T > operator<(const MutVar< T1 >& lh, const T& rh) { return Rel2<Less,MutVar< T1 >,T >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Add,MutVar< T1 >,T > operator+(const MutVar< T1 >& lh, const T& rh) { return Rel2<Add,MutVar< T1 >,T >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Sub,MutVar< T1 >,T > operator-(const MutVar< T1 >& lh, const T& rh) { return Rel2<Sub,MutVar< T1 >,T >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Mul,MutVar< T1 >,T > operator*(const MutVar< T1 >& lh, const T& rh) { return Rel2<Mul,MutVar< T1 >,T >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Div,MutVar< T1 >,T > operator/(const MutVar< T1 >& lh, const T& rh) { return Rel2<Div,MutVar< T1 >,T >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T1, class T > inline Rel2<And,MutVar< T1 >,T > operator&&(const MutVar< T1 >& lh, const T& rh) { return Rel2<And,MutVar< T1 >,T >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class T1, class T > inline Rel2<Or,MutVar< T1 >,T > operator||(const MutVar< T1 >& lh, const T& rh) { return Rel2<Or,MutVar< T1 >,T >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ inline Rel2<Equal,Int,MutVar< Int > > operator==(const Int& lh, const MutVar< Int >& rh) { return Rel2<Equal,Int,MutVar< Int > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<GreaterEqual,Int,MutVar< Int > > operator>=(const Int& lh, const MutVar< Int >& rh) { return Rel2<GreaterEqual,Int,MutVar< Int > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<LessEqual,Int,MutVar< Int > > operator<=(const Int& lh, const MutVar< Int >& rh) { return Rel2<LessEqual,Int,MutVar< Int > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ inline Rel2<Distinct,Int,MutVar< Int > > operator!=(const Int& lh, const MutVar< Int >& rh) { return Rel2<Distinct,Int,MutVar< Int > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ inline Rel2<Greater,Int,MutVar< Int > > operator>(const Int& lh, const MutVar< Int >& rh) { return Rel2<Greater,Int,MutVar< Int > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ inline Rel2<Less,Int,MutVar< Int > > operator<(const Int& lh, const MutVar< Int >& rh) { return Rel2<Less,Int,MutVar< Int > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ inline Rel2<Add,Int,MutVar< Int > > operator+(const Int& lh, const MutVar< Int >& rh) { return Rel2<Add,Int,MutVar< Int > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ inline Rel2<Sub,Int,MutVar< Int > > operator-(const Int& lh, const MutVar< Int >& rh) { return Rel2<Sub,Int,MutVar< Int > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ inline Rel2<Mul,Int,MutVar< Int > > operator*(const Int& lh, const MutVar< Int >& rh) { return Rel2<Mul,Int,MutVar< Int > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ inline Rel2<Div,Int,MutVar< Int > > operator/(const Int& lh, const MutVar< Int >& rh) { return Rel2<Div,Int,MutVar< Int > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ inline Rel2<And,Int,MutVar< Int > > operator&&(const Int& lh, const MutVar< Int >& rh) { return Rel2<And,Int,MutVar< Int > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ inline Rel2<Or,Int,MutVar< Int > > operator||(const Int& lh, const MutVar< Int >& rh) { return Rel2<Or,Int,MutVar< Int > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ inline Rel2<Equal,Bool,MutVar< Bool > > operator==(const Bool& lh, const MutVar< Bool >& rh) { return Rel2<Equal,Bool,MutVar< Bool > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<GreaterEqual,Bool,MutVar< Bool > > operator>=(const Bool& lh, const MutVar< Bool >& rh) { return Rel2<GreaterEqual,Bool,MutVar< Bool > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<LessEqual,Bool,MutVar< Bool > > operator<=(const Bool& lh, const MutVar< Bool >& rh) { return Rel2<LessEqual,Bool,MutVar< Bool > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ inline Rel2<Distinct,Bool,MutVar< Bool > > operator!=(const Bool& lh, const MutVar< Bool >& rh) { return Rel2<Distinct,Bool,MutVar< Bool > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ inline Rel2<Greater,Bool,MutVar< Bool > > operator>(const Bool& lh, const MutVar< Bool >& rh) { return Rel2<Greater,Bool,MutVar< Bool > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ inline Rel2<Less,Bool,MutVar< Bool > > operator<(const Bool& lh, const MutVar< Bool >& rh) { return Rel2<Less,Bool,MutVar< Bool > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ inline Rel2<Add,Bool,MutVar< Bool > > operator+(const Bool& lh, const MutVar< Bool >& rh) { return Rel2<Add,Bool,MutVar< Bool > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ inline Rel2<Sub,Bool,MutVar< Bool > > operator-(const Bool& lh, const MutVar< Bool >& rh) { return Rel2<Sub,Bool,MutVar< Bool > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ inline Rel2<Mul,Bool,MutVar< Bool > > operator*(const Bool& lh, const MutVar< Bool >& rh) { return Rel2<Mul,Bool,MutVar< Bool > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ inline Rel2<Div,Bool,MutVar< Bool > > operator/(const Bool& lh, const MutVar< Bool >& rh) { return Rel2<Div,Bool,MutVar< Bool > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ inline Rel2<And,Bool,MutVar< Bool > > operator&&(const Bool& lh, const MutVar< Bool >& rh) { return Rel2<And,Bool,MutVar< Bool > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ inline Rel2<Or,Bool,MutVar< Bool > > operator||(const Bool& lh, const MutVar< Bool >& rh) { return Rel2<Or,Bool,MutVar< Bool > >(lh,rh); }
