/************************************************************************** *   This file is part of CaSPER (http://proteina.di.fct.unl.pt/casper).   *
*
 *                                                                         *
 *   Copyright:                                                            *
 *   2005-2008 - Marco Correia <marco.v.correia@gmail.com>                 *
 *                                                                         *
 *   Licensed under the Apache License, Version 2.0 (the "License");       * 
 *   you may not use this file except in compliance with the License.      * 
 *   You may obtain a copy of the License at                               * 
 *            http://www.apache.org/licenses/LICENSE-2.0                   * 
 *   Unless required by applicable law or agreed to in writing, software   * 
 *   distributed under the License is distributed on an                    * 
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,          * 
 *   either express or implied.                                            * 
 *   See the License for the specific language governing permissions and   * 
 *   limitations under the License.                                        *
 \*************************************************************************/
/************************************************************************** *   This file is part of CaSPER (http://proteina.di.fct.unl.pt/casper).   *
*
 *                                                                         *
 *   Copyright:                                                            *
 *   2005-2008 - Marco Correia <marco.v.correia@gmail.com>                 *
 *                                                                         *
 *   Licensed under the Apache License, Version 2.0 (the "License");       * 
 *   you may not use this file except in compliance with the License.      * 
 *   You may obtain a copy of the License at                               * 
 *            http://www.apache.org/licenses/LICENSE-2.0                   * 
 *   Unless required by applicable law or agreed to in writing, software   * 
 *   distributed under the License is distributed on an                    * 
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,          * 
 *   either express or implied.                                            * 
 *   See the License for the specific language governing permissions and   * 
 *   limitations under the License.                                        *
 \*************************************************************************/
// --- RELATIONS (Compile time expressions) ---
/** Symmetric unary operator.  \ingroup ArithRelations */ template< class T1, class T2 > inline Rel1<Sym,BndView< T1,T2> > operator-(const BndView< T1,T2>& rh) { return Rel1<Sym,BndView< T1,T2> >(rh);} /** Negation unary operator.  \ingroup LogicalRelations */ template< class T1, class T2 > inline Rel1<Not,BndView< T1,T2> > operator!(const BndView< T1,T2>& rh) { return Rel1<Not,BndView< T1,T2> >(rh);} /** Absolute value unary operator.  \ingroup ArithRelations */ template< class T1, class T2 > inline Rel1<Abs,BndView< T1,T2> > abs(const BndView< T1,T2>& rh) { return Rel1<Abs,BndView< T1,T2> >(rh);} /** Min value (from a sequence) unary operator.  \ingroup ArithRelations */ template< class T1, class T2 > inline Rel1<Min,BndView< T1,T2> > min(const BndView< T1,T2>& rh) { return Rel1<Min,BndView< T1,T2> >(rh);} /** Max value (from a sequence) unary operator. \ingroup ArithRelations */ template< class T1, class T2 > inline Rel1<Max,BndView< T1,T2> > max(const BndView< T1,T2>& rh) { return Rel1<Max,BndView< T1,T2> >(rh);}
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1, class T2, class T > inline Rel2<Equal,BndView< T1,T2>,T > operator==(const BndView< T1,T2>& lh, const T& rh) { return Rel2<Equal,BndView< T1,T2>,T >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T2, class T > inline Rel2<GreaterEqual,BndView< T1,T2>,T > operator>=(const BndView< T1,T2>& lh, const T& rh) { return Rel2<GreaterEqual,BndView< T1,T2>,T >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T2, class T > inline Rel2<LessEqual,BndView< T1,T2>,T > operator<=(const BndView< T1,T2>& lh, const T& rh) { return Rel2<LessEqual,BndView< T1,T2>,T >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1, class T2, class T > inline Rel2<Distinct,BndView< T1,T2>,T > operator!=(const BndView< T1,T2>& lh, const T& rh) { return Rel2<Distinct,BndView< T1,T2>,T >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1, class T2, class T > inline Rel2<Greater,BndView< T1,T2>,T > operator>(const BndView< T1,T2>& lh, const T& rh) { return Rel2<Greater,BndView< T1,T2>,T >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1, class T2, class T > inline Rel2<Less,BndView< T1,T2>,T > operator<(const BndView< T1,T2>& lh, const T& rh) { return Rel2<Less,BndView< T1,T2>,T >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class T1, class T2, class T > inline Rel2<Add,BndView< T1,T2>,T > operator+(const BndView< T1,T2>& lh, const T& rh) { return Rel2<Add,BndView< T1,T2>,T >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1, class T2, class T > inline Rel2<Sub,BndView< T1,T2>,T > operator-(const BndView< T1,T2>& lh, const T& rh) { return Rel2<Sub,BndView< T1,T2>,T >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1, class T2, class T > inline Rel2<Mul,BndView< T1,T2>,T > operator*(const BndView< T1,T2>& lh, const T& rh) { return Rel2<Mul,BndView< T1,T2>,T >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class T1, class T2, class T > inline Rel2<Div,BndView< T1,T2>,T > operator/(const BndView< T1,T2>& lh, const T& rh) { return Rel2<Div,BndView< T1,T2>,T >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T1, class T2, class T > inline Rel2<And,BndView< T1,T2>,T > operator&&(const BndView< T1,T2>& lh, const T& rh) { return Rel2<And,BndView< T1,T2>,T >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class T1, class T2, class T > inline Rel2<Or,BndView< T1,T2>,T > operator||(const BndView< T1,T2>& lh, const T& rh) { return Rel2<Or,BndView< T1,T2>,T >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1, class T2 > inline Rel2<Equal,Int,BndView< T1,T2> > operator==(const Int& lh, const BndView< T1,T2>& rh) { return Rel2<Equal,Int,BndView< T1,T2> >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T2 > inline Rel2<GreaterEqual,Int,BndView< T1,T2> > operator>=(const Int& lh, const BndView< T1,T2>& rh) { return Rel2<GreaterEqual,Int,BndView< T1,T2> >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T2 > inline Rel2<LessEqual,Int,BndView< T1,T2> > operator<=(const Int& lh, const BndView< T1,T2>& rh) { return Rel2<LessEqual,Int,BndView< T1,T2> >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1, class T2 > inline Rel2<Distinct,Int,BndView< T1,T2> > operator!=(const Int& lh, const BndView< T1,T2>& rh) { return Rel2<Distinct,Int,BndView< T1,T2> >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1, class T2 > inline Rel2<Greater,Int,BndView< T1,T2> > operator>(const Int& lh, const BndView< T1,T2>& rh) { return Rel2<Greater,Int,BndView< T1,T2> >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1, class T2 > inline Rel2<Less,Int,BndView< T1,T2> > operator<(const Int& lh, const BndView< T1,T2>& rh) { return Rel2<Less,Int,BndView< T1,T2> >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class T1, class T2 > inline Rel2<Add,Int,BndView< T1,T2> > operator+(const Int& lh, const BndView< T1,T2>& rh) { return Rel2<Add,Int,BndView< T1,T2> >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1, class T2 > inline Rel2<Sub,Int,BndView< T1,T2> > operator-(const Int& lh, const BndView< T1,T2>& rh) { return Rel2<Sub,Int,BndView< T1,T2> >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1, class T2 > inline Rel2<Mul,Int,BndView< T1,T2> > operator*(const Int& lh, const BndView< T1,T2>& rh) { return Rel2<Mul,Int,BndView< T1,T2> >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class T1, class T2 > inline Rel2<Div,Int,BndView< T1,T2> > operator/(const Int& lh, const BndView< T1,T2>& rh) { return Rel2<Div,Int,BndView< T1,T2> >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T1, class T2 > inline Rel2<And,Int,BndView< T1,T2> > operator&&(const Int& lh, const BndView< T1,T2>& rh) { return Rel2<And,Int,BndView< T1,T2> >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class T1, class T2 > inline Rel2<Or,Int,BndView< T1,T2> > operator||(const Int& lh, const BndView< T1,T2>& rh) { return Rel2<Or,Int,BndView< T1,T2> >(lh,rh); }
