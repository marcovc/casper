/************************************************************************** *   This file is part of CaSPER (http://proteina.di.fct.unl.pt/casper).   *
*
 *                                                                         *
 *   Copyright:                                                            *
 *   2005-2008 - Marco Correia <marco.v.correia@gmail.com>                 *
 *                                                                         *
 *   Licensed under the Apache License, Version 2.0 (the "License");       * 
 *   you may not use this file except in compliance with the License.      * 
 *   You may obtain a copy of the License at                               * 
 *            http://www.apache.org/licenses/LICENSE-2.0                   * 
 *   Unless required by applicable law or agreed to in writing, software   * 
 *   distributed under the License is distributed on an                    * 
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,          * 
 *   either express or implied.                                            * 
 *   See the License for the specific language governing permissions and   * 
 *   limitations under the License.                                        *
 \*************************************************************************/
/************************************************************************** *   This file is part of CaSPER (http://proteina.di.fct.unl.pt/casper).   *
*
 *                                                                         *
 *   Copyright:                                                            *
 *   2005-2008 - Marco Correia <marco.v.correia@gmail.com>                 *
 *                                                                         *
 *   Licensed under the Apache License, Version 2.0 (the "License");       * 
 *   you may not use this file except in compliance with the License.      * 
 *   You may obtain a copy of the License at                               * 
 *            http://www.apache.org/licenses/LICENSE-2.0                   * 
 *   Unless required by applicable law or agreed to in writing, software   * 
 *   distributed under the License is distributed on an                    * 
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,          * 
 *   either express or implied.                                            * 
 *   See the License for the specific language governing permissions and   * 
 *   limitations under the License.                                        *
 \*************************************************************************/
// --- RELATIONS (Compile time expressions) ---
/** Equal binary operator.  \ingroup EqualityRelations */ inline Rel2<Equal,Filter,Filter > operator==(const Filter& lh, const Filter& rh) { return Rel2<Equal,Filter,Filter >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<GreaterEqual,Filter,Filter > operator>=(const Filter& lh, const Filter& rh) { return Rel2<GreaterEqual,Filter,Filter >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<LessEqual,Filter,Filter > operator<=(const Filter& lh, const Filter& rh) { return Rel2<LessEqual,Filter,Filter >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ inline Rel2<Distinct,Filter,Filter > operator!=(const Filter& lh, const Filter& rh) { return Rel2<Distinct,Filter,Filter >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ inline Rel2<Greater,Filter,Filter > operator>(const Filter& lh, const Filter& rh) { return Rel2<Greater,Filter,Filter >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ inline Rel2<Less,Filter,Filter > operator<(const Filter& lh, const Filter& rh) { return Rel2<Less,Filter,Filter >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ inline Rel2<Add,Filter,Filter > operator+(const Filter& lh, const Filter& rh) { return Rel2<Add,Filter,Filter >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ inline Rel2<Sub,Filter,Filter > operator-(const Filter& lh, const Filter& rh) { return Rel2<Sub,Filter,Filter >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ inline Rel2<Mul,Filter,Filter > operator*(const Filter& lh, const Filter& rh) { return Rel2<Mul,Filter,Filter >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ inline Rel2<Div,Filter,Filter > operator/(const Filter& lh, const Filter& rh) { return Rel2<Div,Filter,Filter >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ inline Rel2<And,Filter,Filter > operator&&(const Filter& lh, const Filter& rh) { return Rel2<And,Filter,Filter >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ inline Rel2<Or,Filter,Filter > operator||(const Filter& lh, const Filter& rh) { return Rel2<Or,Filter,Filter >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ inline Rel2<Equal,Filter,Bool > operator==(const Filter& lh, const Bool& rh) { return Rel2<Equal,Filter,Bool >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<GreaterEqual,Filter,Bool > operator>=(const Filter& lh, const Bool& rh) { return Rel2<GreaterEqual,Filter,Bool >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<LessEqual,Filter,Bool > operator<=(const Filter& lh, const Bool& rh) { return Rel2<LessEqual,Filter,Bool >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ inline Rel2<Distinct,Filter,Bool > operator!=(const Filter& lh, const Bool& rh) { return Rel2<Distinct,Filter,Bool >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ inline Rel2<Greater,Filter,Bool > operator>(const Filter& lh, const Bool& rh) { return Rel2<Greater,Filter,Bool >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ inline Rel2<Less,Filter,Bool > operator<(const Filter& lh, const Bool& rh) { return Rel2<Less,Filter,Bool >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ inline Rel2<Add,Filter,Bool > operator+(const Filter& lh, const Bool& rh) { return Rel2<Add,Filter,Bool >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ inline Rel2<Sub,Filter,Bool > operator-(const Filter& lh, const Bool& rh) { return Rel2<Sub,Filter,Bool >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ inline Rel2<Mul,Filter,Bool > operator*(const Filter& lh, const Bool& rh) { return Rel2<Mul,Filter,Bool >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ inline Rel2<Div,Filter,Bool > operator/(const Filter& lh, const Bool& rh) { return Rel2<Div,Filter,Bool >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ inline Rel2<And,Filter,Bool > operator&&(const Filter& lh, const Bool& rh) { return Rel2<And,Filter,Bool >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ inline Rel2<Or,Filter,Bool > operator||(const Filter& lh, const Bool& rh) { return Rel2<Or,Filter,Bool >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ inline Rel2<Equal,Bool,Filter > operator==(const Bool& lh, const Filter& rh) { return Rel2<Equal,Bool,Filter >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<GreaterEqual,Bool,Filter > operator>=(const Bool& lh, const Filter& rh) { return Rel2<GreaterEqual,Bool,Filter >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<LessEqual,Bool,Filter > operator<=(const Bool& lh, const Filter& rh) { return Rel2<LessEqual,Bool,Filter >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ inline Rel2<Distinct,Bool,Filter > operator!=(const Bool& lh, const Filter& rh) { return Rel2<Distinct,Bool,Filter >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ inline Rel2<Greater,Bool,Filter > operator>(const Bool& lh, const Filter& rh) { return Rel2<Greater,Bool,Filter >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ inline Rel2<Less,Bool,Filter > operator<(const Bool& lh, const Filter& rh) { return Rel2<Less,Bool,Filter >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ inline Rel2<Add,Bool,Filter > operator+(const Bool& lh, const Filter& rh) { return Rel2<Add,Bool,Filter >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ inline Rel2<Sub,Bool,Filter > operator-(const Bool& lh, const Filter& rh) { return Rel2<Sub,Bool,Filter >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ inline Rel2<Mul,Bool,Filter > operator*(const Bool& lh, const Filter& rh) { return Rel2<Mul,Bool,Filter >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ inline Rel2<Div,Bool,Filter > operator/(const Bool& lh, const Filter& rh) { return Rel2<Div,Bool,Filter >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ inline Rel2<And,Bool,Filter > operator&&(const Bool& lh, const Filter& rh) { return Rel2<And,Bool,Filter >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ inline Rel2<Or,Bool,Filter > operator||(const Bool& lh, const Filter& rh) { return Rel2<Or,Bool,Filter >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T2 > inline Rel2<Equal,Filter,DomVar< Bool,T2 > > operator==(const Filter& lh, const DomVar< Bool,T2 >& rh) { return Rel2<Equal,Filter,DomVar< Bool,T2 > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T2 > inline Rel2<GreaterEqual,Filter,DomVar< Bool,T2 > > operator>=(const Filter& lh, const DomVar< Bool,T2 >& rh) { return Rel2<GreaterEqual,Filter,DomVar< Bool,T2 > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T2 > inline Rel2<LessEqual,Filter,DomVar< Bool,T2 > > operator<=(const Filter& lh, const DomVar< Bool,T2 >& rh) { return Rel2<LessEqual,Filter,DomVar< Bool,T2 > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T2 > inline Rel2<Distinct,Filter,DomVar< Bool,T2 > > operator!=(const Filter& lh, const DomVar< Bool,T2 >& rh) { return Rel2<Distinct,Filter,DomVar< Bool,T2 > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T2 > inline Rel2<Greater,Filter,DomVar< Bool,T2 > > operator>(const Filter& lh, const DomVar< Bool,T2 >& rh) { return Rel2<Greater,Filter,DomVar< Bool,T2 > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class T2 > inline Rel2<Less,Filter,DomVar< Bool,T2 > > operator<(const Filter& lh, const DomVar< Bool,T2 >& rh) { return Rel2<Less,Filter,DomVar< Bool,T2 > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class T2 > inline Rel2<Add,Filter,DomVar< Bool,T2 > > operator+(const Filter& lh, const DomVar< Bool,T2 >& rh) { return Rel2<Add,Filter,DomVar< Bool,T2 > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T2 > inline Rel2<Sub,Filter,DomVar< Bool,T2 > > operator-(const Filter& lh, const DomVar< Bool,T2 >& rh) { return Rel2<Sub,Filter,DomVar< Bool,T2 > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T2 > inline Rel2<Mul,Filter,DomVar< Bool,T2 > > operator*(const Filter& lh, const DomVar< Bool,T2 >& rh) { return Rel2<Mul,Filter,DomVar< Bool,T2 > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class T2 > inline Rel2<Div,Filter,DomVar< Bool,T2 > > operator/(const Filter& lh, const DomVar< Bool,T2 >& rh) { return Rel2<Div,Filter,DomVar< Bool,T2 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T2 > inline Rel2<And,Filter,DomVar< Bool,T2 > > operator&&(const Filter& lh, const DomVar< Bool,T2 >& rh) { return Rel2<And,Filter,DomVar< Bool,T2 > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class T2 > inline Rel2<Or,Filter,DomVar< Bool,T2 > > operator||(const Filter& lh, const DomVar< Bool,T2 >& rh) { return Rel2<Or,Filter,DomVar< Bool,T2 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ inline Rel2<Equal,Filter,MutVar< Bool > > operator==(const Filter& lh, const MutVar< Bool >& rh) { return Rel2<Equal,Filter,MutVar< Bool > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<GreaterEqual,Filter,MutVar< Bool > > operator>=(const Filter& lh, const MutVar< Bool >& rh) { return Rel2<GreaterEqual,Filter,MutVar< Bool > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<LessEqual,Filter,MutVar< Bool > > operator<=(const Filter& lh, const MutVar< Bool >& rh) { return Rel2<LessEqual,Filter,MutVar< Bool > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ inline Rel2<Distinct,Filter,MutVar< Bool > > operator!=(const Filter& lh, const MutVar< Bool >& rh) { return Rel2<Distinct,Filter,MutVar< Bool > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ inline Rel2<Greater,Filter,MutVar< Bool > > operator>(const Filter& lh, const MutVar< Bool >& rh) { return Rel2<Greater,Filter,MutVar< Bool > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ inline Rel2<Less,Filter,MutVar< Bool > > operator<(const Filter& lh, const MutVar< Bool >& rh) { return Rel2<Less,Filter,MutVar< Bool > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ inline Rel2<Add,Filter,MutVar< Bool > > operator+(const Filter& lh, const MutVar< Bool >& rh) { return Rel2<Add,Filter,MutVar< Bool > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ inline Rel2<Sub,Filter,MutVar< Bool > > operator-(const Filter& lh, const MutVar< Bool >& rh) { return Rel2<Sub,Filter,MutVar< Bool > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ inline Rel2<Mul,Filter,MutVar< Bool > > operator*(const Filter& lh, const MutVar< Bool >& rh) { return Rel2<Mul,Filter,MutVar< Bool > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ inline Rel2<Div,Filter,MutVar< Bool > > operator/(const Filter& lh, const MutVar< Bool >& rh) { return Rel2<Div,Filter,MutVar< Bool > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ inline Rel2<And,Filter,MutVar< Bool > > operator&&(const Filter& lh, const MutVar< Bool >& rh) { return Rel2<And,Filter,MutVar< Bool > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ inline Rel2<Or,Filter,MutVar< Bool > > operator||(const Filter& lh, const MutVar< Bool >& rh) { return Rel2<Or,Filter,MutVar< Bool > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ inline Rel2<Equal,Filter,BndExpr< Bool > > operator==(const Filter& lh, const BndExpr< Bool >& rh) { return Rel2<Equal,Filter,BndExpr< Bool > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<GreaterEqual,Filter,BndExpr< Bool > > operator>=(const Filter& lh, const BndExpr< Bool >& rh) { return Rel2<GreaterEqual,Filter,BndExpr< Bool > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<LessEqual,Filter,BndExpr< Bool > > operator<=(const Filter& lh, const BndExpr< Bool >& rh) { return Rel2<LessEqual,Filter,BndExpr< Bool > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ inline Rel2<Distinct,Filter,BndExpr< Bool > > operator!=(const Filter& lh, const BndExpr< Bool >& rh) { return Rel2<Distinct,Filter,BndExpr< Bool > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ inline Rel2<Greater,Filter,BndExpr< Bool > > operator>(const Filter& lh, const BndExpr< Bool >& rh) { return Rel2<Greater,Filter,BndExpr< Bool > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ inline Rel2<Less,Filter,BndExpr< Bool > > operator<(const Filter& lh, const BndExpr< Bool >& rh) { return Rel2<Less,Filter,BndExpr< Bool > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ inline Rel2<Add,Filter,BndExpr< Bool > > operator+(const Filter& lh, const BndExpr< Bool >& rh) { return Rel2<Add,Filter,BndExpr< Bool > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ inline Rel2<Sub,Filter,BndExpr< Bool > > operator-(const Filter& lh, const BndExpr< Bool >& rh) { return Rel2<Sub,Filter,BndExpr< Bool > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ inline Rel2<Mul,Filter,BndExpr< Bool > > operator*(const Filter& lh, const BndExpr< Bool >& rh) { return Rel2<Mul,Filter,BndExpr< Bool > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ inline Rel2<Div,Filter,BndExpr< Bool > > operator/(const Filter& lh, const BndExpr< Bool >& rh) { return Rel2<Div,Filter,BndExpr< Bool > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ inline Rel2<And,Filter,BndExpr< Bool > > operator&&(const Filter& lh, const BndExpr< Bool >& rh) { return Rel2<And,Filter,BndExpr< Bool > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ inline Rel2<Or,Filter,BndExpr< Bool > > operator||(const Filter& lh, const BndExpr< Bool >& rh) { return Rel2<Or,Filter,BndExpr< Bool > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ inline Rel2<Equal,Filter,ValExpr< Bool > > operator==(const Filter& lh, const ValExpr< Bool >& rh) { return Rel2<Equal,Filter,ValExpr< Bool > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<GreaterEqual,Filter,ValExpr< Bool > > operator>=(const Filter& lh, const ValExpr< Bool >& rh) { return Rel2<GreaterEqual,Filter,ValExpr< Bool > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<LessEqual,Filter,ValExpr< Bool > > operator<=(const Filter& lh, const ValExpr< Bool >& rh) { return Rel2<LessEqual,Filter,ValExpr< Bool > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ inline Rel2<Distinct,Filter,ValExpr< Bool > > operator!=(const Filter& lh, const ValExpr< Bool >& rh) { return Rel2<Distinct,Filter,ValExpr< Bool > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ inline Rel2<Greater,Filter,ValExpr< Bool > > operator>(const Filter& lh, const ValExpr< Bool >& rh) { return Rel2<Greater,Filter,ValExpr< Bool > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ inline Rel2<Less,Filter,ValExpr< Bool > > operator<(const Filter& lh, const ValExpr< Bool >& rh) { return Rel2<Less,Filter,ValExpr< Bool > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ inline Rel2<Add,Filter,ValExpr< Bool > > operator+(const Filter& lh, const ValExpr< Bool >& rh) { return Rel2<Add,Filter,ValExpr< Bool > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ inline Rel2<Sub,Filter,ValExpr< Bool > > operator-(const Filter& lh, const ValExpr< Bool >& rh) { return Rel2<Sub,Filter,ValExpr< Bool > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ inline Rel2<Mul,Filter,ValExpr< Bool > > operator*(const Filter& lh, const ValExpr< Bool >& rh) { return Rel2<Mul,Filter,ValExpr< Bool > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ inline Rel2<Div,Filter,ValExpr< Bool > > operator/(const Filter& lh, const ValExpr< Bool >& rh) { return Rel2<Div,Filter,ValExpr< Bool > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ inline Rel2<And,Filter,ValExpr< Bool > > operator&&(const Filter& lh, const ValExpr< Bool >& rh) { return Rel2<And,Filter,ValExpr< Bool > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ inline Rel2<Or,Filter,ValExpr< Bool > > operator||(const Filter& lh, const ValExpr< Bool >& rh) { return Rel2<Or,Filter,ValExpr< Bool > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T2 > inline Rel2<Equal,Filter,DomExpr< Bool,T2> > operator==(const Filter& lh, const DomExpr< Bool,T2>& rh) { return Rel2<Equal,Filter,DomExpr< Bool,T2> >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T2 > inline Rel2<GreaterEqual,Filter,DomExpr< Bool,T2> > operator>=(const Filter& lh, const DomExpr< Bool,T2>& rh) { return Rel2<GreaterEqual,Filter,DomExpr< Bool,T2> >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T2 > inline Rel2<LessEqual,Filter,DomExpr< Bool,T2> > operator<=(const Filter& lh, const DomExpr< Bool,T2>& rh) { return Rel2<LessEqual,Filter,DomExpr< Bool,T2> >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T2 > inline Rel2<Distinct,Filter,DomExpr< Bool,T2> > operator!=(const Filter& lh, const DomExpr< Bool,T2>& rh) { return Rel2<Distinct,Filter,DomExpr< Bool,T2> >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T2 > inline Rel2<Greater,Filter,DomExpr< Bool,T2> > operator>(const Filter& lh, const DomExpr< Bool,T2>& rh) { return Rel2<Greater,Filter,DomExpr< Bool,T2> >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class T2 > inline Rel2<Less,Filter,DomExpr< Bool,T2> > operator<(const Filter& lh, const DomExpr< Bool,T2>& rh) { return Rel2<Less,Filter,DomExpr< Bool,T2> >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class T2 > inline Rel2<Add,Filter,DomExpr< Bool,T2> > operator+(const Filter& lh, const DomExpr< Bool,T2>& rh) { return Rel2<Add,Filter,DomExpr< Bool,T2> >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T2 > inline Rel2<Sub,Filter,DomExpr< Bool,T2> > operator-(const Filter& lh, const DomExpr< Bool,T2>& rh) { return Rel2<Sub,Filter,DomExpr< Bool,T2> >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T2 > inline Rel2<Mul,Filter,DomExpr< Bool,T2> > operator*(const Filter& lh, const DomExpr< Bool,T2>& rh) { return Rel2<Mul,Filter,DomExpr< Bool,T2> >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class T2 > inline Rel2<Div,Filter,DomExpr< Bool,T2> > operator/(const Filter& lh, const DomExpr< Bool,T2>& rh) { return Rel2<Div,Filter,DomExpr< Bool,T2> >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T2 > inline Rel2<And,Filter,DomExpr< Bool,T2> > operator&&(const Filter& lh, const DomExpr< Bool,T2>& rh) { return Rel2<And,Filter,DomExpr< Bool,T2> >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class T2 > inline Rel2<Or,Filter,DomExpr< Bool,T2> > operator||(const Filter& lh, const DomExpr< Bool,T2>& rh) { return Rel2<Or,Filter,DomExpr< Bool,T2> >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ inline Rel2<Equal,Filter,MutExpr< Bool > > operator==(const Filter& lh, const MutExpr< Bool >& rh) { return Rel2<Equal,Filter,MutExpr< Bool > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<GreaterEqual,Filter,MutExpr< Bool > > operator>=(const Filter& lh, const MutExpr< Bool >& rh) { return Rel2<GreaterEqual,Filter,MutExpr< Bool > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<LessEqual,Filter,MutExpr< Bool > > operator<=(const Filter& lh, const MutExpr< Bool >& rh) { return Rel2<LessEqual,Filter,MutExpr< Bool > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ inline Rel2<Distinct,Filter,MutExpr< Bool > > operator!=(const Filter& lh, const MutExpr< Bool >& rh) { return Rel2<Distinct,Filter,MutExpr< Bool > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ inline Rel2<Greater,Filter,MutExpr< Bool > > operator>(const Filter& lh, const MutExpr< Bool >& rh) { return Rel2<Greater,Filter,MutExpr< Bool > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ inline Rel2<Less,Filter,MutExpr< Bool > > operator<(const Filter& lh, const MutExpr< Bool >& rh) { return Rel2<Less,Filter,MutExpr< Bool > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ inline Rel2<Add,Filter,MutExpr< Bool > > operator+(const Filter& lh, const MutExpr< Bool >& rh) { return Rel2<Add,Filter,MutExpr< Bool > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ inline Rel2<Sub,Filter,MutExpr< Bool > > operator-(const Filter& lh, const MutExpr< Bool >& rh) { return Rel2<Sub,Filter,MutExpr< Bool > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ inline Rel2<Mul,Filter,MutExpr< Bool > > operator*(const Filter& lh, const MutExpr< Bool >& rh) { return Rel2<Mul,Filter,MutExpr< Bool > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ inline Rel2<Div,Filter,MutExpr< Bool > > operator/(const Filter& lh, const MutExpr< Bool >& rh) { return Rel2<Div,Filter,MutExpr< Bool > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ inline Rel2<And,Filter,MutExpr< Bool > > operator&&(const Filter& lh, const MutExpr< Bool >& rh) { return Rel2<And,Filter,MutExpr< Bool > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ inline Rel2<Or,Filter,MutExpr< Bool > > operator||(const Filter& lh, const MutExpr< Bool >& rh) { return Rel2<Or,Filter,MutExpr< Bool > >(lh,rh); }
