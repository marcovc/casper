/************************************************************************** *   This file is part of CaSPER (http://proteina.di.fct.unl.pt/casper).   *
*
 *                                                                         *
 *   Copyright:                                                            *
 *   2005-2008 - Marco Correia <marco.v.correia@gmail.com>                 *
 *                                                                         *
 *   Licensed under the Apache License, Version 2.0 (the "License");       * 
 *   you may not use this file except in compliance with the License.      * 
 *   You may obtain a copy of the License at                               * 
 *            http://www.apache.org/licenses/LICENSE-2.0                   * 
 *   Unless required by applicable law or agreed to in writing, software   * 
 *   distributed under the License is distributed on an                    * 
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,          * 
 *   either express or implied.                                            * 
 *   See the License for the specific language governing permissions and   * 
 *   limitations under the License.                                        *
 \*************************************************************************/
/************************************************************************** *   This file is part of CaSPER (http://proteina.di.fct.unl.pt/casper).   *
*
 *                                                                         *
 *   Copyright:                                                            *
 *   2005-2008 - Marco Correia <marco.v.correia@gmail.com>                 *
 *                                                                         *
 *   Licensed under the Apache License, Version 2.0 (the "License");       * 
 *   you may not use this file except in compliance with the License.      * 
 *   You may obtain a copy of the License at                               * 
 *            http://www.apache.org/licenses/LICENSE-2.0                   * 
 *   Unless required by applicable law or agreed to in writing, software   * 
 *   distributed under the License is distributed on an                    * 
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,          * 
 *   either express or implied.                                            * 
 *   See the License for the specific language governing permissions and   * 
 *   limitations under the License.                                        *
 \*************************************************************************/
// --- RELATIONS (Compile time expressions) ---
/** Symmetric unary operator.  \ingroup ArithRelations */ template< class Op > inline Rel1<Sym,Rel0< Op > > operator-(const Rel0< Op >& rh) { return Rel1<Sym,Rel0< Op > >(rh);} /** Negation unary operator.  \ingroup LogicalRelations */ template< class Op > inline Rel1<Not,Rel0< Op > > operator!(const Rel0< Op >& rh) { return Rel1<Not,Rel0< Op > >(rh);} /** Absolute value unary operator.  \ingroup ArithRelations */ template< class Op > inline Rel1<Abs,Rel0< Op > > abs(const Rel0< Op >& rh) { return Rel1<Abs,Rel0< Op > >(rh);} /** Min value (from a sequence) unary operator.  \ingroup ArithRelations */ template< class Op > inline Rel1<Min,Rel0< Op > > min(const Rel0< Op >& rh) { return Rel1<Min,Rel0< Op > >(rh);} /** Max value (from a sequence) unary operator. \ingroup ArithRelations */ template< class Op > inline Rel1<Max,Rel0< Op > > max(const Rel0< Op >& rh) { return Rel1<Max,Rel0< Op > >(rh);}
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T > inline Rel2<Equal,Rel0< Op >,T > operator==(const Rel0< Op >& lh, const T& rh) { return Rel2<Equal,Rel0< Op >,T >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T > inline Rel2<GreaterEqual,Rel0< Op >,T > operator>=(const Rel0< Op >& lh, const T& rh) { return Rel2<GreaterEqual,Rel0< Op >,T >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T > inline Rel2<LessEqual,Rel0< Op >,T > operator<=(const Rel0< Op >& lh, const T& rh) { return Rel2<LessEqual,Rel0< Op >,T >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T > inline Rel2<Distinct,Rel0< Op >,T > operator!=(const Rel0< Op >& lh, const T& rh) { return Rel2<Distinct,Rel0< Op >,T >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T > inline Rel2<Greater,Rel0< Op >,T > operator>(const Rel0< Op >& lh, const T& rh) { return Rel2<Greater,Rel0< Op >,T >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T > inline Rel2<Less,Rel0< Op >,T > operator<(const Rel0< Op >& lh, const T& rh) { return Rel2<Less,Rel0< Op >,T >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T > inline Rel2<Add,Rel0< Op >,T > operator+(const Rel0< Op >& lh, const T& rh) { return Rel2<Add,Rel0< Op >,T >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T > inline Rel2<Sub,Rel0< Op >,T > operator-(const Rel0< Op >& lh, const T& rh) { return Rel2<Sub,Rel0< Op >,T >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T > inline Rel2<Mul,Rel0< Op >,T > operator*(const Rel0< Op >& lh, const T& rh) { return Rel2<Mul,Rel0< Op >,T >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T > inline Rel2<Div,Rel0< Op >,T > operator/(const Rel0< Op >& lh, const T& rh) { return Rel2<Div,Rel0< Op >,T >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op, class T > inline Rel2<And,Rel0< Op >,T > operator&&(const Rel0< Op >& lh, const T& rh) { return Rel2<And,Rel0< Op >,T >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op, class T > inline Rel2<Or,Rel0< Op >,T > operator||(const Rel0< Op >& lh, const T& rh) { return Rel2<Or,Rel0< Op >,T >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op > inline Rel2<Equal,Int,Rel0< Op > > operator==(const Int& lh, const Rel0< Op >& rh) { return Rel2<Equal,Int,Rel0< Op > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op > inline Rel2<GreaterEqual,Int,Rel0< Op > > operator>=(const Int& lh, const Rel0< Op >& rh) { return Rel2<GreaterEqual,Int,Rel0< Op > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op > inline Rel2<LessEqual,Int,Rel0< Op > > operator<=(const Int& lh, const Rel0< Op >& rh) { return Rel2<LessEqual,Int,Rel0< Op > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op > inline Rel2<Distinct,Int,Rel0< Op > > operator!=(const Int& lh, const Rel0< Op >& rh) { return Rel2<Distinct,Int,Rel0< Op > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op > inline Rel2<Greater,Int,Rel0< Op > > operator>(const Int& lh, const Rel0< Op >& rh) { return Rel2<Greater,Int,Rel0< Op > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op > inline Rel2<Less,Int,Rel0< Op > > operator<(const Int& lh, const Rel0< Op >& rh) { return Rel2<Less,Int,Rel0< Op > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class Op > inline Rel2<Add,Int,Rel0< Op > > operator+(const Int& lh, const Rel0< Op >& rh) { return Rel2<Add,Int,Rel0< Op > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op > inline Rel2<Sub,Int,Rel0< Op > > operator-(const Int& lh, const Rel0< Op >& rh) { return Rel2<Sub,Int,Rel0< Op > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op > inline Rel2<Mul,Int,Rel0< Op > > operator*(const Int& lh, const Rel0< Op >& rh) { return Rel2<Mul,Int,Rel0< Op > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class Op > inline Rel2<Div,Int,Rel0< Op > > operator/(const Int& lh, const Rel0< Op >& rh) { return Rel2<Div,Int,Rel0< Op > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op > inline Rel2<And,Int,Rel0< Op > > operator&&(const Int& lh, const Rel0< Op >& rh) { return Rel2<And,Int,Rel0< Op > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op > inline Rel2<Or,Int,Rel0< Op > > operator||(const Int& lh, const Rel0< Op >& rh) { return Rel2<Or,Int,Rel0< Op > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op > inline Rel2<Equal,Bool,Rel0< Op > > operator==(const Bool& lh, const Rel0< Op >& rh) { return Rel2<Equal,Bool,Rel0< Op > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op > inline Rel2<GreaterEqual,Bool,Rel0< Op > > operator>=(const Bool& lh, const Rel0< Op >& rh) { return Rel2<GreaterEqual,Bool,Rel0< Op > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op > inline Rel2<LessEqual,Bool,Rel0< Op > > operator<=(const Bool& lh, const Rel0< Op >& rh) { return Rel2<LessEqual,Bool,Rel0< Op > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op > inline Rel2<Distinct,Bool,Rel0< Op > > operator!=(const Bool& lh, const Rel0< Op >& rh) { return Rel2<Distinct,Bool,Rel0< Op > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op > inline Rel2<Greater,Bool,Rel0< Op > > operator>(const Bool& lh, const Rel0< Op >& rh) { return Rel2<Greater,Bool,Rel0< Op > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op > inline Rel2<Less,Bool,Rel0< Op > > operator<(const Bool& lh, const Rel0< Op >& rh) { return Rel2<Less,Bool,Rel0< Op > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class Op > inline Rel2<Add,Bool,Rel0< Op > > operator+(const Bool& lh, const Rel0< Op >& rh) { return Rel2<Add,Bool,Rel0< Op > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op > inline Rel2<Sub,Bool,Rel0< Op > > operator-(const Bool& lh, const Rel0< Op >& rh) { return Rel2<Sub,Bool,Rel0< Op > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op > inline Rel2<Mul,Bool,Rel0< Op > > operator*(const Bool& lh, const Rel0< Op >& rh) { return Rel2<Mul,Bool,Rel0< Op > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class Op > inline Rel2<Div,Bool,Rel0< Op > > operator/(const Bool& lh, const Rel0< Op >& rh) { return Rel2<Div,Bool,Rel0< Op > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op > inline Rel2<And,Bool,Rel0< Op > > operator&&(const Bool& lh, const Rel0< Op >& rh) { return Rel2<And,Bool,Rel0< Op > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op > inline Rel2<Or,Bool,Rel0< Op > > operator||(const Bool& lh, const Rel0< Op >& rh) { return Rel2<Or,Bool,Rel0< Op > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op > inline Rel2<Equal,Double,Rel0< Op > > operator==(const Double& lh, const Rel0< Op >& rh) { return Rel2<Equal,Double,Rel0< Op > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op > inline Rel2<GreaterEqual,Double,Rel0< Op > > operator>=(const Double& lh, const Rel0< Op >& rh) { return Rel2<GreaterEqual,Double,Rel0< Op > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op > inline Rel2<LessEqual,Double,Rel0< Op > > operator<=(const Double& lh, const Rel0< Op >& rh) { return Rel2<LessEqual,Double,Rel0< Op > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op > inline Rel2<Distinct,Double,Rel0< Op > > operator!=(const Double& lh, const Rel0< Op >& rh) { return Rel2<Distinct,Double,Rel0< Op > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op > inline Rel2<Greater,Double,Rel0< Op > > operator>(const Double& lh, const Rel0< Op >& rh) { return Rel2<Greater,Double,Rel0< Op > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op > inline Rel2<Less,Double,Rel0< Op > > operator<(const Double& lh, const Rel0< Op >& rh) { return Rel2<Less,Double,Rel0< Op > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class Op > inline Rel2<Add,Double,Rel0< Op > > operator+(const Double& lh, const Rel0< Op >& rh) { return Rel2<Add,Double,Rel0< Op > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op > inline Rel2<Sub,Double,Rel0< Op > > operator-(const Double& lh, const Rel0< Op >& rh) { return Rel2<Sub,Double,Rel0< Op > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op > inline Rel2<Mul,Double,Rel0< Op > > operator*(const Double& lh, const Rel0< Op >& rh) { return Rel2<Mul,Double,Rel0< Op > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class Op > inline Rel2<Div,Double,Rel0< Op > > operator/(const Double& lh, const Rel0< Op >& rh) { return Rel2<Div,Double,Rel0< Op > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op > inline Rel2<And,Double,Rel0< Op > > operator&&(const Double& lh, const Rel0< Op >& rh) { return Rel2<And,Double,Rel0< Op > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op > inline Rel2<Or,Double,Rel0< Op > > operator||(const Double& lh, const Rel0< Op >& rh) { return Rel2<Or,Double,Rel0< Op > >(lh,rh); }
/** Symmetric unary operator.  \ingroup ArithRelations */ template< class Op, class T1 > inline Rel1<Sym,Rel1< Op,T1 > > operator-(const Rel1< Op,T1 >& rh) { return Rel1<Sym,Rel1< Op,T1 > >(rh);} /** Negation unary operator.  \ingroup LogicalRelations */ template< class Op, class T1 > inline Rel1<Not,Rel1< Op,T1 > > operator!(const Rel1< Op,T1 >& rh) { return Rel1<Not,Rel1< Op,T1 > >(rh);} /** Absolute value unary operator.  \ingroup ArithRelations */ template< class Op, class T1 > inline Rel1<Abs,Rel1< Op,T1 > > abs(const Rel1< Op,T1 >& rh) { return Rel1<Abs,Rel1< Op,T1 > >(rh);} /** Min value (from a sequence) unary operator.  \ingroup ArithRelations */ template< class Op, class T1 > inline Rel1<Min,Rel1< Op,T1 > > min(const Rel1< Op,T1 >& rh) { return Rel1<Min,Rel1< Op,T1 > >(rh);} /** Max value (from a sequence) unary operator. \ingroup ArithRelations */ template< class Op, class T1 > inline Rel1<Max,Rel1< Op,T1 > > max(const Rel1< Op,T1 >& rh) { return Rel1<Max,Rel1< Op,T1 > >(rh);}
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T > inline Rel2<Equal,Rel1< Op,T1 >,T > operator==(const Rel1< Op,T1 >& lh, const T& rh) { return Rel2<Equal,Rel1< Op,T1 >,T >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T > inline Rel2<GreaterEqual,Rel1< Op,T1 >,T > operator>=(const Rel1< Op,T1 >& lh, const T& rh) { return Rel2<GreaterEqual,Rel1< Op,T1 >,T >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T > inline Rel2<LessEqual,Rel1< Op,T1 >,T > operator<=(const Rel1< Op,T1 >& lh, const T& rh) { return Rel2<LessEqual,Rel1< Op,T1 >,T >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T > inline Rel2<Distinct,Rel1< Op,T1 >,T > operator!=(const Rel1< Op,T1 >& lh, const T& rh) { return Rel2<Distinct,Rel1< Op,T1 >,T >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T > inline Rel2<Greater,Rel1< Op,T1 >,T > operator>(const Rel1< Op,T1 >& lh, const T& rh) { return Rel2<Greater,Rel1< Op,T1 >,T >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T > inline Rel2<Less,Rel1< Op,T1 >,T > operator<(const Rel1< Op,T1 >& lh, const T& rh) { return Rel2<Less,Rel1< Op,T1 >,T >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T > inline Rel2<Add,Rel1< Op,T1 >,T > operator+(const Rel1< Op,T1 >& lh, const T& rh) { return Rel2<Add,Rel1< Op,T1 >,T >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T > inline Rel2<Sub,Rel1< Op,T1 >,T > operator-(const Rel1< Op,T1 >& lh, const T& rh) { return Rel2<Sub,Rel1< Op,T1 >,T >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T > inline Rel2<Mul,Rel1< Op,T1 >,T > operator*(const Rel1< Op,T1 >& lh, const T& rh) { return Rel2<Mul,Rel1< Op,T1 >,T >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T > inline Rel2<Div,Rel1< Op,T1 >,T > operator/(const Rel1< Op,T1 >& lh, const T& rh) { return Rel2<Div,Rel1< Op,T1 >,T >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op, class T1, class T > inline Rel2<And,Rel1< Op,T1 >,T > operator&&(const Rel1< Op,T1 >& lh, const T& rh) { return Rel2<And,Rel1< Op,T1 >,T >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op, class T1, class T > inline Rel2<Or,Rel1< Op,T1 >,T > operator||(const Rel1< Op,T1 >& lh, const T& rh) { return Rel2<Or,Rel1< Op,T1 >,T >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1 > inline Rel2<Equal,Int,Rel1< Op,T1 > > operator==(const Int& lh, const Rel1< Op,T1 >& rh) { return Rel2<Equal,Int,Rel1< Op,T1 > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1 > inline Rel2<GreaterEqual,Int,Rel1< Op,T1 > > operator>=(const Int& lh, const Rel1< Op,T1 >& rh) { return Rel2<GreaterEqual,Int,Rel1< Op,T1 > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1 > inline Rel2<LessEqual,Int,Rel1< Op,T1 > > operator<=(const Int& lh, const Rel1< Op,T1 >& rh) { return Rel2<LessEqual,Int,Rel1< Op,T1 > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1 > inline Rel2<Distinct,Int,Rel1< Op,T1 > > operator!=(const Int& lh, const Rel1< Op,T1 >& rh) { return Rel2<Distinct,Int,Rel1< Op,T1 > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1 > inline Rel2<Greater,Int,Rel1< Op,T1 > > operator>(const Int& lh, const Rel1< Op,T1 >& rh) { return Rel2<Greater,Int,Rel1< Op,T1 > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1 > inline Rel2<Less,Int,Rel1< Op,T1 > > operator<(const Int& lh, const Rel1< Op,T1 >& rh) { return Rel2<Less,Int,Rel1< Op,T1 > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1 > inline Rel2<Add,Int,Rel1< Op,T1 > > operator+(const Int& lh, const Rel1< Op,T1 >& rh) { return Rel2<Add,Int,Rel1< Op,T1 > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1 > inline Rel2<Sub,Int,Rel1< Op,T1 > > operator-(const Int& lh, const Rel1< Op,T1 >& rh) { return Rel2<Sub,Int,Rel1< Op,T1 > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1 > inline Rel2<Mul,Int,Rel1< Op,T1 > > operator*(const Int& lh, const Rel1< Op,T1 >& rh) { return Rel2<Mul,Int,Rel1< Op,T1 > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1 > inline Rel2<Div,Int,Rel1< Op,T1 > > operator/(const Int& lh, const Rel1< Op,T1 >& rh) { return Rel2<Div,Int,Rel1< Op,T1 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op, class T1 > inline Rel2<And,Int,Rel1< Op,T1 > > operator&&(const Int& lh, const Rel1< Op,T1 >& rh) { return Rel2<And,Int,Rel1< Op,T1 > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op, class T1 > inline Rel2<Or,Int,Rel1< Op,T1 > > operator||(const Int& lh, const Rel1< Op,T1 >& rh) { return Rel2<Or,Int,Rel1< Op,T1 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1 > inline Rel2<Equal,Bool,Rel1< Op,T1 > > operator==(const Bool& lh, const Rel1< Op,T1 >& rh) { return Rel2<Equal,Bool,Rel1< Op,T1 > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1 > inline Rel2<GreaterEqual,Bool,Rel1< Op,T1 > > operator>=(const Bool& lh, const Rel1< Op,T1 >& rh) { return Rel2<GreaterEqual,Bool,Rel1< Op,T1 > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1 > inline Rel2<LessEqual,Bool,Rel1< Op,T1 > > operator<=(const Bool& lh, const Rel1< Op,T1 >& rh) { return Rel2<LessEqual,Bool,Rel1< Op,T1 > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1 > inline Rel2<Distinct,Bool,Rel1< Op,T1 > > operator!=(const Bool& lh, const Rel1< Op,T1 >& rh) { return Rel2<Distinct,Bool,Rel1< Op,T1 > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1 > inline Rel2<Greater,Bool,Rel1< Op,T1 > > operator>(const Bool& lh, const Rel1< Op,T1 >& rh) { return Rel2<Greater,Bool,Rel1< Op,T1 > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1 > inline Rel2<Less,Bool,Rel1< Op,T1 > > operator<(const Bool& lh, const Rel1< Op,T1 >& rh) { return Rel2<Less,Bool,Rel1< Op,T1 > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1 > inline Rel2<Add,Bool,Rel1< Op,T1 > > operator+(const Bool& lh, const Rel1< Op,T1 >& rh) { return Rel2<Add,Bool,Rel1< Op,T1 > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1 > inline Rel2<Sub,Bool,Rel1< Op,T1 > > operator-(const Bool& lh, const Rel1< Op,T1 >& rh) { return Rel2<Sub,Bool,Rel1< Op,T1 > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1 > inline Rel2<Mul,Bool,Rel1< Op,T1 > > operator*(const Bool& lh, const Rel1< Op,T1 >& rh) { return Rel2<Mul,Bool,Rel1< Op,T1 > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1 > inline Rel2<Div,Bool,Rel1< Op,T1 > > operator/(const Bool& lh, const Rel1< Op,T1 >& rh) { return Rel2<Div,Bool,Rel1< Op,T1 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op, class T1 > inline Rel2<And,Bool,Rel1< Op,T1 > > operator&&(const Bool& lh, const Rel1< Op,T1 >& rh) { return Rel2<And,Bool,Rel1< Op,T1 > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op, class T1 > inline Rel2<Or,Bool,Rel1< Op,T1 > > operator||(const Bool& lh, const Rel1< Op,T1 >& rh) { return Rel2<Or,Bool,Rel1< Op,T1 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1 > inline Rel2<Equal,Double,Rel1< Op,T1 > > operator==(const Double& lh, const Rel1< Op,T1 >& rh) { return Rel2<Equal,Double,Rel1< Op,T1 > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1 > inline Rel2<GreaterEqual,Double,Rel1< Op,T1 > > operator>=(const Double& lh, const Rel1< Op,T1 >& rh) { return Rel2<GreaterEqual,Double,Rel1< Op,T1 > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1 > inline Rel2<LessEqual,Double,Rel1< Op,T1 > > operator<=(const Double& lh, const Rel1< Op,T1 >& rh) { return Rel2<LessEqual,Double,Rel1< Op,T1 > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1 > inline Rel2<Distinct,Double,Rel1< Op,T1 > > operator!=(const Double& lh, const Rel1< Op,T1 >& rh) { return Rel2<Distinct,Double,Rel1< Op,T1 > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1 > inline Rel2<Greater,Double,Rel1< Op,T1 > > operator>(const Double& lh, const Rel1< Op,T1 >& rh) { return Rel2<Greater,Double,Rel1< Op,T1 > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1 > inline Rel2<Less,Double,Rel1< Op,T1 > > operator<(const Double& lh, const Rel1< Op,T1 >& rh) { return Rel2<Less,Double,Rel1< Op,T1 > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1 > inline Rel2<Add,Double,Rel1< Op,T1 > > operator+(const Double& lh, const Rel1< Op,T1 >& rh) { return Rel2<Add,Double,Rel1< Op,T1 > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1 > inline Rel2<Sub,Double,Rel1< Op,T1 > > operator-(const Double& lh, const Rel1< Op,T1 >& rh) { return Rel2<Sub,Double,Rel1< Op,T1 > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1 > inline Rel2<Mul,Double,Rel1< Op,T1 > > operator*(const Double& lh, const Rel1< Op,T1 >& rh) { return Rel2<Mul,Double,Rel1< Op,T1 > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1 > inline Rel2<Div,Double,Rel1< Op,T1 > > operator/(const Double& lh, const Rel1< Op,T1 >& rh) { return Rel2<Div,Double,Rel1< Op,T1 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op, class T1 > inline Rel2<And,Double,Rel1< Op,T1 > > operator&&(const Double& lh, const Rel1< Op,T1 >& rh) { return Rel2<And,Double,Rel1< Op,T1 > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op, class T1 > inline Rel2<Or,Double,Rel1< Op,T1 > > operator||(const Double& lh, const Rel1< Op,T1 >& rh) { return Rel2<Or,Double,Rel1< Op,T1 > >(lh,rh); }
/** Symmetric unary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel1<Sym,Rel2< Op,T1,T2 > > operator-(const Rel2< Op,T1,T2 >& rh) { return Rel1<Sym,Rel2< Op,T1,T2 > >(rh);} /** Negation unary operator.  \ingroup LogicalRelations */ template< class Op, class T1, class T2 > inline Rel1<Not,Rel2< Op,T1,T2 > > operator!(const Rel2< Op,T1,T2 >& rh) { return Rel1<Not,Rel2< Op,T1,T2 > >(rh);} /** Absolute value unary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel1<Abs,Rel2< Op,T1,T2 > > abs(const Rel2< Op,T1,T2 >& rh) { return Rel1<Abs,Rel2< Op,T1,T2 > >(rh);} /** Min value (from a sequence) unary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel1<Min,Rel2< Op,T1,T2 > > min(const Rel2< Op,T1,T2 >& rh) { return Rel1<Min,Rel2< Op,T1,T2 > >(rh);} /** Max value (from a sequence) unary operator. \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel1<Max,Rel2< Op,T1,T2 > > max(const Rel2< Op,T1,T2 >& rh) { return Rel1<Max,Rel2< Op,T1,T2 > >(rh);}
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T2, class T > inline Rel2<Equal,Rel2< Op,T1,T2 >,T > operator==(const Rel2< Op,T1,T2 >& lh, const T& rh) { return Rel2<Equal,Rel2< Op,T1,T2 >,T >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T > inline Rel2<GreaterEqual,Rel2< Op,T1,T2 >,T > operator>=(const Rel2< Op,T1,T2 >& lh, const T& rh) { return Rel2<GreaterEqual,Rel2< Op,T1,T2 >,T >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T > inline Rel2<LessEqual,Rel2< Op,T1,T2 >,T > operator<=(const Rel2< Op,T1,T2 >& lh, const T& rh) { return Rel2<LessEqual,Rel2< Op,T1,T2 >,T >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T2, class T > inline Rel2<Distinct,Rel2< Op,T1,T2 >,T > operator!=(const Rel2< Op,T1,T2 >& lh, const T& rh) { return Rel2<Distinct,Rel2< Op,T1,T2 >,T >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T > inline Rel2<Greater,Rel2< Op,T1,T2 >,T > operator>(const Rel2< Op,T1,T2 >& lh, const T& rh) { return Rel2<Greater,Rel2< Op,T1,T2 >,T >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T > inline Rel2<Less,Rel2< Op,T1,T2 >,T > operator<(const Rel2< Op,T1,T2 >& lh, const T& rh) { return Rel2<Less,Rel2< Op,T1,T2 >,T >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T > inline Rel2<Add,Rel2< Op,T1,T2 >,T > operator+(const Rel2< Op,T1,T2 >& lh, const T& rh) { return Rel2<Add,Rel2< Op,T1,T2 >,T >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T > inline Rel2<Sub,Rel2< Op,T1,T2 >,T > operator-(const Rel2< Op,T1,T2 >& lh, const T& rh) { return Rel2<Sub,Rel2< Op,T1,T2 >,T >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T > inline Rel2<Mul,Rel2< Op,T1,T2 >,T > operator*(const Rel2< Op,T1,T2 >& lh, const T& rh) { return Rel2<Mul,Rel2< Op,T1,T2 >,T >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T > inline Rel2<Div,Rel2< Op,T1,T2 >,T > operator/(const Rel2< Op,T1,T2 >& lh, const T& rh) { return Rel2<Div,Rel2< Op,T1,T2 >,T >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T > inline Rel2<And,Rel2< Op,T1,T2 >,T > operator&&(const Rel2< Op,T1,T2 >& lh, const T& rh) { return Rel2<And,Rel2< Op,T1,T2 >,T >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T > inline Rel2<Or,Rel2< Op,T1,T2 >,T > operator||(const Rel2< Op,T1,T2 >& lh, const T& rh) { return Rel2<Or,Rel2< Op,T1,T2 >,T >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T2 > inline Rel2<Equal,Int,Rel2< Op,T1,T2 > > operator==(const Int& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<Equal,Int,Rel2< Op,T1,T2 > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<GreaterEqual,Int,Rel2< Op,T1,T2 > > operator>=(const Int& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<GreaterEqual,Int,Rel2< Op,T1,T2 > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<LessEqual,Int,Rel2< Op,T1,T2 > > operator<=(const Int& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<LessEqual,Int,Rel2< Op,T1,T2 > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<Distinct,Int,Rel2< Op,T1,T2 > > operator!=(const Int& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<Distinct,Int,Rel2< Op,T1,T2 > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<Greater,Int,Rel2< Op,T1,T2 > > operator>(const Int& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<Greater,Int,Rel2< Op,T1,T2 > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<Less,Int,Rel2< Op,T1,T2 > > operator<(const Int& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<Less,Int,Rel2< Op,T1,T2 > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel2<Add,Int,Rel2< Op,T1,T2 > > operator+(const Int& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<Add,Int,Rel2< Op,T1,T2 > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel2<Sub,Int,Rel2< Op,T1,T2 > > operator-(const Int& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<Sub,Int,Rel2< Op,T1,T2 > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel2<Mul,Int,Rel2< Op,T1,T2 > > operator*(const Int& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<Mul,Int,Rel2< Op,T1,T2 > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel2<Div,Int,Rel2< Op,T1,T2 > > operator/(const Int& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<Div,Int,Rel2< Op,T1,T2 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op, class T1, class T2 > inline Rel2<And,Int,Rel2< Op,T1,T2 > > operator&&(const Int& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<And,Int,Rel2< Op,T1,T2 > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op, class T1, class T2 > inline Rel2<Or,Int,Rel2< Op,T1,T2 > > operator||(const Int& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<Or,Int,Rel2< Op,T1,T2 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T2 > inline Rel2<Equal,Bool,Rel2< Op,T1,T2 > > operator==(const Bool& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<Equal,Bool,Rel2< Op,T1,T2 > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<GreaterEqual,Bool,Rel2< Op,T1,T2 > > operator>=(const Bool& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<GreaterEqual,Bool,Rel2< Op,T1,T2 > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<LessEqual,Bool,Rel2< Op,T1,T2 > > operator<=(const Bool& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<LessEqual,Bool,Rel2< Op,T1,T2 > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<Distinct,Bool,Rel2< Op,T1,T2 > > operator!=(const Bool& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<Distinct,Bool,Rel2< Op,T1,T2 > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<Greater,Bool,Rel2< Op,T1,T2 > > operator>(const Bool& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<Greater,Bool,Rel2< Op,T1,T2 > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<Less,Bool,Rel2< Op,T1,T2 > > operator<(const Bool& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<Less,Bool,Rel2< Op,T1,T2 > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel2<Add,Bool,Rel2< Op,T1,T2 > > operator+(const Bool& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<Add,Bool,Rel2< Op,T1,T2 > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel2<Sub,Bool,Rel2< Op,T1,T2 > > operator-(const Bool& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<Sub,Bool,Rel2< Op,T1,T2 > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel2<Mul,Bool,Rel2< Op,T1,T2 > > operator*(const Bool& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<Mul,Bool,Rel2< Op,T1,T2 > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel2<Div,Bool,Rel2< Op,T1,T2 > > operator/(const Bool& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<Div,Bool,Rel2< Op,T1,T2 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op, class T1, class T2 > inline Rel2<And,Bool,Rel2< Op,T1,T2 > > operator&&(const Bool& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<And,Bool,Rel2< Op,T1,T2 > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op, class T1, class T2 > inline Rel2<Or,Bool,Rel2< Op,T1,T2 > > operator||(const Bool& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<Or,Bool,Rel2< Op,T1,T2 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T2 > inline Rel2<Equal,Double,Rel2< Op,T1,T2 > > operator==(const Double& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<Equal,Double,Rel2< Op,T1,T2 > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<GreaterEqual,Double,Rel2< Op,T1,T2 > > operator>=(const Double& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<GreaterEqual,Double,Rel2< Op,T1,T2 > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<LessEqual,Double,Rel2< Op,T1,T2 > > operator<=(const Double& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<LessEqual,Double,Rel2< Op,T1,T2 > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<Distinct,Double,Rel2< Op,T1,T2 > > operator!=(const Double& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<Distinct,Double,Rel2< Op,T1,T2 > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<Greater,Double,Rel2< Op,T1,T2 > > operator>(const Double& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<Greater,Double,Rel2< Op,T1,T2 > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<Less,Double,Rel2< Op,T1,T2 > > operator<(const Double& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<Less,Double,Rel2< Op,T1,T2 > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel2<Add,Double,Rel2< Op,T1,T2 > > operator+(const Double& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<Add,Double,Rel2< Op,T1,T2 > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel2<Sub,Double,Rel2< Op,T1,T2 > > operator-(const Double& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<Sub,Double,Rel2< Op,T1,T2 > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel2<Mul,Double,Rel2< Op,T1,T2 > > operator*(const Double& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<Mul,Double,Rel2< Op,T1,T2 > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel2<Div,Double,Rel2< Op,T1,T2 > > operator/(const Double& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<Div,Double,Rel2< Op,T1,T2 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op, class T1, class T2 > inline Rel2<And,Double,Rel2< Op,T1,T2 > > operator&&(const Double& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<And,Double,Rel2< Op,T1,T2 > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op, class T1, class T2 > inline Rel2<Or,Double,Rel2< Op,T1,T2 > > operator||(const Double& lh, const Rel2< Op,T1,T2 >& rh) { return Rel2<Or,Double,Rel2< Op,T1,T2 > >(lh,rh); }
/** Symmetric unary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel1<Sym,Rel3< Op,T1,T2,T3 > > operator-(const Rel3< Op,T1,T2,T3 >& rh) { return Rel1<Sym,Rel3< Op,T1,T2,T3 > >(rh);} /** Negation unary operator.  \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T3 > inline Rel1<Not,Rel3< Op,T1,T2,T3 > > operator!(const Rel3< Op,T1,T2,T3 >& rh) { return Rel1<Not,Rel3< Op,T1,T2,T3 > >(rh);} /** Absolute value unary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel1<Abs,Rel3< Op,T1,T2,T3 > > abs(const Rel3< Op,T1,T2,T3 >& rh) { return Rel1<Abs,Rel3< Op,T1,T2,T3 > >(rh);} /** Min value (from a sequence) unary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel1<Min,Rel3< Op,T1,T2,T3 > > min(const Rel3< Op,T1,T2,T3 >& rh) { return Rel1<Min,Rel3< Op,T1,T2,T3 > >(rh);} /** Max value (from a sequence) unary operator. \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel1<Max,Rel3< Op,T1,T2,T3 > > max(const Rel3< Op,T1,T2,T3 >& rh) { return Rel1<Max,Rel3< Op,T1,T2,T3 > >(rh);}
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T2, class T3, class T > inline Rel2<Equal,Rel3< Op,T1,T2,T3 >,T > operator==(const Rel3< Op,T1,T2,T3 >& lh, const T& rh) { return Rel2<Equal,Rel3< Op,T1,T2,T3 >,T >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T > inline Rel2<GreaterEqual,Rel3< Op,T1,T2,T3 >,T > operator>=(const Rel3< Op,T1,T2,T3 >& lh, const T& rh) { return Rel2<GreaterEqual,Rel3< Op,T1,T2,T3 >,T >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T > inline Rel2<LessEqual,Rel3< Op,T1,T2,T3 >,T > operator<=(const Rel3< Op,T1,T2,T3 >& lh, const T& rh) { return Rel2<LessEqual,Rel3< Op,T1,T2,T3 >,T >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T2, class T3, class T > inline Rel2<Distinct,Rel3< Op,T1,T2,T3 >,T > operator!=(const Rel3< Op,T1,T2,T3 >& lh, const T& rh) { return Rel2<Distinct,Rel3< Op,T1,T2,T3 >,T >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T > inline Rel2<Greater,Rel3< Op,T1,T2,T3 >,T > operator>(const Rel3< Op,T1,T2,T3 >& lh, const T& rh) { return Rel2<Greater,Rel3< Op,T1,T2,T3 >,T >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T > inline Rel2<Less,Rel3< Op,T1,T2,T3 >,T > operator<(const Rel3< Op,T1,T2,T3 >& lh, const T& rh) { return Rel2<Less,Rel3< Op,T1,T2,T3 >,T >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T > inline Rel2<Add,Rel3< Op,T1,T2,T3 >,T > operator+(const Rel3< Op,T1,T2,T3 >& lh, const T& rh) { return Rel2<Add,Rel3< Op,T1,T2,T3 >,T >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T > inline Rel2<Sub,Rel3< Op,T1,T2,T3 >,T > operator-(const Rel3< Op,T1,T2,T3 >& lh, const T& rh) { return Rel2<Sub,Rel3< Op,T1,T2,T3 >,T >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T > inline Rel2<Mul,Rel3< Op,T1,T2,T3 >,T > operator*(const Rel3< Op,T1,T2,T3 >& lh, const T& rh) { return Rel2<Mul,Rel3< Op,T1,T2,T3 >,T >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T > inline Rel2<Div,Rel3< Op,T1,T2,T3 >,T > operator/(const Rel3< Op,T1,T2,T3 >& lh, const T& rh) { return Rel2<Div,Rel3< Op,T1,T2,T3 >,T >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T3, class T > inline Rel2<And,Rel3< Op,T1,T2,T3 >,T > operator&&(const Rel3< Op,T1,T2,T3 >& lh, const T& rh) { return Rel2<And,Rel3< Op,T1,T2,T3 >,T >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T3, class T > inline Rel2<Or,Rel3< Op,T1,T2,T3 >,T > operator||(const Rel3< Op,T1,T2,T3 >& lh, const T& rh) { return Rel2<Or,Rel3< Op,T1,T2,T3 >,T >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Equal,Int,Rel3< Op,T1,T2,T3 > > operator==(const Int& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<Equal,Int,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<GreaterEqual,Int,Rel3< Op,T1,T2,T3 > > operator>=(const Int& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<GreaterEqual,Int,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<LessEqual,Int,Rel3< Op,T1,T2,T3 > > operator<=(const Int& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<LessEqual,Int,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Distinct,Int,Rel3< Op,T1,T2,T3 > > operator!=(const Int& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<Distinct,Int,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Greater,Int,Rel3< Op,T1,T2,T3 > > operator>(const Int& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<Greater,Int,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Less,Int,Rel3< Op,T1,T2,T3 > > operator<(const Int& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<Less,Int,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Add,Int,Rel3< Op,T1,T2,T3 > > operator+(const Int& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<Add,Int,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Sub,Int,Rel3< Op,T1,T2,T3 > > operator-(const Int& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<Sub,Int,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Mul,Int,Rel3< Op,T1,T2,T3 > > operator*(const Int& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<Mul,Int,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Div,Int,Rel3< Op,T1,T2,T3 > > operator/(const Int& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<Div,Int,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<And,Int,Rel3< Op,T1,T2,T3 > > operator&&(const Int& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<And,Int,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Or,Int,Rel3< Op,T1,T2,T3 > > operator||(const Int& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<Or,Int,Rel3< Op,T1,T2,T3 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Equal,Bool,Rel3< Op,T1,T2,T3 > > operator==(const Bool& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<Equal,Bool,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<GreaterEqual,Bool,Rel3< Op,T1,T2,T3 > > operator>=(const Bool& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<GreaterEqual,Bool,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<LessEqual,Bool,Rel3< Op,T1,T2,T3 > > operator<=(const Bool& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<LessEqual,Bool,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Distinct,Bool,Rel3< Op,T1,T2,T3 > > operator!=(const Bool& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<Distinct,Bool,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Greater,Bool,Rel3< Op,T1,T2,T3 > > operator>(const Bool& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<Greater,Bool,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Less,Bool,Rel3< Op,T1,T2,T3 > > operator<(const Bool& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<Less,Bool,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Add,Bool,Rel3< Op,T1,T2,T3 > > operator+(const Bool& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<Add,Bool,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Sub,Bool,Rel3< Op,T1,T2,T3 > > operator-(const Bool& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<Sub,Bool,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Mul,Bool,Rel3< Op,T1,T2,T3 > > operator*(const Bool& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<Mul,Bool,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Div,Bool,Rel3< Op,T1,T2,T3 > > operator/(const Bool& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<Div,Bool,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<And,Bool,Rel3< Op,T1,T2,T3 > > operator&&(const Bool& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<And,Bool,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Or,Bool,Rel3< Op,T1,T2,T3 > > operator||(const Bool& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<Or,Bool,Rel3< Op,T1,T2,T3 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Equal,Double,Rel3< Op,T1,T2,T3 > > operator==(const Double& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<Equal,Double,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<GreaterEqual,Double,Rel3< Op,T1,T2,T3 > > operator>=(const Double& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<GreaterEqual,Double,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<LessEqual,Double,Rel3< Op,T1,T2,T3 > > operator<=(const Double& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<LessEqual,Double,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Distinct,Double,Rel3< Op,T1,T2,T3 > > operator!=(const Double& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<Distinct,Double,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Greater,Double,Rel3< Op,T1,T2,T3 > > operator>(const Double& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<Greater,Double,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Less,Double,Rel3< Op,T1,T2,T3 > > operator<(const Double& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<Less,Double,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Add,Double,Rel3< Op,T1,T2,T3 > > operator+(const Double& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<Add,Double,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Sub,Double,Rel3< Op,T1,T2,T3 > > operator-(const Double& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<Sub,Double,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Mul,Double,Rel3< Op,T1,T2,T3 > > operator*(const Double& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<Mul,Double,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Div,Double,Rel3< Op,T1,T2,T3 > > operator/(const Double& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<Div,Double,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<And,Double,Rel3< Op,T1,T2,T3 > > operator&&(const Double& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<And,Double,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Or,Double,Rel3< Op,T1,T2,T3 > > operator||(const Double& lh, const Rel3< Op,T1,T2,T3 >& rh) { return Rel2<Or,Double,Rel3< Op,T1,T2,T3 > >(lh,rh); }
/** Symmetric unary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel1<Sym,Rel4< Op,T1,T2,T3, T4 > > operator-(const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel1<Sym,Rel4< Op,T1,T2,T3, T4 > >(rh);} /** Negation unary operator.  \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel1<Not,Rel4< Op,T1,T2,T3, T4 > > operator!(const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel1<Not,Rel4< Op,T1,T2,T3, T4 > >(rh);} /** Absolute value unary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel1<Abs,Rel4< Op,T1,T2,T3, T4 > > abs(const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel1<Abs,Rel4< Op,T1,T2,T3, T4 > >(rh);} /** Min value (from a sequence) unary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel1<Min,Rel4< Op,T1,T2,T3, T4 > > min(const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel1<Min,Rel4< Op,T1,T2,T3, T4 > >(rh);} /** Max value (from a sequence) unary operator. \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel1<Max,Rel4< Op,T1,T2,T3, T4 > > max(const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel1<Max,Rel4< Op,T1,T2,T3, T4 > >(rh);}
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T2, class T3, class T4, class T > inline Rel2<Equal,Rel4< Op,T1,T2,T3, T4 >,T > operator==(const Rel4< Op,T1,T2,T3, T4 >& lh, const T& rh) { return Rel2<Equal,Rel4< Op,T1,T2,T3, T4 >,T >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4, class T > inline Rel2<GreaterEqual,Rel4< Op,T1,T2,T3, T4 >,T > operator>=(const Rel4< Op,T1,T2,T3, T4 >& lh, const T& rh) { return Rel2<GreaterEqual,Rel4< Op,T1,T2,T3, T4 >,T >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4, class T > inline Rel2<LessEqual,Rel4< Op,T1,T2,T3, T4 >,T > operator<=(const Rel4< Op,T1,T2,T3, T4 >& lh, const T& rh) { return Rel2<LessEqual,Rel4< Op,T1,T2,T3, T4 >,T >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T2, class T3, class T4, class T > inline Rel2<Distinct,Rel4< Op,T1,T2,T3, T4 >,T > operator!=(const Rel4< Op,T1,T2,T3, T4 >& lh, const T& rh) { return Rel2<Distinct,Rel4< Op,T1,T2,T3, T4 >,T >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4, class T > inline Rel2<Greater,Rel4< Op,T1,T2,T3, T4 >,T > operator>(const Rel4< Op,T1,T2,T3, T4 >& lh, const T& rh) { return Rel2<Greater,Rel4< Op,T1,T2,T3, T4 >,T >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4, class T > inline Rel2<Less,Rel4< Op,T1,T2,T3, T4 >,T > operator<(const Rel4< Op,T1,T2,T3, T4 >& lh, const T& rh) { return Rel2<Less,Rel4< Op,T1,T2,T3, T4 >,T >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4, class T > inline Rel2<Add,Rel4< Op,T1,T2,T3, T4 >,T > operator+(const Rel4< Op,T1,T2,T3, T4 >& lh, const T& rh) { return Rel2<Add,Rel4< Op,T1,T2,T3, T4 >,T >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4, class T > inline Rel2<Sub,Rel4< Op,T1,T2,T3, T4 >,T > operator-(const Rel4< Op,T1,T2,T3, T4 >& lh, const T& rh) { return Rel2<Sub,Rel4< Op,T1,T2,T3, T4 >,T >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4, class T > inline Rel2<Mul,Rel4< Op,T1,T2,T3, T4 >,T > operator*(const Rel4< Op,T1,T2,T3, T4 >& lh, const T& rh) { return Rel2<Mul,Rel4< Op,T1,T2,T3, T4 >,T >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4, class T > inline Rel2<Div,Rel4< Op,T1,T2,T3, T4 >,T > operator/(const Rel4< Op,T1,T2,T3, T4 >& lh, const T& rh) { return Rel2<Div,Rel4< Op,T1,T2,T3, T4 >,T >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T3, class T4, class T > inline Rel2<And,Rel4< Op,T1,T2,T3, T4 >,T > operator&&(const Rel4< Op,T1,T2,T3, T4 >& lh, const T& rh) { return Rel2<And,Rel4< Op,T1,T2,T3, T4 >,T >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T3, class T4, class T > inline Rel2<Or,Rel4< Op,T1,T2,T3, T4 >,T > operator||(const Rel4< Op,T1,T2,T3, T4 >& lh, const T& rh) { return Rel2<Or,Rel4< Op,T1,T2,T3, T4 >,T >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Equal,Int,Rel4< Op,T1,T2,T3, T4 > > operator==(const Int& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<Equal,Int,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<GreaterEqual,Int,Rel4< Op,T1,T2,T3, T4 > > operator>=(const Int& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<GreaterEqual,Int,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<LessEqual,Int,Rel4< Op,T1,T2,T3, T4 > > operator<=(const Int& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<LessEqual,Int,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Distinct,Int,Rel4< Op,T1,T2,T3, T4 > > operator!=(const Int& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<Distinct,Int,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Greater,Int,Rel4< Op,T1,T2,T3, T4 > > operator>(const Int& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<Greater,Int,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Less,Int,Rel4< Op,T1,T2,T3, T4 > > operator<(const Int& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<Less,Int,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Add,Int,Rel4< Op,T1,T2,T3, T4 > > operator+(const Int& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<Add,Int,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Sub,Int,Rel4< Op,T1,T2,T3, T4 > > operator-(const Int& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<Sub,Int,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Mul,Int,Rel4< Op,T1,T2,T3, T4 > > operator*(const Int& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<Mul,Int,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Div,Int,Rel4< Op,T1,T2,T3, T4 > > operator/(const Int& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<Div,Int,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<And,Int,Rel4< Op,T1,T2,T3, T4 > > operator&&(const Int& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<And,Int,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Or,Int,Rel4< Op,T1,T2,T3, T4 > > operator||(const Int& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<Or,Int,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Equal,Bool,Rel4< Op,T1,T2,T3, T4 > > operator==(const Bool& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<Equal,Bool,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<GreaterEqual,Bool,Rel4< Op,T1,T2,T3, T4 > > operator>=(const Bool& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<GreaterEqual,Bool,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<LessEqual,Bool,Rel4< Op,T1,T2,T3, T4 > > operator<=(const Bool& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<LessEqual,Bool,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Distinct,Bool,Rel4< Op,T1,T2,T3, T4 > > operator!=(const Bool& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<Distinct,Bool,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Greater,Bool,Rel4< Op,T1,T2,T3, T4 > > operator>(const Bool& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<Greater,Bool,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Less,Bool,Rel4< Op,T1,T2,T3, T4 > > operator<(const Bool& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<Less,Bool,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Add,Bool,Rel4< Op,T1,T2,T3, T4 > > operator+(const Bool& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<Add,Bool,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Sub,Bool,Rel4< Op,T1,T2,T3, T4 > > operator-(const Bool& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<Sub,Bool,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Mul,Bool,Rel4< Op,T1,T2,T3, T4 > > operator*(const Bool& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<Mul,Bool,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Div,Bool,Rel4< Op,T1,T2,T3, T4 > > operator/(const Bool& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<Div,Bool,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<And,Bool,Rel4< Op,T1,T2,T3, T4 > > operator&&(const Bool& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<And,Bool,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Or,Bool,Rel4< Op,T1,T2,T3, T4 > > operator||(const Bool& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<Or,Bool,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Equal,Double,Rel4< Op,T1,T2,T3, T4 > > operator==(const Double& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<Equal,Double,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<GreaterEqual,Double,Rel4< Op,T1,T2,T3, T4 > > operator>=(const Double& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<GreaterEqual,Double,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<LessEqual,Double,Rel4< Op,T1,T2,T3, T4 > > operator<=(const Double& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<LessEqual,Double,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Distinct,Double,Rel4< Op,T1,T2,T3, T4 > > operator!=(const Double& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<Distinct,Double,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Greater,Double,Rel4< Op,T1,T2,T3, T4 > > operator>(const Double& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<Greater,Double,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Less,Double,Rel4< Op,T1,T2,T3, T4 > > operator<(const Double& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<Less,Double,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Add,Double,Rel4< Op,T1,T2,T3, T4 > > operator+(const Double& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<Add,Double,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Sub,Double,Rel4< Op,T1,T2,T3, T4 > > operator-(const Double& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<Sub,Double,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Mul,Double,Rel4< Op,T1,T2,T3, T4 > > operator*(const Double& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<Mul,Double,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Div,Double,Rel4< Op,T1,T2,T3, T4 > > operator/(const Double& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<Div,Double,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<And,Double,Rel4< Op,T1,T2,T3, T4 > > operator&&(const Double& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<And,Double,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Or,Double,Rel4< Op,T1,T2,T3, T4 > > operator||(const Double& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel2<Or,Double,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); }
