predicate all_different_int(array [int] of var int: x);
predicate all_equal_int(array [int] of var int: x);
predicate among(var int: n, array [int] of var int: x, set of int: v);
predicate array_int_lq(array [int] of var int: x, array [int] of var int: y);
predicate array_int_lt(array [int] of var int: x, array [int] of var int: y);
predicate array_set_partition(array [int] of var set of int: S, set of int: universe);
predicate at_least_int(int: n, array [int] of var int: x, int: v);
predicate at_most_int(int: n, array [int] of var int: x, int: v);
predicate bool_lin_ge(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_gt(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_lt(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_ne(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate cumulatives(array [int] of var int: s, array [int] of var int: d, array [int] of var int: r, var int: b);
predicate decreasing_bool(array [int] of var bool: x);
predicate decreasing_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate gecode_array_set_element_union(var set of int: x, array [int] of var set of int: y, var set of int: z);
predicate gecode_bin_packing_load(array [int] of var int: l, array [int] of var int: bin, array [int] of int: w, int: minIndex);
predicate gecode_circuit(array [int] of var int: x);
predicate gecode_int_set_channel(array [int] of var int: x, int: xoff, array [int] of var set of int: y, int: yoff);
predicate gecode_link_set_to_booleans(var set of int: s, array [int] of var bool: b, int: idx);
predicate gecode_member_bool_reif(array [int] of var bool: x, var bool: y, var bool: b);
predicate gecode_member_int_reif(array [int] of var int: x, var int: y, var bool: b);
predicate gecode_nooverlap(array [int] of var int: x, array [int] of var int: w, array [int] of var int: y, array [int] of var int: h);
predicate gecode_range(array [int] of var int: x, int: xoff, var set of int: s, var set of int: t);
predicate gecode_set_weights(array [int] of int: csi, array [int] of int: cs, var set of int: x, var int: y);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate global_cardinality_closed(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate global_cardinality_low_up(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate global_cardinality_low_up_closed(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate increasing_bool(array [int] of var bool: x);
predicate increasing_int(array [int] of var int: x);
predicate inverse_offsets(array [int] of var int: f, int: foff, array [int] of var int: invf, int: invfoff);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate member_bool(array [int] of var bool: x, var bool: y);
predicate member_int(array [int] of var int: x, var int: y);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate nvalue(var int: n, array [int] of var int: x);
predicate regular(array [int] of var int: x, int: Q, int: S, array [int, int] of int: d, int: q0, set of int: F);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..100] of var 1..10: q :: output_array([1..100]);
constraint int_lin_eq([-5, -5, -4, 3, -1], [q[4], q[17], q[51], q[97], q[99]], -72);
constraint int_lin_eq([-5, -5, -2, -2, -2], [q[24], q[32], q[41], q[61], q[100]], -87);
constraint int_lin_eq([-5, -4, 2, -4, 1], [q[6], q[8], q[19], q[65], q[70]], -63);
constraint int_lin_eq([-5, -4, 4, 1, -4], [q[34], q[54], q[85], q[88], q[95]], -19);
constraint int_lin_eq([-5, -3, -4, -3, -1], [q[5], q[39], q[52], q[54], q[99]], -126);
constraint int_lin_eq([-5, -3, 3, 5, 1], [q[3], q[10], q[21], q[49], q[62]], -23);
constraint int_lin_eq([-5, -2, 1, -1, -1], [q[38], q[45], q[56], q[94], q[100]], -35);
constraint int_lin_eq([-5, -1, -5, -4, -1], [q[22], q[25], q[58], q[68], q[77]], -75);
constraint int_lin_eq([-5, -1, 5, 1, 5], [q[10], q[22], q[24], q[62], q[92]], 42);
constraint int_lin_eq([-5, 1, -5, -3, -3], [q[27], q[30], q[54], q[91], q[96]], -80);
constraint int_lin_eq([-5, 2, 3, 3, -5], [q[7], q[45], q[47], q[59], q[77]], -22);
constraint int_lin_eq([-5, 3, -5, -1, -3], [q[14], q[41], q[53], q[55], q[59]], -63);
constraint int_lin_eq([-5, 4, -4, -3, 3], [q[35], q[43], q[58], q[61], q[84]], 18);
constraint int_lin_eq([-4, -5, -2, 1, -1], [q[29], q[38], q[93], q[95], q[99]], -38);
constraint int_lin_eq([-4, -5, -1, -5, -4], [q[14], q[42], q[48], q[49], q[84]], -118);
constraint int_lin_eq([-4, -5, 5, 1, 5], [q[5], q[19], q[39], q[57], q[85]], 11);
constraint int_lin_eq([-4, -4, 3, -2, -1], [q[8], q[34], q[56], q[90], q[95]], -72);
constraint int_lin_eq([-4, -3, -3, -1, -3], [q[29], q[38], q[54], q[67], q[72]], -57);
constraint int_lin_eq([-4, -3, -1, 3, 1], [q[35], q[46], q[60], q[70], q[98]], 2);
constraint int_lin_eq([-4, -3, -1, 5, 4], [q[1], q[24], q[52], q[75], q[94]], -6);
constraint int_lin_eq([-4, -2, 1, 4, 2], [q[11], q[26], q[31], q[65], q[75]], 5);
constraint int_lin_eq([-4, -1, -4, -2, 3], [q[49], q[63], q[68], q[83], q[88]], -38);
constraint int_lin_eq([-4, -1, -4, 3, 3], [q[19], q[20], q[26], q[27], q[61]], -21);
constraint int_lin_eq([-4, -1, -4, 4, -5], [q[33], q[34], q[68], q[79], q[98]], -75);
constraint int_lin_eq([-4, -1, 3, 3, -3], [q[17], q[24], q[48], q[50], q[51]], -27);
constraint int_lin_eq([-4, -1, 5, 3, -2], [q[14], q[15], q[49], q[88], q[95]], -15);
constraint int_lin_eq([-4, 3, -2, -4, -1], [q[9], q[16], q[25], q[41], q[77]], -35);
constraint int_lin_eq([-4, 3, 5, 3, 2], [q[8], q[9], q[22], q[46], q[77]], 23);
constraint int_lin_eq([-4, 5, -2, 4, 2], [q[3], q[25], q[35], q[79], q[93]], 29);
constraint int_lin_eq([-3, -5, 1, 5, 1], [q[4], q[85], q[94], q[98], q[100]], 12);
constraint int_lin_eq([-3, -4, 4, -3, 1], [q[6], q[9], q[11], q[13], q[62]], -12);
constraint int_lin_eq([-3, -2, 1, 3, -2], [q[3], q[10], q[39], q[78], q[92]], -15);
constraint int_lin_eq([-3, -1, 1, -5, 3], [q[19], q[61], q[62], q[75], q[80]], -16);
constraint int_lin_eq([-3, -1, 4, 1, 4], [q[33], q[37], q[58], q[72], q[89]], 7);
constraint int_lin_eq([-3, 1, -3, -4, -5], [q[2], q[27], q[32], q[38], q[96]], -65);
constraint int_lin_eq([-3, 1, -2, 3, -5], [q[7], q[47], q[53], q[61], q[73]], -38);
constraint int_lin_eq([-3, 1, -1, -4, -1], [q[8], q[13], q[43], q[89], q[97]], -39);
constraint int_lin_eq([-3, 2, 5, -1, 3], [q[5], q[28], q[46], q[65], q[88]], 14);
constraint int_lin_eq([-3, 3, -1, 4, -3], [q[36], q[37], q[56], q[80], q[93]], -14);
constraint int_lin_eq([-3, 4, -1, 1, -1], [q[5], q[6], q[33], q[48], q[95]], 3);
constraint int_lin_eq([-3, 4, 2, 5, -3], [q[14], q[23], q[45], q[65], q[69]], 8);
constraint int_lin_eq([-3, 4, 3, 1, 1], [q[20], q[26], q[38], q[86], q[95]], 11);
constraint int_lin_eq([-3, 4, 5, -1, 3], [q[7], q[30], q[44], q[60], q[84]], 55);
constraint int_lin_eq([-3, 5, -1, 2, 3], [q[4], q[18], q[43], q[58], q[86]], 47);
constraint int_lin_eq([-3, 5, 5, -4, 5], [q[4], q[31], q[34], q[51], q[72]], 56);
constraint int_lin_eq([-2, -5, 5, -4, -2], [q[4], q[12], q[28], q[50], q[99]], -21);
constraint int_lin_eq([-2, -5, 5, 4, -5], [q[20], q[30], q[68], q[73], q[79]], 6);
constraint int_lin_eq([-2, -4, -5, -4, 2], [q[11], q[45], q[50], q[76], q[90]], -43);
constraint int_lin_eq([-2, -4, 4, -3, 2], [q[33], q[47], q[67], q[75], q[76]], 19);
constraint int_lin_eq([-2, -1, -3, -2, -2], [q[35], q[43], q[74], q[83], q[88]], -37);
constraint int_lin_eq([-2, 2, -3, 4, -5], [q[10], q[11], q[15], q[40], q[85]], -53);
constraint int_lin_eq([-2, 4, -3, 3, 1], [q[21], q[36], q[41], q[68], q[91]], 28);
constraint int_lin_eq([-1, -5, 4, 1, -5], [q[17], q[40], q[70], q[72], q[89]], 2);
constraint int_lin_eq([-1, -4, 1, -3, -2], [q[12], q[36], q[37], q[60], q[74]], -55);
constraint int_lin_eq([-1, -2, -1, 2, -5], [q[1], q[2], q[21], q[46], q[73]], -43);
constraint int_lin_eq([-1, -2, -1, 2, 5], [q[55], q[57], q[90], q[92], q[94]], 7);
constraint int_lin_eq([-1, -2, 4, -5, 5], [q[29], q[34], q[76], q[84], q[97]], -29);
constraint int_lin_eq([-1, -2, 5, 5, -4], [q[42], q[48], q[67], q[77], q[87]], 33);
constraint int_lin_eq([-1, -1, -1, -1, -5], [q[1], q[17], q[73], q[79], q[87]], -56);
constraint int_lin_eq([-1, -1, -1, 5, 5], [q[7], q[17], q[23], q[43], q[51]], 39);
constraint int_lin_eq([-1, -1, 2, 5, 4], [q[4], q[11], q[24], q[80], q[99]], 74);
constraint int_lin_eq([-1, -1, 5, -3, -4], [q[36], q[45], q[52], q[53], q[59]], 5);
constraint int_lin_eq([-1, 1, -1, 4, -1], [q[18], q[72], q[76], q[89], q[91]], -5);
constraint int_lin_eq([-1, 1, 3, 4, 4], [q[21], q[38], q[42], q[86], q[96]], 64);
constraint int_lin_eq([-1, 2, -1, 4, 3], [q[7], q[19], q[87], q[90], q[92]], 48);
constraint int_lin_eq([-1, 3, -1, -1, 5], [q[15], q[27], q[53], q[66], q[79]], 20);
constraint int_lin_eq([-1, 3, 2, 5, 5], [q[13], q[16], q[18], q[39], q[98]], 120);
constraint int_lin_eq([-1, 4, -4, 4, 4], [q[20], q[50], q[57], q[70], q[71]], 26);
constraint int_lin_eq([-1, 5, -5, -3, 2], [q[2], q[13], q[36], q[76], q[89]], -58);
constraint int_lin_eq([1, -4, -5, 2, -2], [q[15], q[30], q[66], q[75], q[82]], -15);
constraint int_lin_eq([1, -3, 4, 4, 4], [q[30], q[44], q[61], q[73], q[86]], 35);
constraint int_lin_eq([1, -2, -4, 4, 5], [q[21], q[32], q[41], q[81], q[93]], 35);
constraint int_lin_eq([1, -2, -3, -1, -5], [q[28], q[56], q[63], q[86], q[100]], -84);
constraint int_lin_eq([1, -2, -3, -1, -4], [q[25], q[29], q[53], q[59], q[87]], -47);
constraint int_lin_eq([1, -2, -1, 5, -2], [q[2], q[37], q[69], q[83], q[87]], 17);
constraint int_lin_eq([1, 2, -4, 5, -3], [q[3], q[37], q[73], q[78], q[92]], 10);
constraint int_lin_eq([1, 2, -1, -3, -2], [q[1], q[28], q[34], q[46], q[53]], -21);
constraint int_lin_eq([1, 5, -1, -2, 1], [q[13], q[51], q[55], q[60], q[85]], 26);
constraint int_lin_eq([1, 5, 3, 2, -4], [q[8], q[19], q[22], q[66], q[100]], 34);
constraint int_lin_eq([2, -3, 1, 4, 5], [q[9], q[10], q[60], q[69], q[80]], 54);
constraint int_lin_eq([2, -1, -4, 1, -5], [q[31], q[32], q[33], q[47], q[81]], -24);
constraint int_lin_eq([2, -1, 5, -1, 5], [q[13], q[16], q[26], q[55], q[79]], 18);
constraint int_lin_eq([2, -1, 5, 5, -3], [q[27], q[55], q[57], q[64], q[67]], 52);
constraint int_lin_eq([2, 1, 4, 2, 1], [q[18], q[81], q[82], q[90], q[93]], 73);
constraint int_lin_eq([2, 2, -5, -1, 3], [q[18], q[58], q[68], q[78], q[96]], 15);
constraint int_lin_eq([2, 2, 3, -3, -1], [q[31], q[44], q[47], q[74], q[96]], 5);
constraint int_lin_eq([2, 3, 2, -2, 3], [q[3], q[16], q[25], q[37], q[83]], 63);
constraint int_lin_eq([2, 4, -3, 5, 2], [q[5], q[62], q[64], q[81], q[85]], 48);
constraint int_lin_eq([2, 4, -1, -3, 5], [q[12], q[54], q[64], q[66], q[67]], 68);
constraint int_lin_eq([2, 5, -5, 5, -2], [q[2], q[26], q[45], q[65], q[69]], 6);
constraint int_lin_eq([3, -5, 3, 2, 4], [q[31], q[32], q[36], q[62], q[82]], 83);
constraint int_lin_eq([3, -4, -1, -2, 1], [q[1], q[6], q[63], q[82], q[88]], -38);
constraint int_lin_eq([3, -4, 5, 3, 1], [q[9], q[43], q[64], q[69], q[80]], 45);
constraint int_lin_eq([3, -3, 1, -5, -3], [q[1], q[24], q[49], q[89], q[98]], -47);
constraint int_lin_eq([3, -3, 4, -4, 4], [q[10], q[23], q[29], q[60], q[70]], 30);
constraint int_lin_eq([3, -3, 5, 4, -3], [q[17], q[39], q[42], q[76], q[97]], 41);
constraint int_lin_eq([3, -2, -5, -1, -1], [q[47], q[52], q[58], q[94], q[99]], -44);
constraint int_lin_eq([3, -2, -3, -3, 1], [q[20], q[33], q[40], q[49], q[91]], -21);
constraint int_lin_eq([3, -2, 2, -3, -1], [q[12], q[26], q[56], q[63], q[71]], -12);
constraint int_lin_eq([3, -2, 4, 1, -5], [q[48], q[71], q[84], q[87], q[94]], 26);
constraint int_lin_eq([3, -1, -1, -3, -2], [q[3], q[66], q[74], q[77], q[82]], -16);
constraint int_lin_eq([3, -1, 2, -4, -2], [q[11], q[22], q[27], q[56], q[91]], 4);
constraint int_lin_eq([3, -1, 2, -3, 5], [q[20], q[21], q[64], q[81], q[97]], 22);
constraint int_lin_eq([3, 1, 4, -1, -4], [q[15], q[35], q[44], q[57], q[67]], 2);
constraint int_lin_eq([3, 1, 5, -2, 3], [q[12], q[14], q[50], q[55], q[100]], 50);
constraint int_lin_eq([3, 2, -1, -5, 1], [q[25], q[63], q[75], q[78], q[83]], 14);
constraint int_lin_eq([3, 2, -1, -2, 3], [q[6], q[23], q[59], q[74], q[80]], 46);
constraint int_lin_eq([4, -4, -3, 3, 3], [q[16], q[57], q[66], q[86], q[96]], 26);
constraint int_lin_eq([4, -1, -3, 5, -4], [q[8], q[16], q[41], q[71], q[97]], 46);
constraint int_lin_eq([4, 3, -5, 2, 4], [q[12], q[22], q[40], q[44], q[59]], 38);
constraint int_lin_eq([5, -5, 5, 5, 3], [q[23], q[28], q[42], q[52], q[74]], 72);
constraint int_lin_eq([5, -2, 2, -2, -1], [q[14], q[40], q[54], q[71], q[78]], 20);
solve  :: int_search(q, first_fail, indomain_min, complete) satisfy;
