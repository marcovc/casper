predicate all_different_int(array [int] of var int: x);
predicate all_equal_int(array [int] of var int: x);
predicate among(var int: n, array [int] of var int: x, set of int: v);
predicate array_int_lq(array [int] of var int: x, array [int] of var int: y);
predicate array_int_lt(array [int] of var int: x, array [int] of var int: y);
predicate array_set_partition(array [int] of var set of int: S, set of int: universe);
predicate at_least_int(int: n, array [int] of var int: x, int: v);
predicate at_most_int(int: n, array [int] of var int: x, int: v);
predicate bool_lin_ge(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_gt(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_lt(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_ne(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate cumulatives(array [int] of var int: s, array [int] of var int: d, array [int] of var int: r, var int: b);
predicate decreasing_bool(array [int] of var bool: x);
predicate decreasing_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate gecode_array_set_element_union(var set of int: x, array [int] of var set of int: y, var set of int: z);
predicate gecode_bin_packing_load(array [int] of var int: l, array [int] of var int: bin, array [int] of int: w, int: minIndex);
predicate gecode_circuit(array [int] of var int: x);
predicate gecode_int_set_channel(array [int] of var int: x, int: xoff, array [int] of var set of int: y, int: yoff);
predicate gecode_link_set_to_booleans(var set of int: s, array [int] of var bool: b, int: idx);
predicate gecode_member_bool_reif(array [int] of var bool: x, var bool: y, var bool: b);
predicate gecode_member_int_reif(array [int] of var int: x, var int: y, var bool: b);
predicate gecode_nooverlap(array [int] of var int: x, array [int] of var int: w, array [int] of var int: y, array [int] of var int: h);
predicate gecode_range(array [int] of var int: x, int: xoff, var set of int: s, var set of int: t);
predicate gecode_set_weights(array [int] of int: csi, array [int] of int: cs, var set of int: x, var int: y);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate global_cardinality_closed(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate global_cardinality_low_up(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate global_cardinality_low_up_closed(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate increasing_bool(array [int] of var bool: x);
predicate increasing_int(array [int] of var int: x);
predicate inverse_offsets(array [int] of var int: f, int: foff, array [int] of var int: invf, int: invfoff);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate member_bool(array [int] of var bool: x, var bool: y);
predicate member_int(array [int] of var int: x, var int: y);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate nvalue(var int: n, array [int] of var int: x);
predicate regular(array [int] of var int: x, int: Q, int: S, array [int, int] of int: d, int: q0, set of int: F);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..30] of var 1..50: q :: output_array([1..30]);
constraint int_lin_eq([-5, -1, -5, -1, -2], [q[1], q[4], q[5], q[21], q[22]], -427);
constraint int_lin_eq([-3, -2, -1, -3, -1], [q[3], q[8], q[9], q[20], q[26]], -314);
constraint int_lin_eq([-2, -3, -1, 2, 2], [q[12], q[13], q[21], q[25], q[26]], -72);
constraint int_lin_eq([-2, -1, -1, -2, -2], [q[11], q[15], q[27], q[28], q[29]], -122);
constraint int_lin_eq([-1, 1, 2, 3, -1], [q[13], q[14], q[19], q[25], q[30]], 82);
constraint int_lin_eq([-1, 2, -2, 4, 3], [q[2], q[6], q[8], q[17], q[30]], 90);
constraint int_lin_eq([1, -1, -1, -3, 5], [q[8], q[16], q[18], q[19], q[23]], 72);
constraint int_lin_eq([2, -5, 4, 4, -4], [q[2], q[7], q[9], q[11], q[20]], -28);
constraint int_lin_eq([2, -4, -1, -5, -4], [q[1], q[5], q[16], q[21], q[22]], -221);
constraint int_lin_eq([2, -1, 4, 5, -2], [q[6], q[7], q[10], q[12], q[17]], 282);
constraint int_lin_eq([2, 2, -5, 3, -3], [q[1], q[10], q[20], q[22], q[27]], 115);
constraint int_lin_eq([2, 2, -1, -2, 5], [q[10], q[15], q[24], q[25], q[27]], 89);
constraint int_lin_eq([2, 4, -5, -3, -4], [q[6], q[13], q[17], q[28], q[30]], -122);
constraint int_lin_eq([3, 1, -4, -4, 1], [q[3], q[12], q[14], q[26], q[29]], -3);
constraint int_lin_eq([3, 1, 1, -2, -1], [q[7], q[9], q[15], q[23], q[29]], 123);
constraint int_lin_eq([4, -4, -4, -1, 4], [q[2], q[4], q[18], q[23], q[24]], -49);
constraint int_lin_eq([4, 3, 4, -3, 5], [q[5], q[11], q[14], q[18], q[28]], 156);
constraint int_lin_eq([4, 5, 5, -4, 4], [q[3], q[4], q[16], q[19], q[24]], 417);
solve  :: int_search(q, first_fail, indomain_min, complete) satisfy;
