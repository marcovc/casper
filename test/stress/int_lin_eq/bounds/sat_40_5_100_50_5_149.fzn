predicate all_different_int(array [int] of var int: x);
predicate all_equal_int(array [int] of var int: x);
predicate among(var int: n, array [int] of var int: x, set of int: v);
predicate array_int_lq(array [int] of var int: x, array [int] of var int: y);
predicate array_int_lt(array [int] of var int: x, array [int] of var int: y);
predicate array_set_partition(array [int] of var set of int: S, set of int: universe);
predicate at_least_int(int: n, array [int] of var int: x, int: v);
predicate at_most_int(int: n, array [int] of var int: x, int: v);
predicate bool_lin_ge(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_gt(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_lt(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_ne(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate cumulatives(array [int] of var int: s, array [int] of var int: d, array [int] of var int: r, var int: b);
predicate decreasing_bool(array [int] of var bool: x);
predicate decreasing_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate gecode_array_set_element_union(var set of int: x, array [int] of var set of int: y, var set of int: z);
predicate gecode_bin_packing_load(array [int] of var int: l, array [int] of var int: bin, array [int] of int: w, int: minIndex);
predicate gecode_circuit(array [int] of var int: x);
predicate gecode_int_set_channel(array [int] of var int: x, int: xoff, array [int] of var set of int: y, int: yoff);
predicate gecode_link_set_to_booleans(var set of int: s, array [int] of var bool: b, int: idx);
predicate gecode_member_bool_reif(array [int] of var bool: x, var bool: y, var bool: b);
predicate gecode_member_int_reif(array [int] of var int: x, var int: y, var bool: b);
predicate gecode_nooverlap(array [int] of var int: x, array [int] of var int: w, array [int] of var int: y, array [int] of var int: h);
predicate gecode_range(array [int] of var int: x, int: xoff, var set of int: s, var set of int: t);
predicate gecode_set_weights(array [int] of int: csi, array [int] of int: cs, var set of int: x, var int: y);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate global_cardinality_closed(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate global_cardinality_low_up(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate global_cardinality_low_up_closed(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate increasing_bool(array [int] of var bool: x);
predicate increasing_int(array [int] of var int: x);
predicate inverse_offsets(array [int] of var int: f, int: foff, array [int] of var int: invf, int: invfoff);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate member_bool(array [int] of var bool: x, var bool: y);
predicate member_int(array [int] of var int: x, var int: y);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate nvalue(var int: n, array [int] of var int: x);
predicate regular(array [int] of var int: x, int: Q, int: S, array [int, int] of int: d, int: q0, set of int: F);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..100] of var -24..25: q :: output_array([1..100]);
constraint int_lin_eq([-5, -2, -5, -3, 3], [q[3], q[36], q[45], q[53], q[84]], -83);
constraint int_lin_eq([-5, 2, 5, 1, -1], [q[2], q[28], q[58], q[59], q[82]], 69);
constraint int_lin_eq([-4, -1, -4, -1, 3], [q[4], q[25], q[37], q[38], q[93]], 145);
constraint int_lin_eq([-4, -1, -3, 1, -2], [q[65], q[81], q[89], q[94], q[95]], -57);
constraint int_lin_eq([-4, 2, 2, -3, -4], [q[5], q[27], q[28], q[42], q[53]], -62);
constraint int_lin_eq([-4, 5, -3, 3, 3], [q[14], q[37], q[57], q[66], q[93]], -145);
constraint int_lin_eq([-3, -5, 1, -1, 2], [q[47], q[65], q[81], q[85], q[98]], -130);
constraint int_lin_eq([-3, -1, -2, -3, -2], [q[12], q[23], q[72], q[80], q[87]], -38);
constraint int_lin_eq([-3, 1, -3, -4, -3], [q[9], q[14], q[19], q[71], q[86]], -123);
constraint int_lin_eq([-3, 2, 5, 5, 3], [q[17], q[18], q[34], q[72], q[74]], -117);
constraint int_lin_eq([-3, 5, 1, 5, -2], [q[8], q[21], q[48], q[50], q[67]], 100);
constraint int_lin_eq([-2, -5, -1, 2, -5], [q[16], q[33], q[40], q[74], q[91]], 33);
constraint int_lin_eq([-2, -4, 2, -1, 5], [q[20], q[34], q[47], q[49], q[83]], 142);
constraint int_lin_eq([-2, 1, -1, 1, -1], [q[4], q[39], q[68], q[90], q[99]], 57);
constraint int_lin_eq([-2, 2, 4, 2, -2], [q[6], q[16], q[43], q[52], q[82]], 74);
constraint int_lin_eq([-2, 4, -1, 4, 1], [q[3], q[10], q[22], q[46], q[96]], -6);
constraint int_lin_eq([-2, 5, 1, 2, -1], [q[24], q[64], q[67], q[76], q[97]], 105);
constraint int_lin_eq([-1, -3, 2, -5, 1], [q[7], q[25], q[35], q[46], q[96]], -91);
constraint int_lin_eq([-1, -1, -2, 2, -1], [q[6], q[19], q[76], q[77], q[97]], -11);
constraint int_lin_eq([-1, -1, -2, 5, -4], [q[36], q[50], q[69], q[75], q[92]], 17);
constraint int_lin_eq([-1, 5, -5, 4, -1], [q[9], q[44], q[51], q[56], q[92]], 49);
constraint int_lin_eq([1, -3, 3, -2, 3], [q[12], q[26], q[29], q[45], q[57]], 33);
constraint int_lin_eq([1, -3, 4, 2, 4], [q[5], q[38], q[42], q[75], q[98]], -111);
constraint int_lin_eq([1, 2, -1, 5, 5], [q[2], q[51], q[56], q[63], q[100]], -23);
constraint int_lin_eq([1, 5, 2, -5, -5], [q[13], q[21], q[80], q[84], q[89]], -90);
constraint int_lin_eq([2, -3, -1, -2, -3], [q[24], q[54], q[62], q[70], q[78]], -34);
constraint int_lin_eq([2, -3, -1, 2, 5], [q[22], q[27], q[61], q[86], q[100]], 55);
constraint int_lin_eq([2, 5, -1, 3, -4], [q[10], q[17], q[26], q[73], q[85]], -65);
constraint int_lin_eq([3, -5, -1, 3, -1], [q[41], q[49], q[59], q[68], q[99]], -77);
constraint int_lin_eq([3, -4, -1, -2, 3], [q[1], q[11], q[32], q[55], q[69]], 54);
constraint int_lin_eq([3, -3, -4, 2, 1], [q[1], q[8], q[15], q[39], q[83]], -1);
constraint int_lin_eq([4, -2, -2, -5, -4], [q[15], q[43], q[52], q[63], q[88]], 47);
constraint int_lin_eq([4, -1, 4, -1, -5], [q[7], q[31], q[48], q[66], q[87]], -43);
constraint int_lin_eq([4, 1, 5, 5, 3], [q[23], q[44], q[58], q[61], q[88]], -194);
constraint int_lin_eq([4, 4, 3, 1, 2], [q[11], q[54], q[60], q[94], q[95]], -55);
constraint int_lin_eq([5, -3, -4, -3, 2], [q[30], q[40], q[77], q[78], q[91]], -115);
constraint int_lin_eq([5, -3, 2, 3, -2], [q[31], q[41], q[60], q[71], q[79]], 70);
constraint int_lin_eq([5, -2, -2, 1, 1], [q[13], q[18], q[29], q[30], q[64]], -105);
constraint int_lin_eq([5, 4, 5, 5, 1], [q[33], q[35], q[55], q[73], q[79]], -111);
constraint int_lin_eq([5, 5, -1, 5, -3], [q[20], q[32], q[62], q[70], q[90]], -221);
solve  :: int_search(q, first_fail, indomain_min, complete) satisfy;
