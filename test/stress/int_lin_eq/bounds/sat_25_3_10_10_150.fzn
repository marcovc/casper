predicate all_different_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate lex_lesseq_int(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..60] of var 1..10: q :: output_array([1..60]);
constraint int_lin_eq([-10, -10, 4], [q[9], q[13], q[58]], -88);
constraint int_lin_eq([-9, 7, 4], [q[14], q[37], q[53]], 29);
constraint int_lin_eq([-7, -3, -4], [q[12], q[17], q[43]], -66);
constraint int_lin_eq([-6, -4, 4], [q[2], q[20], q[45]], -42);
constraint int_lin_eq([-6, 3, -7], [q[29], q[52], q[57]], -49);
constraint int_lin_eq([-5, -8, 10], [q[9], q[10], q[60]], 6);
constraint int_lin_eq([-5, 1, 1], [q[21], q[51], q[60]], -14);
constraint int_lin_eq([-5, 6, 6], [q[1], q[3], q[5]], -3);
constraint int_lin_eq([-3, 3, -10], [q[6], q[20], q[26]], -15);
constraint int_lin_eq([-2, -5, -2], [q[18], q[28], q[44]], -51);
constraint int_lin_eq([-1, -10, -6], [q[16], q[31], q[37]], -74);
constraint int_lin_eq([-1, -1, 9], [q[32], q[38], q[42]], 17);
constraint int_lin_eq([-1, 1, 2], [q[8], q[13], q[40]], 4);
constraint int_lin_eq([-1, 2, 10], [q[4], q[19], q[40]], 36);
constraint int_lin_eq([-1, 3, -7], [q[24], q[33], q[46]], -76);
constraint int_lin_eq([-1, 4, 1], [q[10], q[34], q[54]], 30);
constraint int_lin_eq([-1, 4, 4], [q[15], q[47], q[56]], 23);
constraint int_lin_eq([-1, 7, 4], [q[16], q[39], q[41]], 43);
constraint int_lin_eq([1, 2, -2], [q[14], q[29], q[36]], -9);
constraint int_lin_eq([3, 6, 2], [q[23], q[30], q[31]], 51);
constraint int_lin_eq([5, -9, 8], [q[6], q[11], q[59]], -8);
constraint int_lin_eq([7, -7, -8], [q[22], q[36], q[55]], -96);
constraint int_lin_eq([7, 6, 5], [q[35], q[49], q[50]], 106);
constraint int_lin_eq([9, -1, 4], [q[7], q[8], q[48]], 13);
constraint int_lin_eq([9, 9, -6], [q[25], q[26], q[27]], 63);
solve  :: int_search(q, first_fail, indomain_min, complete) satisfy;
