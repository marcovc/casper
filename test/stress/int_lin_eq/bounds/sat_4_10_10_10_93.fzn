predicate all_different_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate lex_lesseq_int(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..30] of var 1..10: q :: output_array([1..30]);
constraint int_lin_eq([-4, -3, 8, -10, 10, 6, 9, 3, 10, 9], [q[1], q[3], q[4], q[5], q[8], q[9], q[15], q[18], q[26], q[27]], 267);
constraint int_lin_eq([-1, 2, 10, -4, -1, 10, 3, 5, 5, -9], [q[7], q[16], q[17], q[19], q[20], q[23], q[24], q[28], q[29], q[30]], 14);
constraint int_lin_eq([4, 7, 1, -10, -9, -1, -6, 5, 10, -1], [q[1], q[4], q[8], q[12], q[14], q[16], q[23], q[25], q[26], q[28]], 83);
constraint int_lin_eq([10, 4, -2, -1, -1, 3, -8, -10, -10, 10], [q[2], q[6], q[10], q[11], q[12], q[13], q[14], q[21], q[22], q[25]], -45);
solve  :: int_search(q, first_fail, indomain_min, complete) satisfy;
