predicate all_different_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate lex_lesseq_int(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..20] of var 1..10: q :: output_array([1..20]);
constraint int_lin_eq([-10, -9, -4, 8, 6, 3, -4, -2, 10, -2], [q[1], q[2], q[3], q[9], q[10], q[12], q[17], q[18], q[19], q[20]], 32);
constraint int_lin_eq([7, 7, -2, -2, -1, -10, -10, 5, 9, -2], [q[3], q[4], q[8], q[9], q[11], q[16], q[17], q[18], q[19], q[20]], 56);
constraint int_lin_eq([9, -1, -9, -3, 10, 2, 9, 9, 2, -1], [q[1], q[2], q[5], q[6], q[7], q[10], q[12], q[13], q[14], q[15]], 228);
solve  :: int_search(q, first_fail, indomain_min, complete) satisfy;
