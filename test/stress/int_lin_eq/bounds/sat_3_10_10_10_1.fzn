predicate all_different_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate lex_lesseq_int(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..20] of var 1..10: q :: output_array([1..20]);
constraint int_lin_eq([1, -4, 7, -4, 2, -6, -1, 3, -1, -1], [q[2], q[5], q[8], q[9], q[10], q[13], q[14], q[15], q[16], q[19]], -9);
constraint int_lin_eq([4, 5, -1, -6, -7, -2, 2, -8, -2, 10], [q[1], q[3], q[4], q[6], q[7], q[11], q[12], q[17], q[18], q[20]], -76);
constraint int_lin_eq([10, -4, -10, -1, -2, -10, 2, 10, 7, -1], [q[3], q[6], q[8], q[10], q[11], q[12], q[14], q[17], q[19], q[20]], 12);
solve  :: int_search(q, first_fail, indomain_min, complete) satisfy;
