predicate all_different_int(array [int] of var int: x);
predicate all_equal_int(array [int] of var int: x);
predicate among(var int: n, array [int] of var int: x, set of int: v);
predicate array_int_lq(array [int] of var int: x, array [int] of var int: y);
predicate array_int_lt(array [int] of var int: x, array [int] of var int: y);
predicate array_set_partition(array [int] of var set of int: S, set of int: universe);
predicate at_least_int(int: n, array [int] of var int: x, int: v);
predicate at_most_int(int: n, array [int] of var int: x, int: v);
predicate bool_lin_ge(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_gt(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_lt(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_ne(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate cumulatives(array [int] of var int: s, array [int] of var int: d, array [int] of var int: r, var int: b);
predicate decreasing_bool(array [int] of var bool: x);
predicate decreasing_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate gecode_array_set_element_union(var set of int: x, array [int] of var set of int: y, var set of int: z);
predicate gecode_bin_packing_load(array [int] of var int: l, array [int] of var int: bin, array [int] of int: w, int: minIndex);
predicate gecode_circuit(array [int] of var int: x);
predicate gecode_int_set_channel(array [int] of var int: x, int: xoff, array [int] of var set of int: y, int: yoff);
predicate gecode_link_set_to_booleans(var set of int: s, array [int] of var bool: b, int: idx);
predicate gecode_member_bool_reif(array [int] of var bool: x, var bool: y, var bool: b);
predicate gecode_member_int_reif(array [int] of var int: x, var int: y, var bool: b);
predicate gecode_nooverlap(array [int] of var int: x, array [int] of var int: w, array [int] of var int: y, array [int] of var int: h);
predicate gecode_range(array [int] of var int: x, int: xoff, var set of int: s, var set of int: t);
predicate gecode_set_weights(array [int] of int: csi, array [int] of int: cs, var set of int: x, var int: y);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate global_cardinality_closed(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate global_cardinality_low_up(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate global_cardinality_low_up_closed(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate increasing_bool(array [int] of var bool: x);
predicate increasing_int(array [int] of var int: x);
predicate inverse_offsets(array [int] of var int: f, int: foff, array [int] of var int: invf, int: invfoff);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate member_bool(array [int] of var bool: x, var bool: y);
predicate member_int(array [int] of var int: x, var int: y);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate nvalue(var int: n, array [int] of var int: x);
predicate regular(array [int] of var int: x, int: Q, int: S, array [int, int] of int: d, int: q0, set of int: F);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..100] of var 1..10: q :: output_array([1..100]);
constraint int_lin_eq([-5, -5, 2, 4, 1], [q[5], q[23], q[37], q[75], q[89]], -6);
constraint int_lin_eq([-5, -1, 2, -1, 2], [q[40], q[45], q[52], q[62], q[74]], -1);
constraint int_lin_eq([-5, 2, -4, -4, 4], [q[15], q[27], q[38], q[71], q[73]], -94);
constraint int_lin_eq([-5, 3, -1, 1, -5], [q[16], q[21], q[43], q[64], q[74]], -30);
constraint int_lin_eq([-5, 3, 1, 3, 4], [q[19], q[35], q[60], q[87], q[89]], 22);
constraint int_lin_eq([-5, 5, -1, -1, -5], [q[18], q[32], q[70], q[74], q[84]], -20);
constraint int_lin_eq([-4, -5, 4, 3, -1], [q[7], q[11], q[76], q[82], q[93]], -4);
constraint int_lin_eq([-4, -2, -1, 1, 4], [q[1], q[25], q[28], q[58], q[98]], 4);
constraint int_lin_eq([-4, 1, 2, 5, 5], [q[27], q[57], q[68], q[71], q[92]], 84);
constraint int_lin_eq([-4, 2, 3, -1, 2], [q[7], q[46], q[67], q[77], q[86]], 30);
constraint int_lin_eq([-4, 2, 4, -3, 3], [q[29], q[32], q[56], q[80], q[85]], -13);
constraint int_lin_eq([-4, 3, 1, 3, 2], [q[11], q[12], q[30], q[44], q[82]], 20);
constraint int_lin_eq([-4, 4, -1, 1, -4], [q[1], q[22], q[29], q[58], q[99]], 3);
constraint int_lin_eq([-4, 4, 1, -4, -4], [q[6], q[36], q[72], q[83], q[84]], -5);
constraint int_lin_eq([-4, 5, -5, 5, -3], [q[15], q[56], q[80], q[93], q[97]], -71);
constraint int_lin_eq([-4, 5, -3, 2, -1], [q[3], q[9], q[34], q[77], q[83]], -30);
constraint int_lin_eq([-4, 5, 1, -2, 2], [q[31], q[33], q[50], q[80], q[86]], -8);
constraint int_lin_eq([-3, -5, 1, 4, -2], [q[11], q[23], q[29], q[44], q[71]], -50);
constraint int_lin_eq([-3, -4, -5, 5, -5], [q[8], q[24], q[53], q[61], q[98]], -53);
constraint int_lin_eq([-3, -4, -4, 3, 1], [q[4], q[9], q[47], q[74], q[100]], -8);
constraint int_lin_eq([-3, -4, -2, -4, 5], [q[30], q[36], q[50], q[80], q[93]], -69);
constraint int_lin_eq([-3, -4, -1, 1, -5], [q[28], q[32], q[78], q[96], q[97]], -88);
constraint int_lin_eq([-3, -3, 3, 1, -5], [q[38], q[40], q[46], q[72], q[79]], -43);
constraint int_lin_eq([-3, -1, -3, -5, -1], [q[18], q[28], q[42], q[61], q[86]], -80);
constraint int_lin_eq([-3, -1, -3, 1, -2], [q[1], q[7], q[49], q[55], q[67]], -31);
constraint int_lin_eq([-3, 2, -3, -3, 5], [q[55], q[65], q[69], q[94], q[99]], -38);
constraint int_lin_eq([-3, 2, 5, -1, -3], [q[4], q[26], q[50], q[53], q[58]], 1);
constraint int_lin_eq([-3, 4, 3, -1, -1], [q[14], q[21], q[50], q[76], q[87]], 8);
constraint int_lin_eq([-3, 5, 5, 4, 5], [q[23], q[40], q[49], q[67], q[91]], 73);
constraint int_lin_eq([-2, -4, -5, 1, -2], [q[4], q[10], q[26], q[53], q[63]], -61);
constraint int_lin_eq([-2, -4, 5, -5, -2], [q[12], q[13], q[32], q[72], q[94]], -45);
constraint int_lin_eq([-2, -2, 1, 5, -5], [q[23], q[35], q[45], q[66], q[96]], -25);
constraint int_lin_eq([-2, -1, -1, 3, -4], [q[19], q[31], q[54], q[88], q[90]], -36);
constraint int_lin_eq([-2, 2, 1, -1, 4], [q[1], q[35], q[48], q[68], q[69]], 48);
constraint int_lin_eq([-2, 4, -3, 1, 1], [q[11], q[39], q[42], q[79], q[90]], -3);
constraint int_lin_eq([-1, -5, -3, -4, -4], [q[29], q[36], q[59], q[63], q[95]], -107);
constraint int_lin_eq([-1, -5, -2, -1, 3], [q[24], q[40], q[42], q[61], q[81]], -6);
constraint int_lin_eq([-1, -4, 3, -4, 4], [q[38], q[53], q[63], q[64], q[75]], -22);
constraint int_lin_eq([-1, -3, -4, -1, -3], [q[7], q[48], q[53], q[62], q[81]], -74);
constraint int_lin_eq([-1, -3, -2, 2, -2], [q[13], q[21], q[52], q[62], q[76]], -44);
constraint int_lin_eq([-1, -3, 4, -3, -2], [q[2], q[39], q[72], q[85], q[99]], -28);
constraint int_lin_eq([-1, -2, -2, 4, -5], [q[3], q[31], q[47], q[68], q[94]], -31);
constraint int_lin_eq([-1, -2, -1, -5, 3], [q[6], q[51], q[52], q[64], q[68]], -39);
constraint int_lin_eq([-1, -2, 2, 2, 5], [q[7], q[14], q[47], q[70], q[89]], 10);
constraint int_lin_eq([-1, -1, -4, -5, -1], [q[6], q[46], q[59], q[90], q[97]], -59);
constraint int_lin_eq([-1, -1, -1, -1, -4], [q[9], q[18], q[37], q[39], q[95]], -45);
constraint int_lin_eq([-1, -1, -1, 5, 4], [q[6], q[14], q[91], q[92], q[94]], 35);
constraint int_lin_eq([-1, 1, -5, 2, -3], [q[18], q[49], q[50], q[51], q[76]], -26);
constraint int_lin_eq([-1, 1, 1, 3, -2], [q[30], q[36], q[66], q[79], q[83]], 24);
constraint int_lin_eq([-1, 3, -4, -4, -1], [q[44], q[56], q[65], q[66], q[70]], -32);
constraint int_lin_eq([-1, 3, 3, -5, 2], [q[22], q[44], q[59], q[65], q[100]], 15);
constraint int_lin_eq([-1, 4, -5, 5, 2], [q[13], q[19], q[22], q[54], q[98]], 41);
constraint int_lin_eq([-1, 4, -1, -2, 5], [q[10], q[25], q[45], q[56], q[69]], 40);
constraint int_lin_eq([-1, 4, 1, -1, -2], [q[19], q[34], q[45], q[65], q[86]], 24);
constraint int_lin_eq([-1, 4, 2, -1, -1], [q[9], q[55], q[93], q[94], q[97]], 1);
constraint int_lin_eq([-1, 5, 3, 3, 4], [q[20], q[51], q[52], q[76], q[81]], 99);
constraint int_lin_eq([1, -5, 2, -4, -4], [q[3], q[14], q[78], q[82], q[96]], -66);
constraint int_lin_eq([1, -5, 2, 3, 2], [q[17], q[24], q[47], q[49], q[75]], 21);
constraint int_lin_eq([1, -3, -1, 5, 4], [q[12], q[17], q[21], q[64], q[84]], 52);
constraint int_lin_eq([1, -1, -1, 2, 3], [q[13], q[29], q[40], q[46], q[54]], 25);
constraint int_lin_eq([1, -1, 2, 1, -4], [q[8], q[17], q[21], q[40], q[41]], -10);
constraint int_lin_eq([1, -1, 2, 1, 2], [q[23], q[70], q[90], q[91], q[98]], 22);
constraint int_lin_eq([1, 1, -5, -3, -4], [q[7], q[27], q[66], q[77], q[98]], -47);
constraint int_lin_eq([1, 2, -5, -1, 5], [q[19], q[55], q[67], q[73], q[95]], -1);
constraint int_lin_eq([1, 2, -1, -1, -4], [q[5], q[37], q[42], q[88], q[90]], 5);
constraint int_lin_eq([1, 2, 1, 4, 4], [q[16], q[20], q[42], q[71], q[91]], 74);
constraint int_lin_eq([1, 2, 3, -1, 1], [q[16], q[25], q[31], q[38], q[88]], 31);
constraint int_lin_eq([1, 3, -4, -1, 1], [q[33], q[38], q[42], q[60], q[68]], 1);
constraint int_lin_eq([1, 3, -1, 2, 3], [q[2], q[32], q[39], q[68], q[82]], 56);
constraint int_lin_eq([1, 3, 5, 3, 1], [q[2], q[13], q[67], q[73], q[86]], 81);
constraint int_lin_eq([1, 4, -1, 2, -2], [q[34], q[35], q[58], q[66], q[99]], 41);
constraint int_lin_eq([1, 5, 5, 5, -4], [q[3], q[27], q[38], q[75], q[85]], 77);
constraint int_lin_eq([2, -4, -1, -4, 5], [q[24], q[52], q[54], q[59], q[74]], -7);
constraint int_lin_eq([2, -3, -2, -2, 2], [q[2], q[28], q[77], q[78], q[97]], -22);
constraint int_lin_eq([2, -2, -5, -1, -1], [q[12], q[35], q[51], q[58], q[94]], -51);
constraint int_lin_eq([2, -1, 2, 5, -2], [q[2], q[4], q[10], q[43], q[51]], 20);
constraint int_lin_eq([2, 1, -5, -4, 1], [q[1], q[33], q[65], q[69], q[87]], -37);
constraint int_lin_eq([2, 1, -3, 1, 2], [q[34], q[62], q[78], q[92], q[95]], 24);
constraint int_lin_eq([2, 1, -1, -4, -1], [q[5], q[8], q[26], q[89], q[100]], 4);
constraint int_lin_eq([2, 2, -4, 1, -1], [q[4], q[33], q[37], q[41], q[85]], -12);
constraint int_lin_eq([2, 3, -3, 1, -1], [q[3], q[15], q[17], q[78], q[89]], 40);
constraint int_lin_eq([2, 3, 5, 4, -4], [q[21], q[55], q[57], q[63], q[84]], 62);
constraint int_lin_eq([2, 5, -1, 4, -1], [q[25], q[37], q[49], q[70], q[79]], 55);
constraint int_lin_eq([2, 5, 2, -2, -5], [q[5], q[28], q[43], q[56], q[95]], 42);
constraint int_lin_eq([3, -5, -4, -3, -2], [q[1], q[26], q[73], q[91], q[96]], -63);
constraint int_lin_eq([3, -3, -1, -4, 4], [q[8], q[9], q[77], q[84], q[93]], -1);
constraint int_lin_eq([3, -2, -4, -1, 3], [q[31], q[65], q[73], q[85], q[88]], 1);
constraint int_lin_eq([3, -2, -3, 2, 5], [q[8], q[19], q[45], q[71], q[93]], 19);
constraint int_lin_eq([3, -2, -3, 5, 3], [q[2], q[12], q[24], q[43], q[48]], 22);
constraint int_lin_eq([3, -2, 5, -2, 5], [q[10], q[22], q[39], q[43], q[57]], 90);
constraint int_lin_eq([3, 1, 4, -3, -1], [q[45], q[61], q[62], q[70], q[91]], 12);
constraint int_lin_eq([3, 1, 4, -1, 3], [q[15], q[28], q[30], q[60], q[95]], 74);
constraint int_lin_eq([3, 3, -5, 1, -1], [q[25], q[26], q[60], q[63], q[71]], -22);
constraint int_lin_eq([3, 3, 1, -3, 3], [q[9], q[16], q[20], q[47], q[81]], 49);
constraint int_lin_eq([3, 4, 3, -3, 1], [q[16], q[67], q[72], q[84], q[88]], 46);
constraint int_lin_eq([3, 5, 4, -4, -2], [q[5], q[6], q[12], q[80], q[97]], 36);
constraint int_lin_eq([4, -5, -2, -3, -3], [q[14], q[33], q[85], q[92], q[99]], -38);
constraint int_lin_eq([4, -4, -5, -2, -5], [q[22], q[31], q[48], q[54], q[87]], -99);
constraint int_lin_eq([4, -3, -5, 3, -2], [q[29], q[46], q[57], q[58], q[59]], -50);
constraint int_lin_eq([4, -1, -5, -5, 3], [q[37], q[41], q[57], q[63], q[88]], -34);
constraint int_lin_eq([4, -1, -5, -3, 3], [q[22], q[54], q[72], q[89], q[99]], -6);
constraint int_lin_eq([4, -1, -3, 4, 2], [q[20], q[41], q[55], q[60], q[83]], 29);
constraint int_lin_eq([4, 1, -3, 3, -2], [q[15], q[18], q[34], q[36], q[79]], 27);
constraint int_lin_eq([4, 1, -1, -1, -1], [q[20], q[44], q[59], q[64], q[100]], -14);
constraint int_lin_eq([4, 5, -1, -4, -1], [q[13], q[41], q[49], q[83], q[100]], 42);
constraint int_lin_eq([5, -4, -4, -4, -1], [q[27], q[60], q[61], q[78], q[92]], -75);
constraint int_lin_eq([5, -4, -1, 4, -4], [q[47], q[52], q[73], q[74], q[81]], -11);
constraint int_lin_eq([5, -3, 2, -3, 3], [q[14], q[24], q[32], q[48], q[82]], 40);
constraint int_lin_eq([5, -1, 1, 2, 5], [q[11], q[17], q[33], q[75], q[96]], 97);
constraint int_lin_eq([5, -1, 5, 3, 3], [q[8], q[10], q[18], q[57], q[69]], 89);
constraint int_lin_eq([5, 1, 4, 3, 5], [q[23], q[30], q[39], q[77], q[87]], 102);
constraint int_lin_eq([5, 3, -4, 2, 3], [q[3], q[17], q[46], q[80], q[100]], 51);
solve  :: int_search(q, first_fail, indomain_min, complete) satisfy;
