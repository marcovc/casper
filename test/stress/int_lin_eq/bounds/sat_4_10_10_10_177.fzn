predicate all_different_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate lex_lesseq_int(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..30] of var 1..10: q :: output_array([1..30]);
constraint int_lin_eq([-3, 5, -5, -9, 6, 10, -9, -6, 5, -6], [q[3], q[5], q[8], q[9], q[10], q[13], q[19], q[22], q[24], q[27]], -92);
constraint int_lin_eq([4, -1, -6, 3, 1, 7, -5, -10, 10, -2], [q[1], q[2], q[6], q[7], q[14], q[15], q[16], q[23], q[28], q[29]], -10);
constraint int_lin_eq([5, -4, -10, -7, -6, -9, 9, -5, 4, -9], [q[1], q[9], q[14], q[16], q[17], q[19], q[22], q[23], q[24], q[29]], -141);
constraint int_lin_eq([7, -5, -8, 6, 5, 7, -4, 9, 10, -1], [q[4], q[11], q[12], q[17], q[18], q[20], q[21], q[25], q[26], q[30]], 71);
solve  :: int_search(q, first_fail, indomain_min, complete) satisfy;
