predicate all_different_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate lex_lesseq_int(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..30] of var 1..10: q :: output_array([1..30]);
constraint int_lin_eq([-6, 6, -3, -1, 9, 10, 4, -4, -10, 9], [q[1], q[4], q[7], q[10], q[11], q[13], q[14], q[15], q[24], q[28]], 44);
constraint int_lin_eq([1, 2, 1, -10, 8, -5, -4, -10, -5, 8], [q[2], q[3], q[5], q[8], q[18], q[21], q[23], q[26], q[27], q[29]], -158);
constraint int_lin_eq([7, -8, 4, -8, -10, 5, -8, 5, -9, -2], [q[6], q[9], q[12], q[16], q[17], q[19], q[20], q[22], q[25], q[30]], -49);
constraint int_lin_eq([7, 2, -1, -4, -5, 10, -2, 6, 2, 4], [q[1], q[6], q[8], q[10], q[15], q[19], q[21], q[22], q[25], q[27]], 108);
solve  :: int_search(q, first_fail, indomain_min, complete) satisfy;
