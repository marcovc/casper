predicate all_different_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate lex_lesseq_int(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..30] of var 1..10: q :: output_array([1..30]);
constraint int_lin_eq([-1, -9, 3, 2, 2, 1, 3, -7, 7, -1], [q[1], q[3], q[4], q[5], q[12], q[17], q[21], q[26], q[27], q[28]], -35);
constraint int_lin_eq([-1, -6, 10, -6, -6, -9, 9, 10, 6, 10], [q[4], q[6], q[7], q[11], q[13], q[15], q[16], q[18], q[20], q[24]], 52);
constraint int_lin_eq([4, -1, 9, -3, -10, -5, -8, 4, -10, -3], [q[1], q[3], q[9], q[10], q[12], q[17], q[25], q[26], q[28], q[29]], -64);
constraint int_lin_eq([7, 5, 6, -1, 9, 4, -2, 6, 8, 2], [q[2], q[5], q[8], q[14], q[19], q[21], q[22], q[23], q[27], q[30]], 226);
solve  :: int_search(q, first_fail, indomain_min, complete) satisfy;
