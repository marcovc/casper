predicate all_different_int(array [int] of var int: x);
predicate all_equal_int(array [int] of var int: x);
predicate among(var int: n, array [int] of var int: x, set of int: v);
predicate array_int_lq(array [int] of var int: x, array [int] of var int: y);
predicate array_int_lt(array [int] of var int: x, array [int] of var int: y);
predicate array_set_partition(array [int] of var set of int: S, set of int: universe);
predicate at_least_int(int: n, array [int] of var int: x, int: v);
predicate at_most_int(int: n, array [int] of var int: x, int: v);
predicate bool_lin_ge(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_gt(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_lt(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_ne(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate cumulatives(array [int] of var int: s, array [int] of var int: d, array [int] of var int: r, var int: b);
predicate decreasing_bool(array [int] of var bool: x);
predicate decreasing_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate gecode_array_set_element_union(var set of int: x, array [int] of var set of int: y, var set of int: z);
predicate gecode_bin_packing_load(array [int] of var int: l, array [int] of var int: bin, array [int] of int: w, int: minIndex);
predicate gecode_circuit(array [int] of var int: x);
predicate gecode_int_set_channel(array [int] of var int: x, int: xoff, array [int] of var set of int: y, int: yoff);
predicate gecode_link_set_to_booleans(var set of int: s, array [int] of var bool: b, int: idx);
predicate gecode_member_bool_reif(array [int] of var bool: x, var bool: y, var bool: b);
predicate gecode_member_int_reif(array [int] of var int: x, var int: y, var bool: b);
predicate gecode_nooverlap(array [int] of var int: x, array [int] of var int: w, array [int] of var int: y, array [int] of var int: h);
predicate gecode_range(array [int] of var int: x, int: xoff, var set of int: s, var set of int: t);
predicate gecode_set_weights(array [int] of int: csi, array [int] of int: cs, var set of int: x, var int: y);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate global_cardinality_closed(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate global_cardinality_low_up(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate global_cardinality_low_up_closed(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate increasing_bool(array [int] of var bool: x);
predicate increasing_int(array [int] of var int: x);
predicate inverse_offsets(array [int] of var int: f, int: foff, array [int] of var int: invf, int: invfoff);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate member_bool(array [int] of var bool: x, var bool: y);
predicate member_int(array [int] of var int: x, var int: y);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate nvalue(var int: n, array [int] of var int: x);
predicate regular(array [int] of var int: x, int: Q, int: S, array [int, int] of int: d, int: q0, set of int: F);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..100] of var 1..10: q :: output_array([1..100]);
constraint int_lin_eq([-5, -5, -1, -1, -3], [q[35], q[41], q[51], q[70], q[87]], -99);
constraint int_lin_eq([-5, -5, 2, 2, -4], [q[37], q[52], q[58], q[80], q[84]], -36);
constraint int_lin_eq([-5, 2, -2, -5, -5], [q[28], q[52], q[71], q[85], q[92]], -92);
constraint int_lin_eq([-5, 2, -1, -1, -5], [q[8], q[17], q[20], q[95], q[99]], -71);
constraint int_lin_eq([-5, 2, 4, -2, 4], [q[4], q[50], q[65], q[72], q[92]], 52);
constraint int_lin_eq([-5, 3, -4, -2, 2], [q[2], q[32], q[46], q[55], q[82]], -47);
constraint int_lin_eq([-5, 3, -2, -2, -5], [q[2], q[53], q[75], q[77], q[94]], -76);
constraint int_lin_eq([-5, 3, 1, -1, -3], [q[6], q[30], q[40], q[41], q[69]], -24);
constraint int_lin_eq([-5, 4, -1, -3, -1], [q[16], q[22], q[26], q[43], q[100]], -39);
constraint int_lin_eq([-5, 5, -3, -3, 3], [q[8], q[36], q[73], q[91], q[92]], -14);
constraint int_lin_eq([-4, -4, -5, -2, 5], [q[11], q[29], q[45], q[81], q[82]], -59);
constraint int_lin_eq([-4, -2, -2, -1, -1], [q[5], q[7], q[9], q[23], q[51]], -51);
constraint int_lin_eq([-4, -2, 1, -1, 3], [q[41], q[44], q[48], q[54], q[84]], -26);
constraint int_lin_eq([-4, -1, -2, -2, -1], [q[18], q[50], q[70], q[75], q[95]], -64);
constraint int_lin_eq([-4, -1, -2, 1, 1], [q[3], q[10], q[40], q[89], q[94]], -12);
constraint int_lin_eq([-4, -1, 3, 2, -1], [q[21], q[27], q[49], q[58], q[99]], -11);
constraint int_lin_eq([-4, -1, 3, 3, -1], [q[7], q[13], q[30], q[56], q[77]], 10);
constraint int_lin_eq([-4, 4, -2, -2, -4], [q[14], q[18], q[22], q[24], q[25]], -64);
constraint int_lin_eq([-4, 5, 5, 3, -4], [q[25], q[26], q[34], q[48], q[96]], 39);
constraint int_lin_eq([-3, -5, -3, 3, -3], [q[8], q[11], q[41], q[95], q[98]], -59);
constraint int_lin_eq([-3, -2, 3, 1, -1], [q[42], q[52], q[54], q[58], q[86]], -14);
constraint int_lin_eq([-3, -1, -4, -2, -5], [q[38], q[45], q[49], q[56], q[71]], -52);
constraint int_lin_eq([-3, -1, -3, 2, -3], [q[2], q[40], q[67], q[89], q[98]], -44);
constraint int_lin_eq([-3, -1, 1, -3, -2], [q[4], q[14], q[68], q[90], q[99]], -29);
constraint int_lin_eq([-3, -1, 2, 1, -4], [q[5], q[23], q[46], q[85], q[92]], -44);
constraint int_lin_eq([-3, -1, 2, 5, 2], [q[3], q[8], q[20], q[61], q[84]], 38);
constraint int_lin_eq([-3, -1, 3, 2, -3], [q[11], q[23], q[56], q[87], q[88]], -3);
constraint int_lin_eq([-3, 1, -2, -2, 4], [q[16], q[33], q[96], q[97], q[98]], -38);
constraint int_lin_eq([-3, 1, 5, -1, -3], [q[10], q[36], q[50], q[58], q[98]], 27);
constraint int_lin_eq([-3, 2, 4, -5, -2], [q[17], q[52], q[74], q[77], q[80]], -18);
constraint int_lin_eq([-3, 3, 2, 2, -4], [q[42], q[46], q[69], q[75], q[93]], -4);
constraint int_lin_eq([-3, 4, -1, 1, 2], [q[4], q[21], q[34], q[40], q[71]], 3);
constraint int_lin_eq([-3, 5, 1, -1, 4], [q[9], q[21], q[29], q[55], q[73]], 36);
constraint int_lin_eq([-2, -5, 1, -1, 3], [q[6], q[67], q[77], q[79], q[94]], -39);
constraint int_lin_eq([-2, -5, 3, -2, 1], [q[11], q[31], q[46], q[55], q[90]], -45);
constraint int_lin_eq([-2, -3, 1, 3, 1], [q[47], q[60], q[75], q[91], q[99]], 10);
constraint int_lin_eq([-2, -1, -3, -1, -4], [q[20], q[27], q[30], q[33], q[85]], -51);
constraint int_lin_eq([-2, 1, -5, 2, 1], [q[28], q[50], q[88], q[89], q[97]], 0);
constraint int_lin_eq([-2, 1, -1, -4, -2], [q[9], q[53], q[65], q[87], q[97]], -43);
constraint int_lin_eq([-2, 1, -1, 2, -1], [q[35], q[36], q[59], q[74], q[96]], -6);
constraint int_lin_eq([-2, 1, 4, 5, -3], [q[13], q[16], q[24], q[31], q[53]], 50);
constraint int_lin_eq([-2, 2, 2, 2, -3], [q[26], q[65], q[74], q[89], q[99]], 6);
constraint int_lin_eq([-1, -5, -2, -1, 2], [q[11], q[21], q[30], q[79], q[97]], -32);
constraint int_lin_eq([-1, -5, -1, 1, 1], [q[10], q[30], q[54], q[94], q[97]], -42);
constraint int_lin_eq([-1, -5, 5, -5, -2], [q[14], q[34], q[45], q[60], q[71]], -27);
constraint int_lin_eq([-1, -5, 5, -3, 1], [q[15], q[17], q[23], q[61], q[78]], 3);
constraint int_lin_eq([-1, -4, -5, 4, -2], [q[14], q[25], q[48], q[50], q[95]], -25);
constraint int_lin_eq([-1, -3, -5, -1, -1], [q[24], q[34], q[41], q[49], q[51]], -79);
constraint int_lin_eq([-1, -2, -1, -2, -1], [q[1], q[12], q[31], q[39], q[48]], -41);
constraint int_lin_eq([-1, -2, 4, -1, -5], [q[10], q[32], q[46], q[52], q[68]], -36);
constraint int_lin_eq([-1, -1, -3, -5, -1], [q[41], q[42], q[48], q[62], q[88]], -60);
constraint int_lin_eq([-1, -1, 5, 5, -1], [q[47], q[63], q[70], q[76], q[90]], 50);
constraint int_lin_eq([-1, 2, -1, -1, -3], [q[1], q[14], q[29], q[44], q[90]], 2);
constraint int_lin_eq([-1, 2, 1, 2, 5], [q[38], q[58], q[62], q[72], q[82]], 39);
constraint int_lin_eq([-1, 2, 1, 4, -1], [q[7], q[74], q[80], q[84], q[86]], 19);
constraint int_lin_eq([-1, 2, 3, -1, 1], [q[2], q[29], q[32], q[55], q[58]], 10);
constraint int_lin_eq([-1, 2, 5, -2, 4], [q[9], q[13], q[15], q[62], q[100]], 76);
constraint int_lin_eq([-1, 2, 5, 5, -2], [q[15], q[17], q[74], q[79], q[96]], 30);
constraint int_lin_eq([-1, 3, -2, -1, 2], [q[1], q[6], q[11], q[28], q[63]], -5);
constraint int_lin_eq([-1, 5, -4, -4, 5], [q[7], q[13], q[19], q[32], q[77]], -1);
constraint int_lin_eq([1, -4, -2, 1, -3], [q[6], q[73], q[76], q[83], q[93]], -47);
constraint int_lin_eq([1, -3, -5, 2, 1], [q[43], q[59], q[68], q[76], q[81]], -33);
constraint int_lin_eq([1, -2, -2, -3, -1], [q[1], q[70], q[80], q[91], q[100]], -48);
constraint int_lin_eq([1, -2, 1, -1, 3], [q[19], q[22], q[35], q[45], q[93]], 14);
constraint int_lin_eq([1, -1, 4, -4, -4], [q[25], q[33], q[66], q[78], q[86]], -23);
constraint int_lin_eq([1, 2, -2, -3, -5], [q[19], q[31], q[35], q[43], q[89]], -28);
constraint int_lin_eq([1, 5, 3, -4, 5], [q[24], q[81], q[86], q[88], q[90]], 55);
constraint int_lin_eq([2, -4, 1, -2, -2], [q[5], q[15], q[57], q[68], q[91]], -43);
constraint int_lin_eq([2, -4, 4, -1, 4], [q[3], q[12], q[37], q[54], q[61]], 19);
constraint int_lin_eq([2, -3, -1, -1, -1], [q[18], q[28], q[38], q[45], q[71]], -38);
constraint int_lin_eq([2, -3, -1, 3, -4], [q[33], q[67], q[74], q[78], q[98]], -19);
constraint int_lin_eq([2, -1, -4, 1, -4], [q[32], q[47], q[66], q[67], q[72]], -44);
constraint int_lin_eq([2, -1, 4, 4, -1], [q[14], q[62], q[79], q[81], q[83]], 25);
constraint int_lin_eq([2, 1, 1, 5, -1], [q[7], q[25], q[47], q[78], q[87]], 27);
constraint int_lin_eq([2, 1, 4, -1, 4], [q[12], q[43], q[51], q[57], q[66]], 65);
constraint int_lin_eq([2, 2, 3, -1, -1], [q[12], q[29], q[59], q[83], q[85]], 9);
constraint int_lin_eq([2, 3, -1, 1, -1], [q[8], q[26], q[51], q[84], q[94]], 12);
constraint int_lin_eq([2, 3, 5, 5, 3], [q[6], q[22], q[36], q[65], q[86]], 116);
constraint int_lin_eq([2, 4, -1, 1, -1], [q[4], q[5], q[23], q[26], q[61]], 11);
constraint int_lin_eq([2, 5, -1, 2, 3], [q[38], q[39], q[59], q[68], q[95]], 90);
constraint int_lin_eq([3, -4, -1, 3, 3], [q[1], q[15], q[62], q[67], q[92]], 15);
constraint int_lin_eq([3, -2, 4, -1, 4], [q[18], q[63], q[71], q[73], q[100]], 34);
constraint int_lin_eq([3, -2, 4, 3, -1], [q[30], q[64], q[67], q[72], q[79]], 57);
constraint int_lin_eq([3, -1, 5, 5, -3], [q[21], q[28], q[36], q[47], q[91]], 38);
constraint int_lin_eq([3, 1, -1, 3, 2], [q[10], q[12], q[37], q[72], q[98]], 36);
constraint int_lin_eq([3, 2, 1, 3, 5], [q[35], q[42], q[43], q[68], q[76]], 65);
constraint int_lin_eq([3, 5, -1, -1, -4], [q[27], q[64], q[80], q[82], q[88]], 37);
constraint int_lin_eq([3, 5, 1, 1, -1], [q[17], q[18], q[34], q[35], q[57]], 38);
constraint int_lin_eq([3, 5, 4, -4, -1], [q[36], q[37], q[59], q[65], q[81]], 0);
constraint int_lin_eq([4, -5, -1, -5, -1], [q[1], q[10], q[48], q[56], q[75]], -51);
constraint int_lin_eq([4, -5, 1, 4, 2], [q[27], q[44], q[53], q[60], q[85]], 1);
constraint int_lin_eq([4, -5, 4, -1, -4], [q[20], q[54], q[84], q[93], q[95]], -36);
constraint int_lin_eq([4, -4, 2, 3, 2], [q[8], q[31], q[44], q[53], q[61]], 28);
constraint int_lin_eq([4, -4, 3, 4, 4], [q[2], q[20], q[55], q[90], q[99]], 71);
constraint int_lin_eq([4, -2, -1, -3, -1], [q[44], q[63], q[69], q[78], q[86]], -19);
constraint int_lin_eq([4, -1, 2, -3, 3], [q[33], q[39], q[44], q[66], q[93]], 17);
constraint int_lin_eq([4, -1, 5, 3, -2], [q[4], q[16], q[22], q[24], q[60]], 58);
constraint int_lin_eq([4, 1, -1, 3, 3], [q[9], q[21], q[49], q[69], q[76]], 37);
constraint int_lin_eq([4, 2, -5, 1, -1], [q[38], q[51], q[66], q[69], q[93]], -9);
constraint int_lin_eq([4, 2, -1, -1, 5], [q[16], q[33], q[52], q[57], q[75]], 90);
constraint int_lin_eq([4, 4, -5, -5, -5], [q[34], q[47], q[73], q[91], q[94]], -24);
constraint int_lin_eq([4, 5, -1, 1, -5], [q[3], q[6], q[61], q[64], q[82]], 24);
constraint int_lin_eq([5, -5, -2, -2, -5], [q[27], q[28], q[49], q[60], q[64]], -101);
constraint int_lin_eq([5, -5, -1, -2, -1], [q[19], q[32], q[73], q[79], q[96]], -13);
constraint int_lin_eq([5, -5, -1, 5, -5], [q[20], q[31], q[39], q[53], q[56]], -20);
constraint int_lin_eq([5, -4, -1, 1, 3], [q[5], q[39], q[56], q[70], q[92]], 13);
constraint int_lin_eq([5, -4, 2, 3, 1], [q[13], q[70], q[78], q[83], q[100]], 36);
constraint int_lin_eq([5, -1, -3, -4, -1], [q[29], q[63], q[85], q[87], q[97]], -23);
constraint int_lin_eq([5, -1, 2, 1, 2], [q[2], q[4], q[40], q[54], q[64]], 66);
constraint int_lin_eq([5, -1, 4, -2, 4], [q[3], q[42], q[55], q[83], q[87]], 55);
constraint int_lin_eq([5, 1, -1, -2, 2], [q[19], q[22], q[37], q[57], q[65]], 57);
constraint int_lin_eq([5, 3, -5, 1, 2], [q[25], q[27], q[42], q[83], q[89]], 4);
solve  :: int_search(q, first_fail, indomain_min, complete) satisfy;
