predicate all_different_int(array [int] of var int: x);
predicate all_equal_int(array [int] of var int: x);
predicate among(var int: n, array [int] of var int: x, set of int: v);
predicate array_int_lq(array [int] of var int: x, array [int] of var int: y);
predicate array_int_lt(array [int] of var int: x, array [int] of var int: y);
predicate array_set_partition(array [int] of var set of int: S, set of int: universe);
predicate at_least_int(int: n, array [int] of var int: x, int: v);
predicate at_most_int(int: n, array [int] of var int: x, int: v);
predicate bool_lin_ge(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_gt(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_lt(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_ne(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate cumulatives(array [int] of var int: s, array [int] of var int: d, array [int] of var int: r, var int: b);
predicate decreasing_bool(array [int] of var bool: x);
predicate decreasing_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate gecode_array_set_element_union(var set of int: x, array [int] of var set of int: y, var set of int: z);
predicate gecode_bin_packing_load(array [int] of var int: l, array [int] of var int: bin, array [int] of int: w, int: minIndex);
predicate gecode_circuit(array [int] of var int: x);
predicate gecode_int_set_channel(array [int] of var int: x, int: xoff, array [int] of var set of int: y, int: yoff);
predicate gecode_link_set_to_booleans(var set of int: s, array [int] of var bool: b, int: idx);
predicate gecode_member_bool_reif(array [int] of var bool: x, var bool: y, var bool: b);
predicate gecode_member_int_reif(array [int] of var int: x, var int: y, var bool: b);
predicate gecode_nooverlap(array [int] of var int: x, array [int] of var int: w, array [int] of var int: y, array [int] of var int: h);
predicate gecode_range(array [int] of var int: x, int: xoff, var set of int: s, var set of int: t);
predicate gecode_set_weights(array [int] of int: csi, array [int] of int: cs, var set of int: x, var int: y);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate global_cardinality_closed(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate global_cardinality_low_up(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate global_cardinality_low_up_closed(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate increasing_bool(array [int] of var bool: x);
predicate increasing_int(array [int] of var int: x);
predicate inverse_offsets(array [int] of var int: f, int: foff, array [int] of var int: invf, int: invfoff);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate member_bool(array [int] of var bool: x, var bool: y);
predicate member_int(array [int] of var int: x, var int: y);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate nvalue(var int: n, array [int] of var int: x);
predicate regular(array [int] of var int: x, int: Q, int: S, array [int, int] of int: d, int: q0, set of int: F);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..160] of var -24..25: q :: output_array([1..160]);
constraint int_eq(-22, q[53]);
constraint int_eq(-13, q[93]);
constraint int_eq(-9, q[116]);
constraint int_eq(0, q[58]);
constraint int_eq(16, q[59]);
constraint int_lin_eq([-8, -10, -7, 7, -10, -6, -9, 1, -1, -8, 6, -1, -4, -9, 4, 8, 10, -3, 4, -3, 10, 10, -1, -5, -8, -1, -5, -3, -10, 7, 3, 8, 7, -2, -7, 1, -3, -5, 4, -7, -4, 9, 8, -1, 5, -5, 6, -2, -6, -6, -2, 8, -5, 8, 6, -3, -7, -3, -4, -10, 1, -2, 6, 1, -8, 3, -1, -2, 2, 3, -1, 4, -1, -2, -5, -9, -7, -7, -7, 7, 1, -2, -10, -2, 9, 7, 2, 9, 7, 2, 6, 5, 5, 1, 10, -5, -10, 8, -5, 3], [q[1], q[3], q[5], q[6], q[7], q[8], q[9], q[11], q[13], q[14], q[15], q[17], q[18], q[19], q[20], q[22], q[23], q[24], q[26], q[28], q[31], q[35], q[37], q[39], q[42], q[43], q[44], q[46], q[47], q[48], q[49], q[52], q[54], q[55], q[60], q[61], q[62], q[64], q[65], q[66], q[67], q[68], q[69], q[71], q[74], q[75], q[77], q[78], q[82], q[83], q[86], q[88], q[89], q[90], q[91], q[92], q[95], q[98], q[99], q[100], q[101], q[102], q[104], q[105], q[106], q[107], q[109], q[110], q[112], q[114], q[115], q[117], q[120], q[121], q[122], q[123], q[124], q[126], q[128], q[129], q[130], q[131], q[132], q[133], q[135], q[140], q[141], q[142], q[143], q[145], q[146], q[147], q[149], q[152], q[153], q[154], q[156], q[157], q[158], q[159]], -880);
constraint int_lin_eq([-1, -6, 3, 5, -1, 8, 1, 3, -6, -2, 8, -3, 6, -9, -1, 7, -5, 7, 1, 10, -2, -1, 2, -10, 8, 5, -8, 8, -1, -4, 10, 3, 4, -7, 5, -10, 3, -1, -6, 7, 4, -7, -3, -7, 1, -2, 4, 7, -5, -7, 6, -5, -5, 4, -5, -2, 7, 6, 2, -8, -6, -2, -10, -1, -8, -1, 7, 5, 7, 9, -3, -7, -3, -7, 4, -5, -6, -8, -8, -1, 9, 4, 5, 10, -3, -4, 9, -5, 9, -1, -2, -3, 8, 3, -10, 4, -3, -8, -6, -9], [q[1], q[2], q[3], q[4], q[6], q[7], q[8], q[9], q[10], q[11], q[14], q[15], q[17], q[18], q[22], q[23], q[24], q[26], q[28], q[29], q[30], q[35], q[38], q[39], q[40], q[41], q[42], q[43], q[44], q[45], q[46], q[47], q[48], q[50], q[51], q[55], q[56], q[57], q[61], q[64], q[65], q[66], q[67], q[68], q[69], q[70], q[71], q[73], q[75], q[77], q[78], q[79], q[80], q[81], q[82], q[83], q[87], q[91], q[92], q[95], q[96], q[99], q[100], q[101], q[104], q[105], q[106], q[107], q[108], q[109], q[111], q[112], q[113], q[114], q[117], q[118], q[120], q[122], q[125], q[126], q[127], q[132], q[134], q[135], q[136], q[137], q[138], q[139], q[140], q[143], q[144], q[145], q[147], q[148], q[149], q[150], q[151], q[153], q[154], q[158]], 85);
constraint int_lin_eq([3, 6, 3, 4, -6, 2, 2, 8, -1, 3, 6, -2, 9, -1, -3, 8, -9, 1, -2, 1, 10, 2, 6, -8, -2, 3, 3, 6, -9, 3, 2, -1, -8, -9, 4, -1, 2, 9, 9, 8, -6, -1, -4, 5, 5, 2, 7, -2, 2, -9, 7, 4, -1, -5, -1, 9, 6, -7, -9, 3, -3, -5, -10, 8, 5, -5, -7, -4, -4, -7, -1, -7, 9, -3, -8, 6, 1, 5, -2, 2, -6, 7, 1, -2, 4, -7, 1, 9, 6, 2, -8, -8, -4, -4, 8, -8, 6, -8, 1, 9], [q[2], q[3], q[4], q[6], q[8], q[10], q[11], q[12], q[13], q[14], q[16], q[17], q[19], q[21], q[24], q[26], q[28], q[29], q[30], q[32], q[33], q[34], q[35], q[36], q[37], q[39], q[41], q[42], q[43], q[46], q[47], q[48], q[49], q[52], q[55], q[56], q[57], q[61], q[63], q[64], q[65], q[66], q[67], q[69], q[70], q[72], q[73], q[74], q[75], q[76], q[77], q[78], q[81], q[82], q[83], q[85], q[88], q[89], q[90], q[92], q[94], q[96], q[97], q[98], q[99], q[100], q[101], q[103], q[106], q[107], q[110], q[111], q[112], q[113], q[114], q[120], q[121], q[123], q[124], q[126], q[131], q[132], q[133], q[135], q[137], q[138], q[139], q[141], q[142], q[146], q[147], q[148], q[149], q[150], q[151], q[154], q[156], q[157], q[159], q[160]], 1551);
constraint int_lin_eq([10, -5, 10, -9, -6, -7, -8, -3, -6, -7, 5, -1, -1, 7, -5, -1, 1, -4, -1, -1, 4, 7, -3, -6, 7, -3, -5, -3, -10, -9, 1, 5, -8, 5, 6, -10, 9, 9, -10, 2, 3, -1, -2, 8, 4, -3, -2, -9, 2, -1, -6, 7, 6, -1, -4, 3, 8, 5, -7, 5, 7, -2, 2, -4, 2, -7, 4, 6, -3, 5, 3, 10, -7, 4, 10, 4, -5, 4, 7, 10, 7, 5, 8, 10, -1, 5, -1, 7, 7, -7, -1, 6, 5, 3, 1, 9, 7, 1, 5, -4], [q[1], q[2], q[3], q[4], q[7], q[9], q[13], q[14], q[15], q[16], q[18], q[19], q[21], q[22], q[23], q[24], q[25], q[26], q[27], q[28], q[29], q[30], q[31], q[34], q[35], q[38], q[39], q[40], q[42], q[43], q[44], q[45], q[47], q[49], q[54], q[55], q[62], q[63], q[64], q[67], q[68], q[69], q[70], q[72], q[75], q[76], q[78], q[80], q[82], q[84], q[86], q[89], q[91], q[92], q[94], q[95], q[97], q[98], q[100], q[101], q[102], q[104], q[105], q[108], q[111], q[112], q[113], q[114], q[115], q[117], q[118], q[119], q[120], q[121], q[122], q[124], q[125], q[127], q[129], q[130], q[132], q[133], q[134], q[135], q[136], q[137], q[139], q[141], q[143], q[146], q[149], q[150], q[151], q[152], q[153], q[154], q[155], q[157], q[158], q[160]], 64);
solve  :: int_search(q, first_fail, indomain_min, complete) satisfy;
