predicate all_different_int(array [int] of var int: x);
predicate all_equal_int(array [int] of var int: x);
predicate among(var int: n, array [int] of var int: x, set of int: v);
predicate array_int_lq(array [int] of var int: x, array [int] of var int: y);
predicate array_int_lt(array [int] of var int: x, array [int] of var int: y);
predicate array_set_partition(array [int] of var set of int: S, set of int: universe);
predicate at_least_int(int: n, array [int] of var int: x, int: v);
predicate at_most_int(int: n, array [int] of var int: x, int: v);
predicate bool_lin_ge(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_gt(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_lt(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_ne(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate cumulatives(array [int] of var int: s, array [int] of var int: d, array [int] of var int: r, var int: b);
predicate decreasing_bool(array [int] of var bool: x);
predicate decreasing_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate gecode_array_set_element_union(var set of int: x, array [int] of var set of int: y, var set of int: z);
predicate gecode_bin_packing_load(array [int] of var int: l, array [int] of var int: bin, array [int] of int: w, int: minIndex);
predicate gecode_circuit(array [int] of var int: x);
predicate gecode_int_set_channel(array [int] of var int: x, int: xoff, array [int] of var set of int: y, int: yoff);
predicate gecode_link_set_to_booleans(var set of int: s, array [int] of var bool: b, int: idx);
predicate gecode_member_bool_reif(array [int] of var bool: x, var bool: y, var bool: b);
predicate gecode_member_int_reif(array [int] of var int: x, var int: y, var bool: b);
predicate gecode_nooverlap(array [int] of var int: x, array [int] of var int: w, array [int] of var int: y, array [int] of var int: h);
predicate gecode_range(array [int] of var int: x, int: xoff, var set of int: s, var set of int: t);
predicate gecode_set_weights(array [int] of int: csi, array [int] of int: cs, var set of int: x, var int: y);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate global_cardinality_closed(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate global_cardinality_low_up(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate global_cardinality_low_up_closed(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate increasing_bool(array [int] of var bool: x);
predicate increasing_int(array [int] of var int: x);
predicate inverse_offsets(array [int] of var int: f, int: foff, array [int] of var int: invf, int: invfoff);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate member_bool(array [int] of var bool: x, var bool: y);
predicate member_int(array [int] of var int: x, var int: y);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate nvalue(var int: n, array [int] of var int: x);
predicate regular(array [int] of var int: x, int: Q, int: S, array [int, int] of int: d, int: q0, set of int: F);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..160] of var -4..5: q :: output_array([1..160]);
constraint int_lin_eq([-2, -3, 1, 2, 1, 1, 1, 2, -1, 2, 2, -1, -2, 3, -2, 1, 3, -2, 2, -3, -3, 3, -3, 3, -1], [q[3], q[19], q[25], q[33], q[34], q[37], q[41], q[55], q[56], q[61], q[70], q[73], q[78], q[86], q[88], q[96], q[102], q[105], q[106], q[110], q[117], q[118], q[121], q[135], q[140]], 41);
constraint int_lin_eq([-2, -2, -3, -1, 3, 2, 2, -2, -1, -3, -2, 2, -2, 2, 3, -1, 2, 3, -1, -2, 2, -1, -1, 1, -3], [q[24], q[28], q[41], q[58], q[59], q[68], q[71], q[75], q[79], q[81], q[83], q[94], q[95], q[100], q[110], q[111], q[124], q[138], q[140], q[144], q[145], q[147], q[154], q[158], q[159]], -5);
constraint int_lin_eq([-2, -2, -2, -2, -1, -2, 2, 3, -3, -1, -2, 2, 2, 3, 2, -1, 2, 3, -1, -3, 1, 2, -2, -1, 2], [q[12], q[13], q[16], q[21], q[22], q[34], q[38], q[40], q[43], q[45], q[47], q[53], q[66], q[82], q[84], q[85], q[89], q[93], q[113], q[123], q[126], q[132], q[133], q[136], q[137]], -44);
constraint int_lin_eq([-1, 1, -1, 1, -3, -2, -3, 2, -2, -3, -1, 3, -3, -1, -2, -2, 1, -3, 2, -1, 2, -2, -1, -2, 3], [q[6], q[7], q[8], q[26], q[27], q[31], q[42], q[48], q[51], q[64], q[65], q[90], q[91], q[102], q[109], q[112], q[115], q[119], q[121], q[122], q[130], q[131], q[143], q[149], q[153]], -8);
constraint int_lin_eq([-1, 2, -3, 1, -1, -2, -1, -3, 2, -1, -1, -3, -1, -1, -1, 3, 2, 3, -1, -2, -1, -1, -3, -1, 3], [q[4], q[16], q[24], q[26], q[27], q[32], q[33], q[35], q[37], q[39], q[40], q[53], q[61], q[65], q[80], q[82], q[90], q[94], q[116], q[141], q[146], q[150], q[155], q[158], q[159]], 32);
constraint int_lin_eq([-1, 2, 1, 1, -1, -3, -1, -1, 2, -1, 3, -3, 2, -2, -3, -1, -2, 2, -3, 3, 2, -1, 1, -2, -3], [q[5], q[6], q[13], q[23], q[29], q[31], q[38], q[41], q[51], q[54], q[56], q[59], q[75], q[85], q[89], q[101], q[109], q[114], q[117], q[131], q[132], q[145], q[151], q[156], q[157]], -30);
constraint int_lin_eq([1, 2, 3, 2, 3, -2, -3, -2, 2, 1, -1, -1, -1, 2, -1, -3, -3, 1, 2, -3, -3, 2, -1, -1, -3], [q[1], q[12], q[20], q[21], q[30], q[43], q[47], q[48], q[55], q[64], q[66], q[68], q[81], q[84], q[97], q[98], q[106], q[112], q[124], q[127], q[130], q[140], q[142], q[144], q[147]], -9);
constraint int_lin_eq([2, -1, -2, -2, 1, 3, 2, 3, -1, -1, 2, -2, -1, 1, -2, -3, 3, -2, 1, -1, -1, 1, -3, 1, -1], [q[2], q[5], q[11], q[17], q[20], q[23], q[29], q[30], q[32], q[36], q[39], q[46], q[49], q[52], q[56], q[70], q[72], q[77], q[92], q[99], q[103], q[106], q[116], q[118], q[157]], -59);
constraint int_lin_eq([2, 2, -2, -1, -3, -2, 2, 2, -1, 3, -3, -1, -2, -1, 3, 3, 2, 1, 1, -1, 2, -3, -1, -1, -1], [q[1], q[4], q[29], q[39], q[44], q[47], q[60], q[67], q[75], q[76], q[85], q[87], q[98], q[100], q[101], q[103], q[109], q[119], q[132], q[138], q[139], q[143], q[151], q[152], q[157]], 33);
constraint int_lin_eq([2, 2, 2, 2, -2, 1, -3, 2, -1, 3, 3, 2, -1, -1, -2, -2, -3, -2, 2, -1, 2, 2, 1, 1, -1], [q[1], q[4], q[9], q[37], q[44], q[50], q[55], q[57], q[74], q[76], q[80], q[86], q[96], q[98], q[105], q[108], q[117], q[120], q[127], q[128], q[134], q[148], q[150], q[151], q[155]], 54);
constraint int_lin_eq([2, 3, -2, 1, -2, -3, -1, -3, -1, -3, 1, 3, -2, -1, -1, -1, 1, -1, 2, -1, 1, 2, -2, -1, -2], [q[10], q[11], q[13], q[20], q[23], q[27], q[43], q[51], q[58], q[59], q[63], q[66], q[69], q[71], q[81], q[84], q[90], q[93], q[116], q[120], q[134], q[142], q[147], q[149], q[153]], 22);
constraint int_lin_eq([3, -1, 1, 1, 1, -1, 3, -1, 1, -1, -1, -3, 3, 3, 3, 1, 3, -1, -2, -1, 3, 3, -1, -1, -1], [q[3], q[8], q[19], q[28], q[34], q[44], q[58], q[71], q[79], q[86], q[91], q[96], q[100], q[102], q[111], q[113], q[115], q[122], q[128], q[135], q[136], q[138], q[149], q[152], q[153]], 35);
constraint int_lin_eq([3, 1, 1, 3, 2, 3, 2, -1, -2, 2, 3, -1, -1, 3, -2, 3, 2, 2, 3, 1, 2, 3, 3, 2, -1], [q[14], q[15], q[18], q[19], q[25], q[33], q[35], q[54], q[62], q[73], q[78], q[87], q[97], q[101], q[104], q[107], q[114], q[125], q[129], q[135], q[139], q[146], q[152], q[156], q[160]], -36);
constraint int_lin_eq([3, 1, 3, -1, -1, -1, 2, 2, 3, -2, -3, 1, -2, -2, 3, -2, -1, 2, -1, 3, -3, -1, 1, 2, -2], [q[9], q[10], q[15], q[17], q[22], q[42], q[50], q[52], q[57], q[62], q[63], q[67], q[74], q[76], q[78], q[87], q[95], q[99], q[110], q[119], q[120], q[121], q[129], q[134], q[143]], 9);
constraint int_lin_eq([3, 3, -1, -1, 2, 1, -3, -3, -2, 3, -1, -1, -1, -3, -3, -2, 2, -3, -1, -2, -2, -2, -2, -3, -1], [q[2], q[7], q[11], q[14], q[18], q[25], q[36], q[46], q[49], q[60], q[70], q[72], q[73], q[88], q[92], q[105], q[108], q[118], q[126], q[133], q[137], q[139], q[148], q[154], q[160]], -54);
solve  :: int_search(q, first_fail, indomain_min, complete) satisfy;
