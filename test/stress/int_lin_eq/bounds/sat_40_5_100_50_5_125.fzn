predicate all_different_int(array [int] of var int: x);
predicate all_equal_int(array [int] of var int: x);
predicate among(var int: n, array [int] of var int: x, set of int: v);
predicate array_int_lq(array [int] of var int: x, array [int] of var int: y);
predicate array_int_lt(array [int] of var int: x, array [int] of var int: y);
predicate array_set_partition(array [int] of var set of int: S, set of int: universe);
predicate at_least_int(int: n, array [int] of var int: x, int: v);
predicate at_most_int(int: n, array [int] of var int: x, int: v);
predicate bool_lin_ge(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_gt(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_lt(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_ne(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate cumulatives(array [int] of var int: s, array [int] of var int: d, array [int] of var int: r, var int: b);
predicate decreasing_bool(array [int] of var bool: x);
predicate decreasing_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate gecode_array_set_element_union(var set of int: x, array [int] of var set of int: y, var set of int: z);
predicate gecode_bin_packing_load(array [int] of var int: l, array [int] of var int: bin, array [int] of int: w, int: minIndex);
predicate gecode_circuit(array [int] of var int: x);
predicate gecode_int_set_channel(array [int] of var int: x, int: xoff, array [int] of var set of int: y, int: yoff);
predicate gecode_link_set_to_booleans(var set of int: s, array [int] of var bool: b, int: idx);
predicate gecode_member_bool_reif(array [int] of var bool: x, var bool: y, var bool: b);
predicate gecode_member_int_reif(array [int] of var int: x, var int: y, var bool: b);
predicate gecode_nooverlap(array [int] of var int: x, array [int] of var int: w, array [int] of var int: y, array [int] of var int: h);
predicate gecode_range(array [int] of var int: x, int: xoff, var set of int: s, var set of int: t);
predicate gecode_set_weights(array [int] of int: csi, array [int] of int: cs, var set of int: x, var int: y);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate global_cardinality_closed(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate global_cardinality_low_up(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate global_cardinality_low_up_closed(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate increasing_bool(array [int] of var bool: x);
predicate increasing_int(array [int] of var int: x);
predicate inverse_offsets(array [int] of var int: f, int: foff, array [int] of var int: invf, int: invfoff);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate member_bool(array [int] of var bool: x, var bool: y);
predicate member_int(array [int] of var int: x, var int: y);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate nvalue(var int: n, array [int] of var int: x);
predicate regular(array [int] of var int: x, int: Q, int: S, array [int, int] of int: d, int: q0, set of int: F);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..100] of var -24..25: q :: output_array([1..100]);
constraint int_lin_eq([-5, -4, 1, -5, -4], [q[23], q[47], q[61], q[77], q[80]], -148);
constraint int_lin_eq([-5, -3, 2, 5, 5], [q[18], q[30], q[93], q[95], q[98]], 90);
constraint int_lin_eq([-5, 1, 3, -4, -2], [q[6], q[21], q[34], q[53], q[88]], -69);
constraint int_lin_eq([-4, -5, -4, 2, 3], [q[4], q[6], q[10], q[26], q[81]], 97);
constraint int_lin_eq([-4, -2, 4, -2, 4], [q[37], q[38], q[48], q[85], q[100]], -34);
constraint int_lin_eq([-4, -1, -4, -2, -1], [q[7], q[9], q[62], q[71], q[76]], -80);
constraint int_lin_eq([-4, -1, 3, -2, 5], [q[5], q[48], q[60], q[78], q[85]], -39);
constraint int_lin_eq([-4, 1, -1, 1, 3], [q[17], q[33], q[41], q[43], q[97]], 86);
constraint int_lin_eq([-4, 1, 3, -1, 3], [q[10], q[13], q[74], q[80], q[94]], 20);
constraint int_lin_eq([-3, -1, -3, 2, 2], [q[2], q[40], q[57], q[78], q[89]], 42);
constraint int_lin_eq([-3, 2, 1, -3, -3], [q[2], q[82], q[90], q[95], q[99]], 58);
constraint int_lin_eq([-3, 4, 3, -3, -2], [q[4], q[8], q[47], q[56], q[68]], 34);
constraint int_lin_eq([-2, -3, 2, 4, -1], [q[24], q[28], q[55], q[59], q[65]], -111);
constraint int_lin_eq([-2, -2, 1, -4, 4], [q[14], q[26], q[44], q[92], q[93]], -1);
constraint int_lin_eq([-1, -4, -1, -1, -2], [q[55], q[63], q[65], q[69], q[82]], 82);
constraint int_lin_eq([-1, -4, 4, -2, -4], [q[12], q[29], q[87], q[88], q[99]], 129);
constraint int_lin_eq([-1, -4, 5, 1, 4], [q[19], q[43], q[58], q[73], q[86]], -37);
constraint int_lin_eq([-1, -1, -4, 4, 2], [q[1], q[3], q[69], q[70], q[84]], -33);
constraint int_lin_eq([-1, -1, 2, -2, -2], [q[15], q[37], q[73], q[79], q[83]], -83);
constraint int_lin_eq([-1, 1, -1, -2, 2], [q[20], q[27], q[32], q[52], q[77]], 53);
constraint int_lin_eq([-1, 3, 1, 3, -2], [q[54], q[58], q[67], q[87], q[89]], 68);
constraint int_lin_eq([1, -4, -3, -2, 2], [q[15], q[22], q[75], q[79], q[97]], 145);
constraint int_lin_eq([1, -1, 1, 1, 5], [q[3], q[24], q[52], q[62], q[94]], 146);
constraint int_lin_eq([1, 3, -3, -5, -1], [q[12], q[23], q[35], q[39], q[96]], -100);
constraint int_lin_eq([2, -5, -4, -4, -1], [q[7], q[39], q[46], q[51], q[92]], -182);
constraint int_lin_eq([2, 1, 3, -5, -3], [q[16], q[25], q[32], q[70], q[91]], -22);
constraint int_lin_eq([2, 2, -5, 3, -4], [q[1], q[31], q[42], q[45], q[68]], -67);
constraint int_lin_eq([3, -5, 4, 4, -2], [q[35], q[41], q[49], q[53], q[90]], 5);
constraint int_lin_eq([3, -1, -5, 3, 3], [q[18], q[50], q[86], q[98], q[100]], -188);
constraint int_lin_eq([3, 1, 2, -5, 2], [q[17], q[21], q[36], q[60], q[67]], 21);
constraint int_lin_eq([3, 1, 4, -3, 2], [q[16], q[22], q[36], q[42], q[66]], -31);
constraint int_lin_eq([3, 1, 5, -4, -2], [q[20], q[54], q[64], q[72], q[74]], -82);
constraint int_lin_eq([3, 2, 3, 4, 5], [q[29], q[31], q[51], q[57], q[91]], -120);
constraint int_lin_eq([4, -5, 5, -1, -5], [q[9], q[11], q[50], q[71], q[83]], -138);
constraint int_lin_eq([4, -4, 4, -4, -4], [q[33], q[34], q[56], q[59], q[84]], 260);
constraint int_lin_eq([4, -1, 2, -4, -1], [q[11], q[38], q[46], q[63], q[81]], 3);
constraint int_lin_eq([4, 1, 1, 5, -3], [q[19], q[30], q[40], q[61], q[72]], -112);
constraint int_lin_eq([4, 2, -3, 5, -2], [q[25], q[45], q[49], q[64], q[75]], -21);
constraint int_lin_eq([4, 3, -2, -4, 4], [q[5], q[8], q[28], q[44], q[96]], 58);
constraint int_lin_eq([5, -5, 1, 1, -5], [q[13], q[14], q[27], q[66], q[76]], 19);
solve  :: int_search(q, first_fail, indomain_min, complete) satisfy;
