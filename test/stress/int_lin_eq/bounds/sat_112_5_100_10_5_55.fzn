predicate all_different_int(array [int] of var int: x);
predicate all_equal_int(array [int] of var int: x);
predicate among(var int: n, array [int] of var int: x, set of int: v);
predicate array_int_lq(array [int] of var int: x, array [int] of var int: y);
predicate array_int_lt(array [int] of var int: x, array [int] of var int: y);
predicate array_set_partition(array [int] of var set of int: S, set of int: universe);
predicate at_least_int(int: n, array [int] of var int: x, int: v);
predicate at_most_int(int: n, array [int] of var int: x, int: v);
predicate bool_lin_ge(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_gt(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_lt(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_ne(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate cumulatives(array [int] of var int: s, array [int] of var int: d, array [int] of var int: r, var int: b);
predicate decreasing_bool(array [int] of var bool: x);
predicate decreasing_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate gecode_array_set_element_union(var set of int: x, array [int] of var set of int: y, var set of int: z);
predicate gecode_bin_packing_load(array [int] of var int: l, array [int] of var int: bin, array [int] of int: w, int: minIndex);
predicate gecode_circuit(array [int] of var int: x);
predicate gecode_int_set_channel(array [int] of var int: x, int: xoff, array [int] of var set of int: y, int: yoff);
predicate gecode_link_set_to_booleans(var set of int: s, array [int] of var bool: b, int: idx);
predicate gecode_member_bool_reif(array [int] of var bool: x, var bool: y, var bool: b);
predicate gecode_member_int_reif(array [int] of var int: x, var int: y, var bool: b);
predicate gecode_nooverlap(array [int] of var int: x, array [int] of var int: w, array [int] of var int: y, array [int] of var int: h);
predicate gecode_range(array [int] of var int: x, int: xoff, var set of int: s, var set of int: t);
predicate gecode_set_weights(array [int] of int: csi, array [int] of int: cs, var set of int: x, var int: y);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate global_cardinality_closed(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate global_cardinality_low_up(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate global_cardinality_low_up_closed(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate increasing_bool(array [int] of var bool: x);
predicate increasing_int(array [int] of var int: x);
predicate inverse_offsets(array [int] of var int: f, int: foff, array [int] of var int: invf, int: invfoff);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate member_bool(array [int] of var bool: x, var bool: y);
predicate member_int(array [int] of var int: x, var int: y);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate nvalue(var int: n, array [int] of var int: x);
predicate regular(array [int] of var int: x, int: Q, int: S, array [int, int] of int: d, int: q0, set of int: F);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..100] of var 1..10: q :: output_array([1..100]);
constraint int_lin_eq([-5, -5, -1, 3, 5], [q[13], q[35], q[59], q[66], q[72]], -17);
constraint int_lin_eq([-5, -5, 4, -4, -2], [q[23], q[42], q[83], q[88], q[94]], -34);
constraint int_lin_eq([-5, -3, -1, -3, 4], [q[22], q[71], q[75], q[76], q[79]], -58);
constraint int_lin_eq([-5, -3, 1, -1, -1], [q[45], q[58], q[71], q[73], q[100]], -16);
constraint int_lin_eq([-5, -2, -3, -3, 3], [q[33], q[41], q[80], q[82], q[96]], -60);
constraint int_lin_eq([-5, 1, 2, 2, 2], [q[46], q[55], q[60], q[62], q[73]], 0);
constraint int_lin_eq([-5, 1, 3, -3, 1], [q[19], q[23], q[37], q[39], q[79]], -24);
constraint int_lin_eq([-5, 3, 2, -5, -2], [q[38], q[44], q[54], q[57], q[92]], -10);
constraint int_lin_eq([-5, 5, -1, -3, -4], [q[5], q[9], q[13], q[78], q[94]], -16);
constraint int_lin_eq([-4, -5, 4, 3, -2], [q[15], q[16], q[55], q[82], q[98]], -17);
constraint int_lin_eq([-4, -2, 5, -5, -1], [q[1], q[9], q[26], q[40], q[75]], -58);
constraint int_lin_eq([-4, 1, -1, -1, 2], [q[9], q[24], q[34], q[55], q[84]], -22);
constraint int_lin_eq([-4, 2, 1, -1, 3], [q[7], q[52], q[59], q[94], q[97]], 24);
constraint int_lin_eq([-4, 2, 2, -3, -1], [q[61], q[79], q[81], q[96], q[99]], -19);
constraint int_lin_eq([-4, 4, -3, -3, -1], [q[18], q[23], q[55], q[72], q[79]], -57);
constraint int_lin_eq([-4, 5, 4, -4, 4], [q[6], q[16], q[38], q[56], q[93]], 21);
constraint int_lin_eq([-4, 5, 5, 1, -4], [q[11], q[72], q[82], q[88], q[95]], 5);
constraint int_lin_eq([-3, -3, 5, -3, 4], [q[14], q[26], q[60], q[62], q[72]], 18);
constraint int_lin_eq([-3, -1, 1, -2, 2], [q[17], q[22], q[28], q[47], q[91]], -14);
constraint int_lin_eq([-3, -1, 3, -3, -1], [q[20], q[57], q[75], q[90], q[97]], -9);
constraint int_lin_eq([-3, 1, 3, -1, -4], [q[22], q[36], q[42], q[50], q[68]], -12);
constraint int_lin_eq([-3, 3, 3, -2, 2], [q[26], q[52], q[61], q[71], q[77]], 31);
constraint int_lin_eq([-3, 4, -1, 1, -3], [q[29], q[66], q[67], q[70], q[83]], -7);
constraint int_lin_eq([-3, 4, 5, -5, 5], [q[21], q[47], q[49], q[85], q[99]], 36);
constraint int_lin_eq([-3, 5, 3, 1, -4], [q[8], q[69], q[81], q[92], q[94]], 16);
constraint int_lin_eq([-3, 5, 3, 1, -1], [q[29], q[46], q[85], q[91], q[100]], 50);
constraint int_lin_eq([-2, -4, -1, -1, -2], [q[10], q[34], q[46], q[62], q[86]], -46);
constraint int_lin_eq([-2, -3, -1, 3, -3], [q[14], q[45], q[74], q[83], q[92]], -6);
constraint int_lin_eq([-2, -3, -1, 5, -1], [q[4], q[30], q[63], q[97], q[100]], -23);
constraint int_lin_eq([-2, -3, -1, 5, 5], [q[18], q[35], q[57], q[64], q[84]], -12);
constraint int_lin_eq([-2, -1, -3, 5, 3], [q[13], q[14], q[25], q[55], q[67]], 34);
constraint int_lin_eq([-2, 1, -3, -5, 3], [q[7], q[54], q[56], q[68], q[99]], -3);
constraint int_lin_eq([-2, 1, -3, 5, -2], [q[16], q[46], q[53], q[82], q[95]], -2);
constraint int_lin_eq([-2, 1, 2, -1, -5], [q[5], q[17], q[57], q[77], q[85]], -48);
constraint int_lin_eq([-2, 1, 4, -2, 4], [q[32], q[47], q[48], q[51], q[52]], 35);
constraint int_lin_eq([-2, 2, 1, -5, -5], [q[2], q[8], q[34], q[40], q[76]], -85);
constraint int_lin_eq([-2, 5, 5, -5, 5], [q[11], q[49], q[52], q[89], q[96]], 66);
constraint int_lin_eq([-1, -5, -5, 2, 3], [q[15], q[18], q[33], q[70], q[84]], -53);
constraint int_lin_eq([-1, -5, -2, -3, -4], [q[14], q[30], q[32], q[76], q[90]], -99);
constraint int_lin_eq([-1, -5, -1, -2, -5], [q[3], q[31], q[39], q[48], q[60]], -67);
constraint int_lin_eq([-1, -5, 2, -1, 5], [q[12], q[37], q[49], q[78], q[80]], 2);
constraint int_lin_eq([-1, -4, -4, 2, 5], [q[4], q[53], q[63], q[70], q[97]], 6);
constraint int_lin_eq([-1, -3, -5, 3, 4], [q[2], q[29], q[31], q[53], q[55]], -4);
constraint int_lin_eq([-1, -2, -2, 2, 1], [q[1], q[4], q[35], q[41], q[59]], -26);
constraint int_lin_eq([-1, -1, -3, 4, -5], [q[1], q[4], q[75], q[81], q[86]], -32);
constraint int_lin_eq([-1, -1, 1, -4, -2], [q[6], q[17], q[23], q[48], q[59]], -38);
constraint int_lin_eq([-1, -1, 5, -4, -1], [q[19], q[27], q[37], q[65], q[96]], -11);
constraint int_lin_eq([-1, 1, 2, 5, -2], [q[5], q[36], q[41], q[89], q[90]], 17);
constraint int_lin_eq([-1, 1, 3, -4, -1], [q[11], q[43], q[67], q[74], q[93]], -14);
constraint int_lin_eq([-1, 3, -4, -1, 2], [q[10], q[15], q[26], q[68], q[77]], 14);
constraint int_lin_eq([-1, 3, -1, -3, -2], [q[7], q[65], q[72], q[81], q[91]], -29);
constraint int_lin_eq([-1, 3, -1, -1, -5], [q[3], q[24], q[27], q[65], q[88]], 1);
constraint int_lin_eq([-1, 3, -1, -1, -3], [q[8], q[10], q[33], q[40], q[50]], 2);
constraint int_lin_eq([-1, 3, -1, 2, 5], [q[17], q[19], q[28], q[65], q[80]], 28);
constraint int_lin_eq([-1, 5, -3, -3, -2], [q[13], q[23], q[27], q[58], q[70]], -15);
constraint int_lin_eq([1, -2, -5, 3, -1], [q[2], q[18], q[38], q[47], q[87]], -14);
constraint int_lin_eq([1, -2, 1, -1, -4], [q[3], q[39], q[43], q[56], q[100]], -34);
constraint int_lin_eq([1, -2, 2, -3, -2], [q[4], q[11], q[52], q[69], q[87]], -17);
constraint int_lin_eq([1, -2, 5, -1, -4], [q[28], q[39], q[54], q[72], q[77]], 7);
constraint int_lin_eq([1, -1, -2, 2, -4], [q[27], q[63], q[69], q[88], q[98]], -12);
constraint int_lin_eq([1, -1, 3, -1, -4], [q[25], q[64], q[67], q[76], q[93]], -20);
constraint int_lin_eq([1, -1, 4, 2, -2], [q[43], q[48], q[59], q[61], q[69]], 24);
constraint int_lin_eq([1, -1, 5, -4, -3], [q[7], q[37], q[41], q[45], q[87]], -23);
constraint int_lin_eq([1, 3, 1, -3, -5], [q[10], q[24], q[33], q[58], q[89]], 13);
constraint int_lin_eq([1, 3, 1, 3, 1], [q[8], q[20], q[34], q[51], q[91]], 43);
constraint int_lin_eq([1, 3, 3, -5, -2], [q[3], q[5], q[46], q[75], q[76]], -2);
constraint int_lin_eq([2, -5, -2, -1, 5], [q[13], q[20], q[21], q[52], q[88]], 3);
constraint int_lin_eq([2, -5, -1, 2, -1], [q[1], q[38], q[63], q[66], q[67]], -12);
constraint int_lin_eq([2, -5, -1, 3, -1], [q[8], q[13], q[18], q[47], q[86]], -7);
constraint int_lin_eq([2, -4, -2, -1, -1], [q[42], q[60], q[61], q[87], q[96]], -34);
constraint int_lin_eq([2, -4, -1, 4, 5], [q[23], q[25], q[49], q[81], q[95]], 67);
constraint int_lin_eq([2, -3, 2, 4, 5], [q[26], q[28], q[53], q[54], q[66]], 54);
constraint int_lin_eq([2, -3, 3, 5, 3], [q[11], q[12], q[24], q[79], q[93]], 84);
constraint int_lin_eq([2, -2, -4, -3, 4], [q[39], q[45], q[46], q[50], q[100]], 0);
constraint int_lin_eq([2, -1, 5, -2, 1], [q[10], q[74], q[86], q[90], q[92]], 21);
constraint int_lin_eq([2, -1, 5, -1, -4], [q[3], q[9], q[15], q[31], q[48]], 11);
constraint int_lin_eq([2, 2, -4, -1, -5], [q[6], q[64], q[82], q[95], q[99]], -39);
constraint int_lin_eq([2, 2, 4, -1, -5], [q[7], q[21], q[24], q[47], q[74]], 20);
constraint int_lin_eq([2, 3, -5, 2, -2], [q[30], q[44], q[71], q[92], q[98]], -8);
constraint int_lin_eq([2, 3, -5, 4, -1], [q[20], q[25], q[44], q[68], q[76]], -13);
constraint int_lin_eq([3, -5, -2, -3, -1], [q[4], q[24], q[34], q[41], q[75]], -42);
constraint int_lin_eq([3, -5, -2, -2, 1], [q[25], q[59], q[64], q[74], q[96]], -30);
constraint int_lin_eq([3, -5, -1, -1, -5], [q[1], q[8], q[34], q[40], q[66]], -58);
constraint int_lin_eq([3, -4, -2, -5, -2], [q[2], q[6], q[42], q[51], q[89]], -71);
constraint int_lin_eq([3, -4, 3, 4, -4], [q[11], q[15], q[35], q[56], q[100]], 3);
constraint int_lin_eq([3, -3, 4, -1, 4], [q[26], q[50], q[68], q[80], q[82]], 32);
constraint int_lin_eq([3, -1, -1, -1, -2], [q[10], q[33], q[45], q[53], q[73]], 8);
constraint int_lin_eq([3, 1, -2, -1, -5], [q[2], q[43], q[62], q[73], q[93]], -14);
constraint int_lin_eq([3, 2, 4, 3, 3], [q[17], q[22], q[38], q[49], q[73]], 79);
constraint int_lin_eq([3, 3, -3, 3, -4], [q[31], q[32], q[77], q[78], q[94]], 5);
constraint int_lin_eq([3, 4, -2, -3, 4], [q[29], q[31], q[35], q[53], q[57]], 9);
constraint int_lin_eq([3, 4, 5, 1, 2], [q[9], q[33], q[36], q[50], q[80]], 88);
constraint int_lin_eq([4, -4, 2, -1, -1], [q[19], q[29], q[42], q[48], q[63]], 21);
constraint int_lin_eq([4, -2, 5, -1, -4], [q[12], q[16], q[28], q[54], q[98]], 33);
constraint int_lin_eq([4, 1, -1, 2, 1], [q[17], q[60], q[63], q[65], q[87]], 39);
constraint int_lin_eq([4, 2, -2, 4, 2], [q[29], q[39], q[67], q[83], q[85]], 62);
constraint int_lin_eq([4, 2, -1, 2, 4], [q[1], q[9], q[22], q[71], q[89]], 52);
constraint int_lin_eq([4, 3, 3, -1, -1], [q[12], q[64], q[78], q[81], q[84]], 24);
constraint int_lin_eq([4, 4, 2, -2, -2], [q[45], q[50], q[78], q[80], q[85]], -2);
constraint int_lin_eq([5, -5, -3, 4, -1], [q[7], q[14], q[56], q[57], q[77]], -9);
constraint int_lin_eq([5, -5, -2, 2, -3], [q[21], q[58], q[71], q[83], q[91]], -7);
constraint int_lin_eq([5, -5, -1, -5, -4], [q[30], q[38], q[41], q[44], q[87]], -38);
constraint int_lin_eq([5, -4, -4, 2, -4], [q[5], q[37], q[51], q[66], q[79]], -27);
constraint int_lin_eq([5, -3, 4, -3, 5], [q[20], q[21], q[32], q[69], q[86]], 18);
constraint int_lin_eq([5, -2, 2, 4, -5], [q[5], q[19], q[20], q[49], q[98]], 46);
constraint int_lin_eq([5, -1, -1, -4, -5], [q[16], q[30], q[31], q[44], q[91]], -39);
constraint int_lin_eq([5, -1, 4, 2, 4], [q[6], q[12], q[40], q[84], q[97]], 104);
constraint int_lin_eq([5, 2, -4, 5, 1], [q[22], q[36], q[58], q[62], q[70]], 79);
constraint int_lin_eq([5, 2, -2, -2, 2], [q[18], q[19], q[61], q[69], q[86]], 39);
constraint int_lin_eq([5, 2, -1, 4, -3], [q[15], q[35], q[68], q[84], q[90]], 57);
constraint int_lin_eq([5, 4, -1, -5, 1], [q[6], q[36], q[51], q[65], q[98]], 35);
constraint int_lin_eq([5, 5, 5, -4, 3], [q[27], q[32], q[43], q[95], q[99]], 50);
solve  :: int_search(q, first_fail, indomain_min, complete) satisfy;
