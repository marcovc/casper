predicate all_different_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate lex_lesseq_int(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..30] of var 1..10: q :: output_array([1..30]);
constraint int_lin_le([-10, -10, -10, 5, 6, -5, -4, 2, 4, 9, 2, 8, -2, -9, -2, 4, 9, -7, -5, -8, 3, 1, -4, 9, -4], [q[1], q[2], q[3], q[4], q[6], q[8], q[9], q[11], q[12], q[13], q[14], q[16], q[17], q[19], q[20], q[21], q[22], q[23], q[24], q[25], q[26], q[27], q[28], q[29], q[30]], -104);
constraint int_lin_le([-8, 2, 1, -8, -1, -10, 8, -10, 4, 8, 9, 5, 8, 1, -5, -1, 5, -5, 9, 1, 5, 4, -3, -5, 6], [q[3], q[4], q[5], q[7], q[8], q[9], q[11], q[12], q[13], q[14], q[15], q[16], q[17], q[18], q[19], q[20], q[21], q[22], q[24], q[25], q[26], q[27], q[28], q[29], q[30]], -19);
constraint int_lin_le([-6, 1, -10, 2, -4, 6, 2, -2, -2, -7, 8, 10, -6, -4, 6, -5, -7, -2, 6, -5, 2, 1, 5, 1, -10], [q[1], q[2], q[3], q[5], q[6], q[7], q[8], q[10], q[12], q[14], q[15], q[16], q[17], q[18], q[19], q[20], q[21], q[22], q[23], q[24], q[25], q[26], q[27], q[28], q[29]], -221);
constraint int_lin_le([-3, -1, -7, -1, 1, -8, 2, -10, -4, 1, -8, -3, -4, 10, -7, -8, -7, 10, -10, -4, 7, -5, 6, -5, -2], [q[1], q[5], q[6], q[7], q[8], q[9], q[10], q[11], q[12], q[13], q[14], q[15], q[16], q[17], q[18], q[19], q[20], q[22], q[23], q[24], q[25], q[26], q[27], q[29], q[30]], -363);
constraint int_lin_le([3, 7, 4, 6, -7, 7, 10, -7, -3, -7, 9, -6, 2, 3, -5, -6, 10, 7, 9, -8, -10, -3, -6, -8, 7], [q[1], q[2], q[3], q[4], q[5], q[8], q[9], q[10], q[12], q[13], q[14], q[16], q[17], q[18], q[19], q[20], q[21], q[22], q[24], q[25], q[26], q[27], q[28], q[29], q[30]], 97);
solve  :: int_search(q, first_fail, indomain_min, complete) satisfy;
