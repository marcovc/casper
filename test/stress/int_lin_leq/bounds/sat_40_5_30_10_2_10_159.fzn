predicate all_different_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate lex_lesseq_int(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..30] of var 1..10: q :: output_array([1..30]);
constraint int_lin_le([-10, -10, 3, 10, -1], [q[1], q[3], q[11], q[21], q[23]], -54);
constraint int_lin_le([-9, 8, 7, -6, -8], [q[12], q[16], q[20], q[24], q[29]], -88);
constraint int_lin_le([-9, 10, -9, -9, 5], [q[5], q[19], q[20], q[21], q[22]], -49);
constraint int_lin_le([-8, 4, -6, -9, 5], [q[2], q[5], q[27], q[29], q[30]], -96);
constraint int_lin_le([-8, 7, -8, -9, 7], [q[4], q[10], q[14], q[15], q[20]], -64);
constraint int_lin_le([-7, 1, -5, -2, 5], [q[2], q[3], q[8], q[28], q[29]], -33);
constraint int_lin_le([-7, 9, 4, -9, 8], [q[4], q[6], q[16], q[23], q[27]], -62);
constraint int_lin_le([-6, 1, -5, -8, -10], [q[10], q[15], q[22], q[25], q[30]], -195);
constraint int_lin_le([-5, 5, 5, -1, 2], [q[13], q[14], q[18], q[23], q[30]], 45);
constraint int_lin_le([-4, -10, 1, 4, 8], [q[6], q[7], q[8], q[18], q[22]], -10);
constraint int_lin_le([-4, -7, -5, 1, -10], [q[6], q[10], q[12], q[22], q[26]], -99);
constraint int_lin_le([-4, -3, -5, 6, -7], [q[16], q[17], q[23], q[24], q[26]], -32);
constraint int_lin_le([-3, -4, -5, 2, 6], [q[15], q[17], q[19], q[24], q[26]], -33);
constraint int_lin_le([-3, -4, -1, -2, 2], [q[4], q[5], q[14], q[19], q[20]], -57);
constraint int_lin_le([-3, -3, 9, 5, -5], [q[9], q[10], q[12], q[13], q[22]], 2);
constraint int_lin_le([-2, 4, 3, 9, -6], [q[6], q[7], q[8], q[18], q[28]], 33);
constraint int_lin_le([-2, 5, -1, 2, -1], [q[7], q[14], q[20], q[24], q[26]], 21);
constraint int_lin_le([-2, 7, 7, 5, -9], [q[8], q[12], q[13], q[14], q[26]], 57);
constraint int_lin_le([-1, -10, -1, 7, 6], [q[2], q[4], q[7], q[20], q[24]], -24);
constraint int_lin_le([-1, -4, -1, 4, 4], [q[15], q[23], q[24], q[29], q[30]], 36);
constraint int_lin_le([-1, -1, 5, -6, 6], [q[5], q[6], q[11], q[24], q[27]], -4);
constraint int_lin_le([1, -6, -10, 2, -1], [q[4], q[14], q[16], q[20], q[25]], -36);
constraint int_lin_le([1, -6, -2, 1, 5], [q[11], q[18], q[21], q[25], q[28]], 21);
constraint int_lin_le([1, -6, 9, -10, 2], [q[4], q[17], q[18], q[19], q[21]], -47);
constraint int_lin_le([1, -4, -3, 8, -3], [q[9], q[21], q[23], q[27], q[29]], -17);
constraint int_lin_le([1, -4, 9, -6, -8], [q[3], q[9], q[15], q[18], q[29]], -54);
constraint int_lin_le([1, 5, 3, -1, 5], [q[10], q[12], q[17], q[19], q[21]], 52);
constraint int_lin_le([2, -7, -5, -4, 8], [q[10], q[12], q[17], q[26], q[27]], -39);
constraint int_lin_le([2, -3, -3, -7, -2], [q[2], q[4], q[7], q[11], q[25]], -74);
constraint int_lin_le([2, 3, -3, 3, 7], [q[11], q[13], q[25], q[29], q[30]], 62);
constraint int_lin_le([3, -1, 2, -1, -3], [q[2], q[7], q[8], q[25], q[28]], -3);
constraint int_lin_le([4, -1, -8, -6, -6], [q[1], q[3], q[16], q[17], q[25]], -79);
constraint int_lin_le([5, 8, 3, 3, -6], [q[1], q[15], q[18], q[25], q[30]], 50);
constraint int_lin_le([6, -8, -3, 7, 4], [q[3], q[7], q[8], q[16], q[17]], -27);
constraint int_lin_le([6, -6, -3, 3, 1], [q[1], q[5], q[16], q[18], q[28]], -4);
constraint int_lin_le([7, 3, 3, -4, 4], [q[7], q[8], q[10], q[20], q[29]], 99);
constraint int_lin_le([8, -10, -9, -2, 6], [q[1], q[6], q[8], q[13], q[24]], 12);
constraint int_lin_le([8, -8, -4, 9, 7], [q[3], q[6], q[11], q[17], q[19]], 95);
constraint int_lin_le([8, -5, -7, -3, 1], [q[5], q[9], q[11], q[13], q[22]], 28);
constraint int_lin_le([8, 7, -1, -6, 6], [q[1], q[2], q[3], q[19], q[27]], 66);
constraint int_lin_le([9, -2, -7, -1, -3], [q[4], q[15], q[19], q[22], q[28]], 14);
constraint int_lin_le([9, -2, 9, 5, -2], [q[14], q[16], q[23], q[28], q[30]], 115);
constraint int_lin_le([10, -3, -7, 6, -7], [q[1], q[2], q[9], q[13], q[27]], 9);
constraint int_lin_le([10, -1, -5, 4, -6], [q[5], q[9], q[12], q[21], q[28]], 14);
constraint int_lin_le([10, -1, 4, -7, 1], [q[2], q[9], q[12], q[21], q[26]], 87);
solve  :: int_search(q, first_fail, indomain_min, complete) satisfy;
