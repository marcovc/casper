predicate all_different_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate lex_lesseq_int(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..15] of var 1..10: q :: output_array([1..15]);
constraint int_lin_le([-10, -1, 9, 8, -4], [q[5], q[7], q[10], q[11], q[13]], 26);
constraint int_lin_le([-8, -8, 1, 3, 1], [q[6], q[7], q[12], q[13], q[15]], 10);
constraint int_lin_le([-8, -4, -4, 5, 8], [q[2], q[4], q[7], q[13], q[15]], -26);
constraint int_lin_le([-7, 2, 1, -7, 10], [q[1], q[3], q[9], q[10], q[11]], -36);
constraint int_lin_le([-7, 2, 1, 3, -8], [q[2], q[4], q[6], q[12], q[15]], -63);
constraint int_lin_le([-3, -8, 5, 9, -5], [q[2], q[9], q[13], q[14], q[15]], 79);
constraint int_lin_le([-3, -4, -8, 10, -2], [q[1], q[3], q[8], q[10], q[14]], 4);
constraint int_lin_le([1, -6, -5, -1, 2], [q[5], q[6], q[8], q[12], q[14]], -6);
constraint int_lin_le([1, -3, -3, -3, 10], [q[2], q[4], q[5], q[9], q[11]], -1);
constraint int_lin_le([4, 3, 8, -9, -6], [q[1], q[3], q[8], q[9], q[14]], -28);
solve  :: int_search(q, first_fail, indomain_min, complete) satisfy;
