predicate all_different_int(array [int] of var int: x);
predicate all_equal_int(array [int] of var int: x);
predicate among(var int: n, array [int] of var int: x, set of int: v);
predicate array_int_lq(array [int] of var int: x, array [int] of var int: y);
predicate array_int_lt(array [int] of var int: x, array [int] of var int: y);
predicate array_set_partition(array [int] of var set of int: S, set of int: universe);
predicate at_least_int(int: n, array [int] of var int: x, int: v);
predicate at_most_int(int: n, array [int] of var int: x, int: v);
predicate bool_lin_ge(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_gt(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_lt(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate bool_lin_ne(array [int] of int: a, array [int] of var bool: x, var int: c);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate cumulatives(array [int] of var int: s, array [int] of var int: d, array [int] of var int: r, var int: b);
predicate decreasing_bool(array [int] of var bool: x);
predicate decreasing_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate gecode_array_set_element_union(var set of int: x, array [int] of var set of int: y, var set of int: z);
predicate gecode_bin_packing_load(array [int] of var int: l, array [int] of var int: bin, array [int] of int: w, int: minIndex);
predicate gecode_circuit(array [int] of var int: x);
predicate gecode_int_set_channel(array [int] of var int: x, int: xoff, array [int] of var set of int: y, int: yoff);
predicate gecode_link_set_to_booleans(var set of int: s, array [int] of var bool: b, int: idx);
predicate gecode_member_bool_reif(array [int] of var bool: x, var bool: y, var bool: b);
predicate gecode_member_int_reif(array [int] of var int: x, var int: y, var bool: b);
predicate gecode_nooverlap(array [int] of var int: x, array [int] of var int: w, array [int] of var int: y, array [int] of var int: h);
predicate gecode_range(array [int] of var int: x, int: xoff, var set of int: s, var set of int: t);
predicate gecode_set_weights(array [int] of int: csi, array [int] of int: cs, var set of int: x, var int: y);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate global_cardinality_closed(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate global_cardinality_low_up(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate global_cardinality_low_up_closed(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate increasing_bool(array [int] of var bool: x);
predicate increasing_int(array [int] of var int: x);
predicate inverse_offsets(array [int] of var int: f, int: foff, array [int] of var int: invf, int: invfoff);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate member_bool(array [int] of var bool: x, var bool: y);
predicate member_int(array [int] of var int: x, var int: y);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate nvalue(var int: n, array [int] of var int: x);
predicate regular(array [int] of var int: x, int: Q, int: S, array [int, int] of int: d, int: q0, set of int: F);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..30] of var 1..10: q :: output_array([1..30]);
constraint int_lin_le([-9, -3, 2, 7, 9], [q[10], q[14], q[18], q[27], q[29]], 43);
constraint int_lin_le([-9, 6, -2, -2, 8], [q[2], q[9], q[11], q[26], q[27]], 46);
constraint int_lin_le([-9, 7, -5, 8, 1], [q[12], q[13], q[15], q[20], q[28]], 68);
constraint int_lin_le([-8, -4, -3, -7, 8], [q[4], q[8], q[25], q[29], q[30]], -78);
constraint int_lin_le([-8, 5, 10, -4, 9], [q[3], q[8], q[9], q[18], q[24]], 161);
constraint int_lin_le([-7, -4, 8, -10, -6], [q[1], q[4], q[14], q[20], q[23]], -122);
constraint int_lin_le([-5, -4, -2, -5, 3], [q[2], q[5], q[14], q[22], q[25]], -92);
constraint int_lin_le([-5, 10, -7, 1, 10], [q[3], q[6], q[13], q[15], q[22]], 60);
constraint int_lin_le([-4, -4, 3, -1, 2], [q[5], q[15], q[24], q[25], q[26]], -11);
constraint int_lin_le([-4, 1, 3, -8, 1], [q[5], q[16], q[22], q[25], q[30]], -8);
constraint int_lin_le([-1, -7, 8, -7, -4], [q[6], q[17], q[19], q[21], q[28]], -17);
constraint int_lin_le([-1, -4, -6, -3, 6], [q[3], q[7], q[13], q[16], q[23]], -88);
constraint int_lin_le([-1, 4, 7, 7, 1], [q[5], q[20], q[21], q[22], q[24]], 126);
constraint int_lin_le([-1, 5, 4, 1, 3], [q[2], q[5], q[6], q[20], q[26]], 91);
constraint int_lin_le([-1, 9, 9, -8, 7], [q[1], q[9], q[14], q[25], q[29]], 157);
constraint int_lin_le([1, -7, 1, -8, -5], [q[8], q[11], q[12], q[17], q[28]], -97);
constraint int_lin_le([1, -5, 5, -9, -6], [q[7], q[11], q[27], q[29], q[30]], -87);
constraint int_lin_le([1, 3, 6, 7, 2], [q[4], q[5], q[7], q[24], q[29]], 162);
constraint int_lin_le([2, -3, 1, 1, 9], [q[1], q[6], q[21], q[24], q[26]], 98);
constraint int_lin_le([3, -9, 1, 6, 9], [q[10], q[15], q[18], q[19], q[30]], 69);
constraint int_lin_le([3, 5, 5, -9, 1], [q[3], q[14], q[15], q[18], q[23]], 52);
constraint int_lin_le([3, 6, -4, -3, 6], [q[1], q[4], q[6], q[17], q[21]], 49);
constraint int_lin_le([3, 6, -2, 8, 8], [q[2], q[8], q[12], q[23], q[28]], 118);
constraint int_lin_le([4, -6, 9, 6, 6], [q[8], q[14], q[18], q[23], q[28]], 64);
constraint int_lin_le([5, -8, -10, 10, -6], [q[4], q[7], q[9], q[19], q[20]], -82);
constraint int_lin_le([5, -3, -5, 7, 7], [q[12], q[19], q[20], q[21], q[30]], 17);
constraint int_lin_le([6, -10, -10, -2, -10], [q[2], q[9], q[12], q[13], q[16]], -134);
constraint int_lin_le([6, 1, -9, -1, -2], [q[7], q[10], q[11], q[23], q[30]], -2);
constraint int_lin_le([6, 9, -8, -2, -7], [q[7], q[12], q[13], q[17], q[28]], -31);
constraint int_lin_le([7, -4, 6, -9, 1], [q[9], q[19], q[22], q[25], q[28]], 55);
constraint int_lin_le([7, -1, -5, -10, 1], [q[6], q[16], q[17], q[21], q[26]], -17);
constraint int_lin_le([7, 5, -9, 8, 6], [q[16], q[19], q[26], q[27], q[29]], 77);
constraint int_lin_le([9, -5, 4, -9, 1], [q[3], q[8], q[10], q[18], q[22]], -6);
constraint int_lin_le([9, -4, 2, 1, 5], [q[9], q[11], q[16], q[21], q[27]], 72);
constraint int_lin_le([9, 1, -8, 7, -10], [q[1], q[10], q[16], q[17], q[25]], 82);
constraint int_lin_le([9, 4, -8, 4, -5], [q[2], q[4], q[6], q[26], q[27]], 5);
constraint int_lin_le([10, -9, -6, 9, -1], [q[1], q[10], q[19], q[22], q[24]], 28);
constraint int_lin_le([10, 1, 1, -9, 2], [q[3], q[11], q[13], q[15], q[17]], -23);
constraint int_lin_le([10, 7, -4, 4, 9], [q[5], q[12], q[13], q[18], q[30]], 139);
constraint int_lin_le([10, 8, -2, 6, 6], [q[2], q[10], q[20], q[23], q[29]], 110);
solve  :: int_search(q, first_fail, indomain_min, complete) satisfy;
