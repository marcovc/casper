predicate all_different_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate lex_lesseq_int(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..30] of var 1..10: q :: output_array([1..30]);
constraint int_lin_le([-10, -10, 1, 10, 7], [q[16], q[18], q[20], q[25], q[29]], 14);
constraint int_lin_le([-10, -9, -2, -2, -10], [q[1], q[19], q[23], q[26], q[30]], -84);
constraint int_lin_le([-10, -3, -2, 10, 5], [q[4], q[6], q[22], q[23], q[27]], -38);
constraint int_lin_le([-10, -2, 8, -8, 2], [q[2], q[8], q[16], q[18], q[27]], 4);
constraint int_lin_le([-10, 4, -3, -4, -9], [q[3], q[8], q[19], q[20], q[23]], -103);
constraint int_lin_le([-10, 8, -5, 9, -5], [q[6], q[12], q[17], q[24], q[26]], 55);
constraint int_lin_le([-9, -10, 1, 5, 5], [q[4], q[8], q[20], q[21], q[24]], -42);
constraint int_lin_le([-9, 5, -10, 2, -7], [q[2], q[7], q[13], q[14], q[22]], -162);
constraint int_lin_le([-8, -2, -7, 7, -10], [q[2], q[7], q[17], q[26], q[30]], -27);
constraint int_lin_le([-8, 8, -6, 8, -6], [q[1], q[10], q[17], q[19], q[30]], 12);
constraint int_lin_le([-7, -2, -6, 1, -2], [q[5], q[14], q[17], q[19], q[28]], -82);
constraint int_lin_le([-5, 8, -6, -3, -4], [q[2], q[7], q[9], q[13], q[17]], 1);
constraint int_lin_le([-4, -9, -3, -9, 3], [q[5], q[9], q[15], q[21], q[27]], -87);
constraint int_lin_le([-4, 1, -2, 10, -2], [q[1], q[2], q[7], q[18], q[29]], -13);
constraint int_lin_le([-4, 1, 2, -1, -10], [q[13], q[20], q[21], q[22], q[23]], -60);
constraint int_lin_le([-4, 2, 5, -5, 2], [q[5], q[8], q[10], q[11], q[30]], 4);
constraint int_lin_le([-4, 10, -8, -6, -1], [q[1], q[11], q[19], q[21], q[25]], -60);
constraint int_lin_le([-3, 7, -1, -5, -7], [q[1], q[12], q[13], q[15], q[30]], 22);
constraint int_lin_le([-3, 7, 7, 10, 8], [q[4], q[11], q[16], q[24], q[26]], 220);
constraint int_lin_le([-2, -7, 9, -7, 9], [q[1], q[2], q[3], q[21], q[22]], 74);
constraint int_lin_le([-2, -2, -6, -3, 3], [q[9], q[15], q[23], q[24], q[29]], -36);
constraint int_lin_le([-1, -8, -1, 4, 3], [q[7], q[8], q[25], q[27], q[29]], -6);
constraint int_lin_le([-1, 4, 9, -5, -5], [q[11], q[12], q[13], q[22], q[25]], 51);
constraint int_lin_le([1, -8, 1, -3, -1], [q[2], q[3], q[4], q[6], q[8]], -72);
constraint int_lin_le([1, 3, 1, -3, 3], [q[8], q[14], q[20], q[29], q[30]], 9);
constraint int_lin_le([1, 4, 5, -6, -5], [q[1], q[16], q[18], q[24], q[29]], -50);
constraint int_lin_le([1, 5, 10, 5, 1], [q[9], q[11], q[15], q[16], q[28]], 88);
constraint int_lin_le([2, -4, -5, -10, -5], [q[1], q[13], q[26], q[28], q[30]], -114);
constraint int_lin_le([2, 1, -10, 10, 1], [q[5], q[15], q[17], q[22], q[24]], 102);
constraint int_lin_le([2, 3, 1, 1, -1], [q[3], q[12], q[25], q[26], q[27]], 55);
constraint int_lin_le([3, -6, -5, 3, 10], [q[3], q[11], q[17], q[22], q[25]], 93);
constraint int_lin_le([3, 5, -2, -5, -6], [q[9], q[13], q[15], q[23], q[27]], -23);
constraint int_lin_le([3, 9, 3, 7, -2], [q[4], q[7], q[14], q[19], q[28]], 129);
constraint int_lin_le([4, 4, -2, -8, 1], [q[10], q[12], q[25], q[28], q[29]], 39);
constraint int_lin_le([5, -9, -9, 4, -3], [q[5], q[6], q[7], q[12], q[14]], -58);
constraint int_lin_le([5, -8, -10, 3, 7], [q[2], q[5], q[23], q[26], q[28]], -24);
constraint int_lin_le([5, 2, 8, -8, 2], [q[4], q[6], q[10], q[14], q[28]], 64);
constraint int_lin_le([7, -5, 3, -9, -2], [q[6], q[9], q[10], q[12], q[30]], -47);
constraint int_lin_le([7, -2, 1, 10, -7], [q[3], q[10], q[12], q[26], q[28]], 144);
constraint int_lin_le([7, 5, 1, -6, -7], [q[11], q[14], q[16], q[18], q[20]], -5);
constraint int_lin_le([7, 6, -1, 1, 5], [q[4], q[10], q[19], q[20], q[21]], 123);
constraint int_lin_le([8, -1, 2, 4, 4], [q[5], q[15], q[16], q[18], q[24]], 125);
constraint int_lin_le([8, 2, -8, 10, -3], [q[7], q[9], q[13], q[21], q[27]], 39);
constraint int_lin_le([8, 6, 5, 8, 7], [q[3], q[8], q[15], q[25], q[27]], 233);
constraint int_lin_le([9, 1, -1, -4, -3], [q[5], q[6], q[18], q[23], q[29]], 42);
solve  :: int_search(q, first_fail, indomain_min, complete) satisfy;
