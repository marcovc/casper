predicate all_different_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate lex_lesseq_int(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..15] of var 1..10: q :: output_array([1..15]);
constraint int_lin_le([-10, 4, -10, 9, 2], [q[2], q[7], q[9], q[10], q[12]], 16);
constraint int_lin_le([-9, 1, -5, -1, -1], [q[5], q[8], q[12], q[14], q[15]], -67);
constraint int_lin_le([-9, 10, -3, 1, -8], [q[6], q[7], q[8], q[10], q[12]], -86);
constraint int_lin_le([-8, -3, 2, 5, -9], [q[4], q[5], q[8], q[9], q[11]], -47);
constraint int_lin_le([-8, -1, -4, -4, 7], [q[1], q[3], q[11], q[14], q[15]], -44);
constraint int_lin_le([-4, -8, 8, -5, 4], [q[3], q[4], q[7], q[9], q[13]], -110);
constraint int_lin_le([-3, 7, -4, 2, 8], [q[3], q[4], q[6], q[13], q[14]], 69);
constraint int_lin_le([1, 2, -10, -6, 10], [q[1], q[8], q[9], q[10], q[15]], -5);
constraint int_lin_le([1, 3, -4, 9, -8], [q[2], q[3], q[5], q[9], q[15]], 20);
constraint int_lin_le([1, 7, -1, -2, 7], [q[1], q[2], q[10], q[12], q[15]], 61);
constraint int_lin_le([2, 4, 1, -5, -10], [q[2], q[7], q[11], q[13], q[14]], -68);
constraint int_lin_le([3, -8, 3, 7, 3], [q[3], q[4], q[7], q[10], q[11]], 33);
constraint int_lin_le([3, -6, -1, 2, 4], [q[2], q[5], q[7], q[8], q[9]], 16);
constraint int_lin_le([4, -4, -2, -8, 8], [q[5], q[6], q[8], q[11], q[14]], 29);
constraint int_lin_le([4, 7, -1, 9, 9], [q[4], q[5], q[6], q[8], q[13]], 106);
constraint int_lin_le([5, -3, -7, -6, 10], [q[1], q[2], q[6], q[9], q[13]], 11);
constraint int_lin_le([5, 10, -10, 7, -1], [q[6], q[7], q[10], q[14], q[15]], -6);
constraint int_lin_le([6, -1, -5, 7, -3], [q[3], q[4], q[5], q[6], q[12]], 60);
constraint int_lin_le([8, -7, 2, -3, 4], [q[1], q[10], q[11], q[12], q[15]], 45);
constraint int_lin_le([8, -2, 9, 5, 4], [q[1], q[4], q[11], q[13], q[14]], 122);
solve  :: int_search(q, first_fail, indomain_min, complete) satisfy;
