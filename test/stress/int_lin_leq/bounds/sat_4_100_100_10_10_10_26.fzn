predicate all_different_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate lex_lesseq_int(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..100] of var 1..10: q :: output_array([1..100]);
constraint int_lin_le([-9, 1, 6, 7, -2, 5, 9, -7, -3, -7, 10, 2, -10, -5, 1, 8, -6, 2, 5, -8, 10, 2, -8, 9, -4, -5, -4, 3, -4, 1, -5, -2, -6, -10, 8, -7, -8, -4, -9, 5, 1, -1, 1, 10, -6, 4, -8, 3, 4, 1, 1, 6, -8, 6, -10, -3, 1, -5, -6, -6, -10, 5, 6, -2, 7, 10, 9, 8, -8, 3, 1, -6, 5, -5, -3, -10, 4, -10, 3, 8, -7, -10, 5, 7, -8, -1, -6, 8, 5, -1, 6, -8, 10, -9, 9, 10, 1, 5, 8, 5], [q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[10], q[11], q[12], q[13], q[14], q[15], q[16], q[17], q[18], q[19], q[20], q[21], q[22], q[23], q[24], q[25], q[26], q[27], q[28], q[29], q[30], q[31], q[32], q[33], q[34], q[35], q[36], q[37], q[38], q[39], q[40], q[41], q[42], q[43], q[44], q[45], q[46], q[47], q[48], q[49], q[50], q[51], q[52], q[53], q[54], q[55], q[56], q[57], q[58], q[59], q[60], q[61], q[62], q[63], q[64], q[65], q[66], q[67], q[68], q[69], q[70], q[71], q[72], q[73], q[74], q[75], q[76], q[77], q[78], q[79], q[80], q[81], q[82], q[83], q[84], q[85], q[86], q[87], q[88], q[89], q[90], q[91], q[92], q[93], q[94], q[95], q[96], q[97], q[98], q[99], q[100]], -244);
constraint int_lin_le([-6, 1, 1, -10, 4, 1, 6, -6, 8, 7, 10, 7, -9, 3, -1, 1, -9, 8, -6, -4, -7, 9, -1, 7, 7, 8, 4, 1, 1, -1, -6, 7, 4, -1, -7, -8, 1, -1, -1, -7, -1, -10, 7, 5, -10, 5, -1, -3, 8, -4, -9, -1, 10, -6, -2, 2, -1, -1, 7, -3, -9, 8, 9, 5, -8, -6, 5, -7, -1, 6, -2, 6, 9, 7, 1, -2, -1, -10, 7, 8, 1, -9, 3, -1, 5, -7, -3, 2, 7, -1, 4, -5, -8, -10, 2, -4, -1, -9, -6, -3], [q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[10], q[11], q[12], q[13], q[14], q[15], q[16], q[17], q[18], q[19], q[20], q[21], q[22], q[23], q[24], q[25], q[26], q[27], q[28], q[29], q[30], q[31], q[32], q[33], q[34], q[35], q[36], q[37], q[38], q[39], q[40], q[41], q[42], q[43], q[44], q[45], q[46], q[47], q[48], q[49], q[50], q[51], q[52], q[53], q[54], q[55], q[56], q[57], q[58], q[59], q[60], q[61], q[62], q[63], q[64], q[65], q[66], q[67], q[68], q[69], q[70], q[71], q[72], q[73], q[74], q[75], q[76], q[77], q[78], q[79], q[80], q[81], q[82], q[83], q[84], q[85], q[86], q[87], q[88], q[89], q[90], q[91], q[92], q[93], q[94], q[95], q[96], q[97], q[98], q[99], q[100]], -39);
constraint int_lin_le([6, -3, -4, 3, 8, 4, -5, -5, 5, 3, -1, 7, 2, -7, 1, -7, -10, -9, -1, 6, 3, 1, -8, 8, 9, -10, -3, 4, -10, 2, -1, -8, -6, -5, 7, -3, -4, -4, 1, -3, 8, 3, 3, 1, 6, 4, 7, 4, -10, 9, 7, -9, -2, -5, -1, 3, -2, 1, 10, -1, -1, -8, 2, -9, 4, -8, 1, -2, 7, 2, -7, -7, -1, -9, 1, 10, -5, -2, -3, -9, -9, -7, 6, 9, -7, 1, 10, 10, -9, 2, 5, -3, -8, 6, 3, -10, -3, 1, -6, -10], [q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[10], q[11], q[12], q[13], q[14], q[15], q[16], q[17], q[18], q[19], q[20], q[21], q[22], q[23], q[24], q[25], q[26], q[27], q[28], q[29], q[30], q[31], q[32], q[33], q[34], q[35], q[36], q[37], q[38], q[39], q[40], q[41], q[42], q[43], q[44], q[45], q[46], q[47], q[48], q[49], q[50], q[51], q[52], q[53], q[54], q[55], q[56], q[57], q[58], q[59], q[60], q[61], q[62], q[63], q[64], q[65], q[66], q[67], q[68], q[69], q[70], q[71], q[72], q[73], q[74], q[75], q[76], q[77], q[78], q[79], q[80], q[81], q[82], q[83], q[84], q[85], q[86], q[87], q[88], q[89], q[90], q[91], q[92], q[93], q[94], q[95], q[96], q[97], q[98], q[99], q[100]], -270);
constraint int_lin_le([8, 6, -1, 4, 10, -6, -9, -1, -1, 10, -8, 2, 10, -1, -3, -6, -6, -6, -7, -1, 8, 9, 8, -8, -4, -5, -3, 3, 9, 6, 7, 8, -4, 3, -4, -2, -8, 9, 8, 2, 6, 10, -7, -2, -1, 2, -10, -8, 10, 3, 5, 6, -2, 4, -10, 3, 1, -8, -1, -2, 2, -3, 1, -8, 5, 8, -1, 8, 5, 9, -1, 6, -4, -5, 2, -9, -1, -5, -7, 9, 2, -1, 7, -5, 4, -7, -8, -10, 7, -4, 4, 5, 9, -6, -4, -5, -8, -1, 1, -3], [q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[10], q[11], q[12], q[13], q[14], q[15], q[16], q[17], q[18], q[19], q[20], q[21], q[22], q[23], q[24], q[25], q[26], q[27], q[28], q[29], q[30], q[31], q[32], q[33], q[34], q[35], q[36], q[37], q[38], q[39], q[40], q[41], q[42], q[43], q[44], q[45], q[46], q[47], q[48], q[49], q[50], q[51], q[52], q[53], q[54], q[55], q[56], q[57], q[58], q[59], q[60], q[61], q[62], q[63], q[64], q[65], q[66], q[67], q[68], q[69], q[70], q[71], q[72], q[73], q[74], q[75], q[76], q[77], q[78], q[79], q[80], q[81], q[82], q[83], q[84], q[85], q[86], q[87], q[88], q[89], q[90], q[91], q[92], q[93], q[94], q[95], q[96], q[97], q[98], q[99], q[100]], 77);
solve  :: int_search(q, first_fail, indomain_min, complete) satisfy;
