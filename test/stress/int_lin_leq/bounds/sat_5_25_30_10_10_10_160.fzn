predicate all_different_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate lex_lesseq_int(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..30] of var 1..10: q :: output_array([1..30]);
constraint int_lin_le([-7, 4, 7, -4, 3, -9, 2, 7, 2, 9, -4, 9, -10, 1, -4, 7, 4, 9, -9, -6, -6, 7, -7, 4, -9], [q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[10], q[13], q[14], q[15], q[16], q[17], q[18], q[19], q[20], q[21], q[22], q[23], q[24], q[28], q[29], q[30]], 79);
constraint int_lin_le([-5, 8, -9, -1, 3, -7, 1, -7, 1, -8, -1, 10, -6, -9, -8, 6, 10, 6, -6, 7, -6, -3, -2, -8, -10], [q[1], q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[10], q[11], q[12], q[14], q[15], q[16], q[17], q[19], q[20], q[21], q[22], q[23], q[24], q[25], q[26], q[27], q[28]], -292);
constraint int_lin_le([-2, -7, 4, -1, 5, -3, -2, -8, -10, 9, 6, 3, -9, 3, -3, -2, -10, 5, -10, -5, -2, 8, 1, -7, 9], [q[1], q[2], q[3], q[5], q[7], q[8], q[9], q[10], q[11], q[12], q[13], q[14], q[15], q[16], q[17], q[18], q[20], q[22], q[23], q[24], q[26], q[27], q[28], q[29], q[30]], -175);
constraint int_lin_le([-2, 6, 7, -8, -4, 7, -3, -1, -1, 1, -7, 7, 7, 5, -6, -8, -6, -4, -6, 6, 5, -2, -1, 1, -9], [q[2], q[3], q[4], q[7], q[8], q[9], q[10], q[11], q[12], q[13], q[15], q[16], q[17], q[18], q[19], q[20], q[21], q[22], q[23], q[25], q[26], q[27], q[28], q[29], q[30]], -110);
constraint int_lin_le([10, -8, -1, 5, -7, 9, -7, 7, 8, 5, -4, 6, -8, 3, -4, 6, 10, -9, -1, -5, 6, 3, 7, -1, 8], [q[1], q[2], q[3], q[4], q[6], q[7], q[9], q[10], q[11], q[12], q[14], q[15], q[17], q[18], q[19], q[20], q[21], q[22], q[23], q[24], q[26], q[27], q[28], q[29], q[30]], 189);
solve  :: int_search(q, first_fail, indomain_min, complete) satisfy;
