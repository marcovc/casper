predicate all_different_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate lex_lesseq_int(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..30] of var 1..10: q :: output_array([1..30]);
constraint int_lin_le([-10, -7, -3, 5, -7], [q[2], q[20], q[24], q[26], q[29]], -120);
constraint int_lin_le([-10, -3, -10, -4, 10], [q[6], q[9], q[19], q[22], q[25]], -71);
constraint int_lin_le([-10, -3, 9, 5, 8], [q[5], q[9], q[10], q[17], q[28]], 31);
constraint int_lin_le([-9, -9, -1, -8, -4], [q[7], q[11], q[25], q[28], q[29]], -151);
constraint int_lin_le([-9, -1, -2, -2, 2], [q[5], q[7], q[12], q[23], q[26]], -62);
constraint int_lin_le([-9, 3, -8, 3, 3], [q[4], q[7], q[9], q[11], q[26]], -26);
constraint int_lin_le([-8, 1, 3, -9, 9], [q[7], q[14], q[19], q[27], q[28]], -51);
constraint int_lin_le([-8, 3, 4, 5, 10], [q[2], q[4], q[8], q[14], q[15]], 127);
constraint int_lin_le([-8, 6, -8, 4, -10], [q[1], q[3], q[5], q[27], q[29]], -57);
constraint int_lin_le([-7, 3, 9, -9, 2], [q[10], q[12], q[13], q[16], q[24]], -27);
constraint int_lin_le([-7, 5, 5, -9, 4], [q[11], q[13], q[15], q[16], q[27]], 8);
constraint int_lin_le([-7, 8, 2, -6, -1], [q[1], q[2], q[13], q[20], q[23]], -25);
constraint int_lin_le([-6, -9, -4, 5, -2], [q[8], q[17], q[18], q[20], q[25]], -74);
constraint int_lin_le([-6, 5, 9, 9, -10], [q[3], q[14], q[16], q[18], q[27]], 2);
constraint int_lin_le([-6, 6, 6, 8, 10], [q[6], q[10], q[14], q[22], q[24]], 161);
constraint int_lin_le([-6, 8, -1, -9, -8], [q[2], q[9], q[11], q[27], q[28]], -72);
constraint int_lin_le([-5, -3, -1, 5, 10], [q[4], q[12], q[19], q[26], q[30]], 28);
constraint int_lin_le([-5, -1, 1, 10, 6], [q[7], q[10], q[15], q[24], q[30]], 66);
constraint int_lin_le([-3, -9, -10, 3, 8], [q[1], q[3], q[10], q[13], q[20]], -42);
constraint int_lin_le([-3, 2, 6, -4, 3], [q[1], q[13], q[21], q[24], q[25]], 43);
constraint int_lin_le([-3, 5, -2, -1, -6], [q[1], q[20], q[21], q[23], q[29]], -15);
constraint int_lin_le([-3, 8, -3, 7, 5], [q[12], q[15], q[21], q[28], q[30]], 68);
constraint int_lin_le([-2, 7, -4, 2, -6], [q[3], q[8], q[14], q[23], q[26]], -54);
constraint int_lin_le([-2, 10, 8, -3, -5], [q[7], q[16], q[21], q[25], q[27]], 48);
constraint int_lin_le([-1, -10, -6, 2, 3], [q[2], q[13], q[16], q[19], q[23]], -50);
constraint int_lin_le([-1, 2, 4, 4, 9], [q[8], q[15], q[17], q[18], q[21]], 113);
constraint int_lin_le([-1, 6, -9, 2, 6], [q[1], q[2], q[5], q[8], q[25]], 46);
constraint int_lin_le([-1, 6, -1, 9, -8], [q[4], q[12], q[19], q[22], q[23]], 99);
constraint int_lin_le([-1, 8, -6, -1, 5], [q[4], q[17], q[21], q[28], q[29]], 18);
constraint int_lin_le([1, -4, 5, 10, 2], [q[2], q[10], q[11], q[15], q[30]], 95);
constraint int_lin_le([1, 6, 5, 3, -7], [q[1], q[17], q[18], q[21], q[23]], 56);
constraint int_lin_le([2, -3, 1, -4, 9], [q[9], q[17], q[22], q[24], q[29]], 19);
constraint int_lin_le([3, -5, -4, -1, -8], [q[19], q[24], q[25], q[29], q[30]], -94);
constraint int_lin_le([4, 1, 2, -5, -5], [q[3], q[6], q[13], q[14], q[15]], -51);
constraint int_lin_le([4, 7, 4, -9, 3], [q[5], q[9], q[13], q[22], q[25]], 55);
constraint int_lin_le([5, -5, -7, 1, -7], [q[7], q[14], q[18], q[20], q[21]], -70);
constraint int_lin_le([6, 6, 4, 3, -10], [q[6], q[7], q[20], q[27], q[30]], 131);
constraint int_lin_le([7, -5, -10, -3, 6], [q[1], q[8], q[11], q[18], q[30]], -28);
constraint int_lin_le([7, 1, 10, 9, -9], [q[3], q[6], q[10], q[23], q[28]], 75);
constraint int_lin_le([7, 5, 1, 2, 6], [q[4], q[6], q[14], q[16], q[22]], 127);
constraint int_lin_le([8, 2, 2, -8, 3], [q[3], q[8], q[18], q[24], q[26]], 27);
constraint int_lin_le([9, 4, 3, -7, 8], [q[4], q[6], q[12], q[16], q[17]], 91);
constraint int_lin_le([9, 5, -10, 3, -8], [q[5], q[8], q[11], q[12], q[26]], 10);
constraint int_lin_le([10, -9, 8, -5, -7], [q[9], q[19], q[20], q[22], q[26]], 29);
constraint int_lin_le([10, 2, -6, 3, 8], [q[3], q[5], q[6], q[27], q[30]], 49);
solve  :: int_search(q, first_fail, indomain_min, complete) satisfy;
