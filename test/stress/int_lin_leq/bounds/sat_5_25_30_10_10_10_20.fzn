predicate all_different_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate lex_lesseq_int(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..30] of var 1..10: q :: output_array([1..30]);
constraint int_lin_le([-8, 5, 1, 7, -8, -4, 3, 9, 10, -1, 9, -7, 8, 7, 6, -4, -7, 3, -9, -9, -1, -2, -8, 10, -2], [q[1], q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[10], q[11], q[13], q[15], q[16], q[17], q[18], q[20], q[21], q[22], q[23], q[24], q[25], q[26], q[27], q[28], q[29]], -138);
constraint int_lin_le([-4, -7, -10, 6, -4, -6, -8, -9, -5, -8, 1, -9, 4, -5, 10, -2, -6, 8, 7, -9, 6, -8, -3, -3, -10], [q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[9], q[10], q[11], q[12], q[13], q[15], q[17], q[18], q[19], q[20], q[21], q[22], q[23], q[25], q[26], q[28], q[29], q[30]], -442);
constraint int_lin_le([-2, -2, 8, -1, 10, -4, -7, -7, 4, -6, 5, -7, 6, 8, -1, -8, 8, -4, 6, 6, -1, -6, 1, 3, -9], [q[1], q[2], q[3], q[4], q[6], q[7], q[8], q[9], q[11], q[12], q[13], q[15], q[16], q[17], q[18], q[19], q[20], q[21], q[22], q[23], q[24], q[25], q[26], q[28], q[29]], -95);
constraint int_lin_le([7, 4, -8, 5, 1, -3, 3, 4, 2, -9, 1, 6, 1, 10, -4, -4, 3, -3, 9, 3, 1, 1, 5, 5, 3], [q[1], q[2], q[3], q[4], q[5], q[6], q[8], q[9], q[10], q[11], q[13], q[14], q[15], q[16], q[17], q[18], q[19], q[20], q[21], q[23], q[24], q[25], q[27], q[28], q[30]], 263);
constraint int_lin_le([8, -8, -1, -1, -8, 1, -4, 9, 10, 9, -10, -5, 4, -9, -4, -5, -7, -7, -10, -9, 8, 4, 3, 3, 1], [q[1], q[2], q[3], q[4], q[5], q[6], q[8], q[9], q[11], q[12], q[13], q[14], q[15], q[16], q[17], q[18], q[19], q[22], q[23], q[24], q[25], q[27], q[28], q[29], q[30]], -149);
solve  :: int_search(q, first_fail, indomain_min, complete) satisfy;
