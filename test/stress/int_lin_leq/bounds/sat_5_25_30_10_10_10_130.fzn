predicate all_different_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate lex_lesseq_int(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..30] of var 1..10: q :: output_array([1..30]);
constraint int_lin_le([-4, -8, 4, -5, 10, -10, -1, -10, 7, -6, -8, 2, 2, 7, 3, -1, -5, -2, 1, -4, -8, 1, -8, -1, -4], [q[2], q[3], q[4], q[6], q[7], q[8], q[9], q[10], q[11], q[12], q[15], q[16], q[17], q[18], q[19], q[21], q[22], q[23], q[24], q[25], q[26], q[27], q[28], q[29], q[30]], -368);
constraint int_lin_le([-3, -4, -5, -1, 5, 7, -1, 1, -8, 5, -5, 10, 4, 8, 3, 8, -6, 7, -5, -10, 1, 1, -1, 2, -6], [q[1], q[2], q[3], q[4], q[5], q[6], q[8], q[9], q[11], q[12], q[13], q[14], q[15], q[16], q[17], q[18], q[19], q[20], q[21], q[22], q[23], q[24], q[26], q[27], q[29]], -30);
constraint int_lin_le([-3, 1, -5, -5, 1, -6, -1, 3, 9, -8, -9, 1, 1, -3, -2, -1, 2, 4, 1, 9, 1, 4, 8, 5, -7], [q[1], q[3], q[4], q[5], q[6], q[7], q[8], q[9], q[10], q[11], q[13], q[14], q[15], q[17], q[19], q[20], q[22], q[23], q[24], q[25], q[26], q[27], q[28], q[29], q[30]], 100);
constraint int_lin_le([-2, -1, -1, -5, -7, -7, -7, -1, 7, -1, 3, -3, 5, 4, 7, -1, -7, 6, 7, 6, 4, 3, 6, -2, -9], [q[1], q[2], q[3], q[4], q[5], q[6], q[8], q[9], q[10], q[13], q[14], q[15], q[16], q[17], q[18], q[19], q[20], q[21], q[22], q[23], q[24], q[25], q[26], q[28], q[30]], 74);
constraint int_lin_le([1, -1, -7, -5, -10, -1, 6, 8, -5, -5, -5, 9, -2, 10, -10, 3, -10, 8, -7, -6, -1, -10, 2, -3, -1], [q[1], q[2], q[3], q[4], q[5], q[6], q[7], q[9], q[10], q[11], q[12], q[13], q[14], q[15], q[16], q[18], q[19], q[20], q[22], q[23], q[24], q[25], q[27], q[29], q[30]], -389);
solve  :: int_search(q, first_fail, indomain_min, complete) satisfy;
