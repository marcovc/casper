predicate all_different_int(array [int] of var int: x);
predicate disjoint(var set of int: s1, var set of int: s2);
predicate lex_lesseq_int(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..30] of var 1..10: q :: output_array([1..30]);
constraint int_lin_le([-10, 6, 5, 8, -10], [q[6], q[18], q[19], q[27], q[30]], 4);
constraint int_lin_le([-9, -3, -1, 7, -4], [q[6], q[7], q[14], q[23], q[27]], -37);
constraint int_lin_le([-9, -2, -1, 9, 5], [q[17], q[18], q[24], q[27], q[29]], -1);
constraint int_lin_le([-9, -1, -6, -5, 5], [q[1], q[3], q[5], q[21], q[24]], -60);
constraint int_lin_le([-9, 1, 5, -5, -9], [q[6], q[9], q[14], q[17], q[25]], -84);
constraint int_lin_le([-8, -6, 5, 6, 8], [q[1], q[2], q[21], q[28], q[30]], 31);
constraint int_lin_le([-8, -4, -3, 2, -6], [q[9], q[10], q[14], q[22], q[29]], -50);
constraint int_lin_le([-8, 8, -2, -2, -2], [q[3], q[8], q[13], q[26], q[27]], -12);
constraint int_lin_le([-7, -5, -7, -6, -10], [q[1], q[3], q[21], q[26], q[27]], -114);
constraint int_lin_le([-7, -1, 5, 1, 4], [q[5], q[7], q[11], q[12], q[14]], 2);
constraint int_lin_le([-7, 7, 5, 10, -1], [q[1], q[5], q[12], q[24], q[30]], 42);
constraint int_lin_le([-6, -7, 5, 8, 1], [q[2], q[10], q[13], q[24], q[26]], 12);
constraint int_lin_le([-5, 1, 2, -8, 1], [q[1], q[2], q[21], q[25], q[30]], -30);
constraint int_lin_le([-5, 5, 8, 10, 8], [q[4], q[6], q[13], q[20], q[28]], 209);
constraint int_lin_le([-5, 7, 4, 6, -5], [q[12], q[15], q[17], q[19], q[23]], 77);
constraint int_lin_le([-4, -2, -7, 10, -6], [q[16], q[20], q[24], q[25], q[29]], -69);
constraint int_lin_le([-4, 6, 9, -7, 8], [q[8], q[10], q[15], q[19], q[28]], 71);
constraint int_lin_le([-3, -10, -1, 3, -3], [q[10], q[18], q[20], q[23], q[29]], -98);
constraint int_lin_le([-3, 2, -7, -5, 4], [q[12], q[13], q[15], q[18], q[21]], -87);
constraint int_lin_le([-3, 3, -5, 6, -4], [q[1], q[10], q[21], q[22], q[29]], 9);
constraint int_lin_le([-3, 4, -10, -1, 5], [q[3], q[9], q[16], q[20], q[24]], -102);
constraint int_lin_le([-2, -9, 10, 10, -6], [q[5], q[7], q[10], q[14], q[16]], -16);
constraint int_lin_le([-2, -5, -9, -2, -8], [q[8], q[11], q[18], q[22], q[24]], -147);
constraint int_lin_le([-2, 10, -10, -2, -10], [q[2], q[7], q[8], q[10], q[14]], -97);
constraint int_lin_le([-1, -5, -7, 8, 4], [q[7], q[11], q[12], q[23], q[25]], 31);
constraint int_lin_le([-1, 7, 2, 5, 8], [q[3], q[4], q[8], q[10], q[19]], 137);
constraint int_lin_le([-1, 8, 3, -2, -4], [q[2], q[9], q[12], q[13], q[20]], -33);
constraint int_lin_le([1, -10, 6, 2, -7], [q[2], q[9], q[25], q[29], q[30]], -12);
constraint int_lin_le([1, -4, -2, -6, -8], [q[6], q[9], q[11], q[20], q[30]], -85);
constraint int_lin_le([1, -3, -7, -5, -9], [q[6], q[9], q[13], q[15], q[22]], -137);
constraint int_lin_le([2, -5, 3, 4, 8], [q[16], q[20], q[23], q[26], q[28]], 87);
constraint int_lin_le([2, 8, 8, 3, -9], [q[3], q[15], q[19], q[21], q[22]], 106);
constraint int_lin_le([4, -10, -9, -7, -7], [q[1], q[12], q[25], q[27], q[28]], -108);
constraint int_lin_le([5, 5, -3, -5, -1], [q[2], q[11], q[15], q[19], q[22]], -27);
constraint int_lin_le([5, 6, -2, -6, 4], [q[4], q[5], q[8], q[15], q[17]], 7);
constraint int_lin_le([5, 6, 9, 3, -9], [q[1], q[3], q[4], q[17], q[27]], 79);
constraint int_lin_le([6, -10, 3, -7, -7], [q[5], q[8], q[14], q[17], q[23]], -96);
constraint int_lin_le([6, -3, -7, -9, -8], [q[4], q[7], q[16], q[21], q[28]], -121);
constraint int_lin_le([7, -10, -3, -4, 2], [q[4], q[7], q[16], q[18], q[29]], -52);
constraint int_lin_le([8, -3, 6, 6, -2], [q[6], q[19], q[23], q[28], q[30]], 110);
constraint int_lin_le([8, 4, -3, -8, 5], [q[7], q[8], q[20], q[25], q[27]], 24);
constraint int_lin_le([9, -10, -1, 1, -10], [q[2], q[13], q[14], q[26], q[28]], -114);
constraint int_lin_le([10, -3, -4, 1, 7], [q[11], q[16], q[18], q[25], q[26]], 5);
constraint int_lin_le([10, 8, -3, -6, 1], [q[4], q[17], q[22], q[29], q[30]], 42);
constraint int_lin_le([10, 10, 5, 3, -1], [q[5], q[9], q[11], q[22], q[26]], 93);
solve  :: int_search(q, first_fail, indomain_min, complete) satisfy;
