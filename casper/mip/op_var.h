/************************************************************************** *   This file is part of CaSPER (http://proteina.di.fct.unl.pt/casper).   *
*
 *                                                                         *
 *   Copyright:                                                            *
 *   2005-2008 - Marco Correia <marco.v.correia@gmail.com>                 *
 *                                                                         *
 *   Licensed under the Apache License, Version 2.0 (the "License");       * 
 *   you may not use this file except in compliance with the License.      * 
 *   You may obtain a copy of the License at                               * 
 *            http://www.apache.org/licenses/LICENSE-2.0                   * 
 *   Unless required by applicable law or agreed to in writing, software   * 
 *   distributed under the License is distributed on an                    * 
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,          * 
 *   either express or implied.                                            * 
 *   See the License for the specific language governing permissions and   * 
 *   limitations under the License.                                        *
 \*************************************************************************/
/************************************************************************** *   This file is part of CaSPER (http://proteina.di.fct.unl.pt/casper).   *
*
 *                                                                         *
 *   Copyright:                                                            *
 *   2005-2008 - Marco Correia <marco.v.correia@gmail.com>                 *
 *                                                                         *
 *   Licensed under the Apache License, Version 2.0 (the "License");       * 
 *   you may not use this file except in compliance with the License.      * 
 *   You may obtain a copy of the License at                               * 
 *            http://www.apache.org/licenses/LICENSE-2.0                   * 
 *   Unless required by applicable law or agreed to in writing, software   * 
 *   distributed under the License is distributed on an                    * 
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,          * 
 *   either express or implied.                                            * 
 *   See the License for the specific language governing permissions and   * 
 *   limitations under the License.                                        *
 \*************************************************************************/
// --- RELATIONS (Compile time expressions) ---
namespace Casper {
/** Symmetric unary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel1<Sym,MIP::Var< T1> > operator-(const MIP::Var< T1>& rh) { return Rel1<Sym,MIP::Var< T1> >(rh);} /** Negation unary operator.  \ingroup LogicalRelations */ template< class T1 > inline Rel1<Not,MIP::Var< T1> > operator!(const MIP::Var< T1>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<MIP::Var< T1> >::Type,bool>::value, "operand to '!' (not) operator must have boolean evaluation type"); return Rel1<Not,MIP::Var< T1> >(rh);} /** Absolute value unary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel1<Abs,MIP::Var< T1> > abs(const MIP::Var< T1>& rh) { return Rel1<Abs,MIP::Var< T1> >(rh);}
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1, class T > inline Rel2<Equal,MIP::Var< T1>,T > operator==(const MIP::Var< T1>& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<MIP::Var< T1> >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,MIP::Var< T1>,T >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<GreaterEqual,MIP::Var< T1>,T > operator>=(const MIP::Var< T1>& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<MIP::Var< T1> >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,MIP::Var< T1>,T >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<LessEqual,MIP::Var< T1>,T > operator<=(const MIP::Var< T1>& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<MIP::Var< T1> >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,MIP::Var< T1>,T >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1, class T > inline Rel2<Distinct,MIP::Var< T1>,T > operator!=(const MIP::Var< T1>& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<MIP::Var< T1> >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,MIP::Var< T1>,T >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<Greater,MIP::Var< T1>,T > operator>(const MIP::Var< T1>& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<MIP::Var< T1> >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,MIP::Var< T1>,T >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<Less,MIP::Var< T1>,T > operator<(const MIP::Var< T1>& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<MIP::Var< T1> >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,MIP::Var< T1>,T >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Add,MIP::Var< T1>,T > operator+(const MIP::Var< T1>& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<MIP::Var< T1> >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,MIP::Var< T1>,T >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Sub,MIP::Var< T1>,T > operator-(const MIP::Var< T1>& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<MIP::Var< T1> >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,MIP::Var< T1>,T >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Mul,MIP::Var< T1>,T > operator*(const MIP::Var< T1>& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<MIP::Var< T1> >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,MIP::Var< T1>,T >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Div,MIP::Var< T1>,T > operator/(const MIP::Var< T1>& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<MIP::Var< T1> >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,MIP::Var< T1>,T >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T1, class T > inline Rel2<And,MIP::Var< T1>,T > operator&&(const MIP::Var< T1>& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<MIP::Var< T1> >::Type,bool>::value, "first operand to '&&' (and) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<T>::Type,bool>::value, "second operand to '&&' (and) operator must have boolean evaluation type"); return Rel2<And,MIP::Var< T1>,T >(lh,rh);} /** Logical OR operator.  \ingroup LogicalRelations */ template< class T1, class T > inline Rel2<Or,MIP::Var< T1>,T > operator||(const MIP::Var< T1>& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<MIP::Var< T1> >::Type,bool>::value, "first operand to '||' (or) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<T>::Type,bool>::value, "second operand to '||' (or) operator must have boolean evaluation type"); return Rel2<Or,MIP::Var< T1>,T >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ inline Rel2<Equal,int,MIP::Var< int> > operator==(const int& lh, const MIP::Var< int>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<MIP::Var< int> >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,int,MIP::Var< int> >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<GreaterEqual,int,MIP::Var< int> > operator>=(const int& lh, const MIP::Var< int>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<MIP::Var< int> >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,int,MIP::Var< int> >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<LessEqual,int,MIP::Var< int> > operator<=(const int& lh, const MIP::Var< int>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<MIP::Var< int> >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,int,MIP::Var< int> >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ inline Rel2<Distinct,int,MIP::Var< int> > operator!=(const int& lh, const MIP::Var< int>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<MIP::Var< int> >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,int,MIP::Var< int> >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ inline Rel2<Greater,int,MIP::Var< int> > operator>(const int& lh, const MIP::Var< int>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<MIP::Var< int> >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,int,MIP::Var< int> >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ inline Rel2<Less,int,MIP::Var< int> > operator<(const int& lh, const MIP::Var< int>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<MIP::Var< int> >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,int,MIP::Var< int> >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ inline Rel2<Add,int,MIP::Var< int> > operator+(const int& lh, const MIP::Var< int>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<MIP::Var< int> >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,int,MIP::Var< int> >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ inline Rel2<Sub,int,MIP::Var< int> > operator-(const int& lh, const MIP::Var< int>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<MIP::Var< int> >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,int,MIP::Var< int> >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ inline Rel2<Mul,int,MIP::Var< int> > operator*(const int& lh, const MIP::Var< int>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<MIP::Var< int> >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,int,MIP::Var< int> >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ inline Rel2<Div,int,MIP::Var< int> > operator/(const int& lh, const MIP::Var< int>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<MIP::Var< int> >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,int,MIP::Var< int> >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ inline Rel2<Equal,double,MIP::Var< double> > operator==(const double& lh, const MIP::Var< double>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<MIP::Var< double> >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,double,MIP::Var< double> >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<GreaterEqual,double,MIP::Var< double> > operator>=(const double& lh, const MIP::Var< double>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<MIP::Var< double> >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,double,MIP::Var< double> >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<LessEqual,double,MIP::Var< double> > operator<=(const double& lh, const MIP::Var< double>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<MIP::Var< double> >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,double,MIP::Var< double> >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ inline Rel2<Distinct,double,MIP::Var< double> > operator!=(const double& lh, const MIP::Var< double>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<MIP::Var< double> >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,double,MIP::Var< double> >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ inline Rel2<Greater,double,MIP::Var< double> > operator>(const double& lh, const MIP::Var< double>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<MIP::Var< double> >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,double,MIP::Var< double> >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ inline Rel2<Less,double,MIP::Var< double> > operator<(const double& lh, const MIP::Var< double>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<MIP::Var< double> >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,double,MIP::Var< double> >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ inline Rel2<Add,double,MIP::Var< double> > operator+(const double& lh, const MIP::Var< double>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<MIP::Var< double> >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,double,MIP::Var< double> >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ inline Rel2<Sub,double,MIP::Var< double> > operator-(const double& lh, const MIP::Var< double>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<MIP::Var< double> >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,double,MIP::Var< double> >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ inline Rel2<Mul,double,MIP::Var< double> > operator*(const double& lh, const MIP::Var< double>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<MIP::Var< double> >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,double,MIP::Var< double> >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ inline Rel2<Div,double,MIP::Var< double> > operator/(const double& lh, const MIP::Var< double>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<MIP::Var< double> >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,double,MIP::Var< double> >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ inline Rel2<Equal,float,MIP::Var< float> > operator==(const float& lh, const MIP::Var< float>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<MIP::Var< float> >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,float,MIP::Var< float> >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<GreaterEqual,float,MIP::Var< float> > operator>=(const float& lh, const MIP::Var< float>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<MIP::Var< float> >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,float,MIP::Var< float> >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<LessEqual,float,MIP::Var< float> > operator<=(const float& lh, const MIP::Var< float>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<MIP::Var< float> >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,float,MIP::Var< float> >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ inline Rel2<Distinct,float,MIP::Var< float> > operator!=(const float& lh, const MIP::Var< float>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<MIP::Var< float> >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,float,MIP::Var< float> >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ inline Rel2<Greater,float,MIP::Var< float> > operator>(const float& lh, const MIP::Var< float>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<MIP::Var< float> >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,float,MIP::Var< float> >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ inline Rel2<Less,float,MIP::Var< float> > operator<(const float& lh, const MIP::Var< float>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<MIP::Var< float> >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,float,MIP::Var< float> >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ inline Rel2<Add,float,MIP::Var< float> > operator+(const float& lh, const MIP::Var< float>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<MIP::Var< float> >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,float,MIP::Var< float> >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ inline Rel2<Sub,float,MIP::Var< float> > operator-(const float& lh, const MIP::Var< float>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<MIP::Var< float> >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,float,MIP::Var< float> >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ inline Rel2<Mul,float,MIP::Var< float> > operator*(const float& lh, const MIP::Var< float>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<MIP::Var< float> >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,float,MIP::Var< float> >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ inline Rel2<Div,float,MIP::Var< float> > operator/(const float& lh, const MIP::Var< float>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<MIP::Var< float> >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,float,MIP::Var< float> >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ inline Rel2<Equal,bool,MIP::Var< bool> > operator==(const bool& lh, const MIP::Var< bool>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<MIP::Var< bool> >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,bool,MIP::Var< bool> >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<GreaterEqual,bool,MIP::Var< bool> > operator>=(const bool& lh, const MIP::Var< bool>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<MIP::Var< bool> >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,bool,MIP::Var< bool> >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<LessEqual,bool,MIP::Var< bool> > operator<=(const bool& lh, const MIP::Var< bool>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<MIP::Var< bool> >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,bool,MIP::Var< bool> >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ inline Rel2<Distinct,bool,MIP::Var< bool> > operator!=(const bool& lh, const MIP::Var< bool>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<MIP::Var< bool> >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,bool,MIP::Var< bool> >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ inline Rel2<Greater,bool,MIP::Var< bool> > operator>(const bool& lh, const MIP::Var< bool>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<MIP::Var< bool> >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,bool,MIP::Var< bool> >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ inline Rel2<Less,bool,MIP::Var< bool> > operator<(const bool& lh, const MIP::Var< bool>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<MIP::Var< bool> >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,bool,MIP::Var< bool> >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ inline Rel2<Add,bool,MIP::Var< bool> > operator+(const bool& lh, const MIP::Var< bool>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<MIP::Var< bool> >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,bool,MIP::Var< bool> >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ inline Rel2<Sub,bool,MIP::Var< bool> > operator-(const bool& lh, const MIP::Var< bool>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<MIP::Var< bool> >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,bool,MIP::Var< bool> >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ inline Rel2<Mul,bool,MIP::Var< bool> > operator*(const bool& lh, const MIP::Var< bool>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<MIP::Var< bool> >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,bool,MIP::Var< bool> >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ inline Rel2<Div,bool,MIP::Var< bool> > operator/(const bool& lh, const MIP::Var< bool>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<MIP::Var< bool> >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,bool,MIP::Var< bool> >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ inline Rel2<And,bool,MIP::Var< bool> > operator&&(const bool& lh, const MIP::Var< bool>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type,bool>::value, "first operand to '&&' (and) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<MIP::Var< bool> >::Type,bool>::value, "second operand to '&&' (and) operator must have boolean evaluation type"); return Rel2<And,bool,MIP::Var< bool> >(lh,rh);} /** Logical OR operator.  \ingroup LogicalRelations */ inline Rel2<Or,bool,MIP::Var< bool> > operator||(const bool& lh, const MIP::Var< bool>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type,bool>::value, "first operand to '||' (or) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<MIP::Var< bool> >::Type,bool>::value, "second operand to '||' (or) operator must have boolean evaluation type"); return Rel2<Or,bool,MIP::Var< bool> >(lh,rh); }
}
