
import sys
import os

libPath = os.path.abspath('pyutils')
sys.path.append(libPath)

import objdb

print "/* THIS FILE WAS AUTOGENERATED FROM view.cpp.py */"
print "#include <casper/kernel/spexpr/expr.h>"
print "namespace Casper {"
print "namespace Detail {"

class ViewCreator:
	def __init__(self,t,ev=None,m=None):
		self.t = t
		self.ev = ev
		self.m = m
	def print1(self,f):
		print "template<>"
		print self.t+" Create<"+f+","+self.t+">::operator()(CP::Store& store, const "+f+"& f)"
		print "{	return "+self.t+"(store,f);	}"		
	def __call__(self,r,f):
		if r.properties["ev"]==self.ev and objdb.getCPModule(r)==self.m:
			self.print1(f)

def varArg(ev):
	if ev!="float":
		return None
	return "CP::Var<"+ev+">"

def refArg(ev):
	if ev!="float":
		return None
	return "Ref<"+ev+">"

for arg in ["CP::Var<float>"]:
	ViewCreator("CP::DomExpr<float>").print1(arg)
	ViewCreator("CP::BndExpr<float>").print1(arg)
	ViewCreator("CP::ValExpr<float>").print1(arg)

for arg in [varArg]:
	objdb.forAllRelOper(ViewCreator("CP::DomExpr<float>","float","real"),arg)
	objdb.forAllRelOper(ViewCreator("CP::BndExpr<float>","float","real"),arg)
	objdb.forAllRelOper(ViewCreator("CP::ValExpr<float>","float","real"),arg)

objdb.forAllRelPred(ViewCreator("CP::DomExpr<float>","float","real"))
objdb.forAllRelPred(ViewCreator("CP::BndExpr<float>","float","real"))
objdb.forAllRelPred(ViewCreator("CP::ValExpr<float>","float","real"))

print "}"
print "}"
