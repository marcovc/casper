/************************************************************************** *   This file is part of CaSPER (http://proteina.di.fct.unl.pt/casper).   *
*
 *                                                                         *
 *   Copyright:                                                            *
 *   2005-2011 - Marco Correia <marco.v.correia@gmail.com>                 *
 *                                                                         *
 *   Licensed under the Apache License, Version 2.0 (the "License");       * 
 *   you may not use this file except in compliance with the License.      * 
 *   You may obtain a copy of the License at                               * 
 *            http://www.apache.org/licenses/LICENSE-2.0                   * 
 *   Unless required by applicable law or agreed to in writing, software   * 
 *   distributed under the License is distributed on an                    * 
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,          * 
 *   either express or implied.                                            * 
 *   See the License for the specific language governing permissions and   * 
 *   limitations under the License.                                        *
 \*************************************************************************/
/************************************************************************** *   This file is part of CaSPER (http://proteina.di.fct.unl.pt/casper).   *
*
 *                                                                         *
 *   Copyright:                                                            *
 *   2005-2011 - Marco Correia <marco.v.correia@gmail.com>                 *
 *                                                                         *
 *   Licensed under the Apache License, Version 2.0 (the "License");       * 
 *   you may not use this file except in compliance with the License.      * 
 *   You may obtain a copy of the License at                               * 
 *            http://www.apache.org/licenses/LICENSE-2.0                   * 
 *   Unless required by applicable law or agreed to in writing, software   * 
 *   distributed under the License is distributed on an                    * 
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,          * 
 *   either express or implied.                                            * 
 *   See the License for the specific language governing permissions and   * 
 *   limitations under the License.                                        *
 \*************************************************************************/
// --- RELATIONS (Compile time expressions) ---
namespace Casper {
/** Symmetric unary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel1<Sym,CP::ValExpr< T1 > > operator-(const CP::ValExpr< T1 >& rh) { return Rel1<Sym,CP::ValExpr< T1 > >(rh);} /** Negation unary operator.  \ingroup LogicalRelations */ template< class T1 > inline Rel1<Not,CP::ValExpr< T1 > > operator!(const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::ValExpr< T1 > >::Type,bool>::value, "operand to '!' (not) operator must have boolean evaluation type"); return Rel1<Not,CP::ValExpr< T1 > >(rh);} /** Absolute value unary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel1<Abs,CP::ValExpr< T1 > > abs(const CP::ValExpr< T1 >& rh) { return Rel1<Abs,CP::ValExpr< T1 > >(rh);} /** Min value (from a sequence) unary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel1<Min,CP::ValExpr< T1 > > min(const CP::ValExpr< T1 >& rh) { return Rel1<Min,CP::ValExpr< T1 > >(rh);} /** Max value (from a sequence) unary operator. \ingroup ArithRelations */ template< class T1 > inline Rel1<Max,CP::ValExpr< T1 > > max(const CP::ValExpr< T1 >& rh) { return Rel1<Max,CP::ValExpr< T1 > >(rh);}
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1, class T > inline Rel2<Equal,CP::ValExpr< T1 >,T > operator==(const CP::ValExpr< T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::ValExpr< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,CP::ValExpr< T1 >,T >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<GreaterEqual,CP::ValExpr< T1 >,T > operator>=(const CP::ValExpr< T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::ValExpr< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,CP::ValExpr< T1 >,T >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<LessEqual,CP::ValExpr< T1 >,T > operator<=(const CP::ValExpr< T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::ValExpr< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,CP::ValExpr< T1 >,T >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1, class T > inline Rel2<Distinct,CP::ValExpr< T1 >,T > operator!=(const CP::ValExpr< T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::ValExpr< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,CP::ValExpr< T1 >,T >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<Greater,CP::ValExpr< T1 >,T > operator>(const CP::ValExpr< T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::ValExpr< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,CP::ValExpr< T1 >,T >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<Less,CP::ValExpr< T1 >,T > operator<(const CP::ValExpr< T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::ValExpr< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,CP::ValExpr< T1 >,T >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Add,CP::ValExpr< T1 >,T > operator+(const CP::ValExpr< T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::ValExpr< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,CP::ValExpr< T1 >,T >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Sub,CP::ValExpr< T1 >,T > operator-(const CP::ValExpr< T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::ValExpr< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,CP::ValExpr< T1 >,T >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Mul,CP::ValExpr< T1 >,T > operator*(const CP::ValExpr< T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::ValExpr< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,CP::ValExpr< T1 >,T >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Div,CP::ValExpr< T1 >,T > operator/(const CP::ValExpr< T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::ValExpr< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,CP::ValExpr< T1 >,T >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T1, class T > inline Rel2<And,CP::ValExpr< T1 >,T > operator&&(const CP::ValExpr< T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::ValExpr< T1 > >::Type,bool>::value, "first operand to '&&' (and) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<T>::Type,bool>::value, "second operand to '&&' (and) operator must have boolean evaluation type"); return Rel2<And,CP::ValExpr< T1 >,T >(lh,rh);} /** Logical OR operator.  \ingroup LogicalRelations */ template< class T1, class T > inline Rel2<Or,CP::ValExpr< T1 >,T > operator||(const CP::ValExpr< T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::ValExpr< T1 > >::Type,bool>::value, "first operand to '||' (or) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<T>::Type,bool>::value, "second operand to '||' (or) operator must have boolean evaluation type"); return Rel2<Or,CP::ValExpr< T1 >,T >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1 > inline Rel2<Equal,int,CP::ValExpr< T1 > > operator==(const int& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,int,CP::ValExpr< T1 > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<GreaterEqual,int,CP::ValExpr< T1 > > operator>=(const int& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,int,CP::ValExpr< T1 > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<LessEqual,int,CP::ValExpr< T1 > > operator<=(const int& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,int,CP::ValExpr< T1 > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1 > inline Rel2<Distinct,int,CP::ValExpr< T1 > > operator!=(const int& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,int,CP::ValExpr< T1 > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Greater,int,CP::ValExpr< T1 > > operator>(const int& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,int,CP::ValExpr< T1 > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Less,int,CP::ValExpr< T1 > > operator<(const int& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,int,CP::ValExpr< T1 > >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Add,int,CP::ValExpr< T1 > > operator+(const int& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,int,CP::ValExpr< T1 > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Sub,int,CP::ValExpr< T1 > > operator-(const int& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,int,CP::ValExpr< T1 > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Mul,int,CP::ValExpr< T1 > > operator*(const int& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,int,CP::ValExpr< T1 > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Div,int,CP::ValExpr< T1 > > operator/(const int& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,int,CP::ValExpr< T1 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1 > inline Rel2<Equal,double,CP::ValExpr< T1 > > operator==(const double& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,double,CP::ValExpr< T1 > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<GreaterEqual,double,CP::ValExpr< T1 > > operator>=(const double& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,double,CP::ValExpr< T1 > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<LessEqual,double,CP::ValExpr< T1 > > operator<=(const double& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,double,CP::ValExpr< T1 > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1 > inline Rel2<Distinct,double,CP::ValExpr< T1 > > operator!=(const double& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,double,CP::ValExpr< T1 > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Greater,double,CP::ValExpr< T1 > > operator>(const double& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,double,CP::ValExpr< T1 > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Less,double,CP::ValExpr< T1 > > operator<(const double& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,double,CP::ValExpr< T1 > >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Add,double,CP::ValExpr< T1 > > operator+(const double& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,double,CP::ValExpr< T1 > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Sub,double,CP::ValExpr< T1 > > operator-(const double& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,double,CP::ValExpr< T1 > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Mul,double,CP::ValExpr< T1 > > operator*(const double& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,double,CP::ValExpr< T1 > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Div,double,CP::ValExpr< T1 > > operator/(const double& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,double,CP::ValExpr< T1 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1 > inline Rel2<Equal,float,CP::ValExpr< T1 > > operator==(const float& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,float,CP::ValExpr< T1 > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<GreaterEqual,float,CP::ValExpr< T1 > > operator>=(const float& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,float,CP::ValExpr< T1 > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<LessEqual,float,CP::ValExpr< T1 > > operator<=(const float& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,float,CP::ValExpr< T1 > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1 > inline Rel2<Distinct,float,CP::ValExpr< T1 > > operator!=(const float& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,float,CP::ValExpr< T1 > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Greater,float,CP::ValExpr< T1 > > operator>(const float& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,float,CP::ValExpr< T1 > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Less,float,CP::ValExpr< T1 > > operator<(const float& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,float,CP::ValExpr< T1 > >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Add,float,CP::ValExpr< T1 > > operator+(const float& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,float,CP::ValExpr< T1 > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Sub,float,CP::ValExpr< T1 > > operator-(const float& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,float,CP::ValExpr< T1 > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Mul,float,CP::ValExpr< T1 > > operator*(const float& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,float,CP::ValExpr< T1 > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Div,float,CP::ValExpr< T1 > > operator/(const float& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,float,CP::ValExpr< T1 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1 > inline Rel2<Equal,bool,CP::ValExpr< T1 > > operator==(const bool& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,bool,CP::ValExpr< T1 > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<GreaterEqual,bool,CP::ValExpr< T1 > > operator>=(const bool& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,bool,CP::ValExpr< T1 > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<LessEqual,bool,CP::ValExpr< T1 > > operator<=(const bool& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,bool,CP::ValExpr< T1 > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1 > inline Rel2<Distinct,bool,CP::ValExpr< T1 > > operator!=(const bool& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,bool,CP::ValExpr< T1 > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Greater,bool,CP::ValExpr< T1 > > operator>(const bool& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,bool,CP::ValExpr< T1 > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Less,bool,CP::ValExpr< T1 > > operator<(const bool& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,bool,CP::ValExpr< T1 > >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Add,bool,CP::ValExpr< T1 > > operator+(const bool& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,bool,CP::ValExpr< T1 > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Sub,bool,CP::ValExpr< T1 > > operator-(const bool& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,bool,CP::ValExpr< T1 > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Mul,bool,CP::ValExpr< T1 > > operator*(const bool& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,bool,CP::ValExpr< T1 > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Div,bool,CP::ValExpr< T1 > > operator/(const bool& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::ValExpr< T1 > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,bool,CP::ValExpr< T1 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T1 > inline Rel2<And,bool,CP::ValExpr< T1 > > operator&&(const bool& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type,bool>::value, "first operand to '&&' (and) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<CP::ValExpr< T1 > >::Type,bool>::value, "second operand to '&&' (and) operator must have boolean evaluation type"); return Rel2<And,bool,CP::ValExpr< T1 > >(lh,rh);} /** Logical OR operator.  \ingroup LogicalRelations */ template< class T1 > inline Rel2<Or,bool,CP::ValExpr< T1 > > operator||(const bool& lh, const CP::ValExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type,bool>::value, "first operand to '||' (or) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<CP::ValExpr< T1 > >::Type,bool>::value, "second operand to '||' (or) operator must have boolean evaluation type"); return Rel2<Or,bool,CP::ValExpr< T1 > >(lh,rh); }
/** Symmetric unary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel1<Sym,CP::BndExpr< T1 > > operator-(const CP::BndExpr< T1 >& rh) { return Rel1<Sym,CP::BndExpr< T1 > >(rh);} /** Negation unary operator.  \ingroup LogicalRelations */ template< class T1 > inline Rel1<Not,CP::BndExpr< T1 > > operator!(const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::BndExpr< T1 > >::Type,bool>::value, "operand to '!' (not) operator must have boolean evaluation type"); return Rel1<Not,CP::BndExpr< T1 > >(rh);} /** Absolute value unary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel1<Abs,CP::BndExpr< T1 > > abs(const CP::BndExpr< T1 >& rh) { return Rel1<Abs,CP::BndExpr< T1 > >(rh);} /** Min value (from a sequence) unary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel1<Min,CP::BndExpr< T1 > > min(const CP::BndExpr< T1 >& rh) { return Rel1<Min,CP::BndExpr< T1 > >(rh);} /** Max value (from a sequence) unary operator. \ingroup ArithRelations */ template< class T1 > inline Rel1<Max,CP::BndExpr< T1 > > max(const CP::BndExpr< T1 >& rh) { return Rel1<Max,CP::BndExpr< T1 > >(rh);}
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1, class T > inline Rel2<Equal,CP::BndExpr< T1 >,T > operator==(const CP::BndExpr< T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::BndExpr< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,CP::BndExpr< T1 >,T >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<GreaterEqual,CP::BndExpr< T1 >,T > operator>=(const CP::BndExpr< T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::BndExpr< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,CP::BndExpr< T1 >,T >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<LessEqual,CP::BndExpr< T1 >,T > operator<=(const CP::BndExpr< T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::BndExpr< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,CP::BndExpr< T1 >,T >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1, class T > inline Rel2<Distinct,CP::BndExpr< T1 >,T > operator!=(const CP::BndExpr< T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::BndExpr< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,CP::BndExpr< T1 >,T >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<Greater,CP::BndExpr< T1 >,T > operator>(const CP::BndExpr< T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::BndExpr< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,CP::BndExpr< T1 >,T >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<Less,CP::BndExpr< T1 >,T > operator<(const CP::BndExpr< T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::BndExpr< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,CP::BndExpr< T1 >,T >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Add,CP::BndExpr< T1 >,T > operator+(const CP::BndExpr< T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::BndExpr< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,CP::BndExpr< T1 >,T >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Sub,CP::BndExpr< T1 >,T > operator-(const CP::BndExpr< T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::BndExpr< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,CP::BndExpr< T1 >,T >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Mul,CP::BndExpr< T1 >,T > operator*(const CP::BndExpr< T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::BndExpr< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,CP::BndExpr< T1 >,T >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Div,CP::BndExpr< T1 >,T > operator/(const CP::BndExpr< T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::BndExpr< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,CP::BndExpr< T1 >,T >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T1, class T > inline Rel2<And,CP::BndExpr< T1 >,T > operator&&(const CP::BndExpr< T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::BndExpr< T1 > >::Type,bool>::value, "first operand to '&&' (and) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<T>::Type,bool>::value, "second operand to '&&' (and) operator must have boolean evaluation type"); return Rel2<And,CP::BndExpr< T1 >,T >(lh,rh);} /** Logical OR operator.  \ingroup LogicalRelations */ template< class T1, class T > inline Rel2<Or,CP::BndExpr< T1 >,T > operator||(const CP::BndExpr< T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::BndExpr< T1 > >::Type,bool>::value, "first operand to '||' (or) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<T>::Type,bool>::value, "second operand to '||' (or) operator must have boolean evaluation type"); return Rel2<Or,CP::BndExpr< T1 >,T >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1 > inline Rel2<Equal,int,CP::BndExpr< T1 > > operator==(const int& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,int,CP::BndExpr< T1 > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<GreaterEqual,int,CP::BndExpr< T1 > > operator>=(const int& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,int,CP::BndExpr< T1 > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<LessEqual,int,CP::BndExpr< T1 > > operator<=(const int& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,int,CP::BndExpr< T1 > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1 > inline Rel2<Distinct,int,CP::BndExpr< T1 > > operator!=(const int& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,int,CP::BndExpr< T1 > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Greater,int,CP::BndExpr< T1 > > operator>(const int& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,int,CP::BndExpr< T1 > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Less,int,CP::BndExpr< T1 > > operator<(const int& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,int,CP::BndExpr< T1 > >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Add,int,CP::BndExpr< T1 > > operator+(const int& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,int,CP::BndExpr< T1 > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Sub,int,CP::BndExpr< T1 > > operator-(const int& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,int,CP::BndExpr< T1 > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Mul,int,CP::BndExpr< T1 > > operator*(const int& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,int,CP::BndExpr< T1 > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Div,int,CP::BndExpr< T1 > > operator/(const int& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,int,CP::BndExpr< T1 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1 > inline Rel2<Equal,double,CP::BndExpr< T1 > > operator==(const double& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,double,CP::BndExpr< T1 > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<GreaterEqual,double,CP::BndExpr< T1 > > operator>=(const double& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,double,CP::BndExpr< T1 > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<LessEqual,double,CP::BndExpr< T1 > > operator<=(const double& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,double,CP::BndExpr< T1 > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1 > inline Rel2<Distinct,double,CP::BndExpr< T1 > > operator!=(const double& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,double,CP::BndExpr< T1 > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Greater,double,CP::BndExpr< T1 > > operator>(const double& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,double,CP::BndExpr< T1 > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Less,double,CP::BndExpr< T1 > > operator<(const double& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,double,CP::BndExpr< T1 > >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Add,double,CP::BndExpr< T1 > > operator+(const double& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,double,CP::BndExpr< T1 > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Sub,double,CP::BndExpr< T1 > > operator-(const double& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,double,CP::BndExpr< T1 > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Mul,double,CP::BndExpr< T1 > > operator*(const double& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,double,CP::BndExpr< T1 > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Div,double,CP::BndExpr< T1 > > operator/(const double& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,double,CP::BndExpr< T1 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1 > inline Rel2<Equal,float,CP::BndExpr< T1 > > operator==(const float& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,float,CP::BndExpr< T1 > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<GreaterEqual,float,CP::BndExpr< T1 > > operator>=(const float& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,float,CP::BndExpr< T1 > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<LessEqual,float,CP::BndExpr< T1 > > operator<=(const float& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,float,CP::BndExpr< T1 > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1 > inline Rel2<Distinct,float,CP::BndExpr< T1 > > operator!=(const float& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,float,CP::BndExpr< T1 > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Greater,float,CP::BndExpr< T1 > > operator>(const float& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,float,CP::BndExpr< T1 > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Less,float,CP::BndExpr< T1 > > operator<(const float& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,float,CP::BndExpr< T1 > >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Add,float,CP::BndExpr< T1 > > operator+(const float& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,float,CP::BndExpr< T1 > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Sub,float,CP::BndExpr< T1 > > operator-(const float& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,float,CP::BndExpr< T1 > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Mul,float,CP::BndExpr< T1 > > operator*(const float& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,float,CP::BndExpr< T1 > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Div,float,CP::BndExpr< T1 > > operator/(const float& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,float,CP::BndExpr< T1 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1 > inline Rel2<Equal,bool,CP::BndExpr< T1 > > operator==(const bool& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,bool,CP::BndExpr< T1 > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<GreaterEqual,bool,CP::BndExpr< T1 > > operator>=(const bool& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,bool,CP::BndExpr< T1 > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<LessEqual,bool,CP::BndExpr< T1 > > operator<=(const bool& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,bool,CP::BndExpr< T1 > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1 > inline Rel2<Distinct,bool,CP::BndExpr< T1 > > operator!=(const bool& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,bool,CP::BndExpr< T1 > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Greater,bool,CP::BndExpr< T1 > > operator>(const bool& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,bool,CP::BndExpr< T1 > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1 > inline Rel2<Less,bool,CP::BndExpr< T1 > > operator<(const bool& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,bool,CP::BndExpr< T1 > >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Add,bool,CP::BndExpr< T1 > > operator+(const bool& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,bool,CP::BndExpr< T1 > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel2<Sub,bool,CP::BndExpr< T1 > > operator-(const bool& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,bool,CP::BndExpr< T1 > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Mul,bool,CP::BndExpr< T1 > > operator*(const bool& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,bool,CP::BndExpr< T1 > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class T1 > inline Rel2<Div,bool,CP::BndExpr< T1 > > operator/(const bool& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::BndExpr< T1 > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,bool,CP::BndExpr< T1 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T1 > inline Rel2<And,bool,CP::BndExpr< T1 > > operator&&(const bool& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type,bool>::value, "first operand to '&&' (and) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<CP::BndExpr< T1 > >::Type,bool>::value, "second operand to '&&' (and) operator must have boolean evaluation type"); return Rel2<And,bool,CP::BndExpr< T1 > >(lh,rh);} /** Logical OR operator.  \ingroup LogicalRelations */ template< class T1 > inline Rel2<Or,bool,CP::BndExpr< T1 > > operator||(const bool& lh, const CP::BndExpr< T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type,bool>::value, "first operand to '||' (or) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<CP::BndExpr< T1 > >::Type,bool>::value, "second operand to '||' (or) operator must have boolean evaluation type"); return Rel2<Or,bool,CP::BndExpr< T1 > >(lh,rh); }
/** Symmetric unary operator.  \ingroup ArithRelations */ template< class T1, class T2 > inline Rel1<Sym,CP::DomExpr< T1,T2> > operator-(const CP::DomExpr< T1,T2>& rh) { return Rel1<Sym,CP::DomExpr< T1,T2> >(rh);} /** Negation unary operator.  \ingroup LogicalRelations */ template< class T1, class T2 > inline Rel1<Not,CP::DomExpr< T1,T2> > operator!(const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type,bool>::value, "operand to '!' (not) operator must have boolean evaluation type"); return Rel1<Not,CP::DomExpr< T1,T2> >(rh);} /** Absolute value unary operator.  \ingroup ArithRelations */ template< class T1, class T2 > inline Rel1<Abs,CP::DomExpr< T1,T2> > abs(const CP::DomExpr< T1,T2>& rh) { return Rel1<Abs,CP::DomExpr< T1,T2> >(rh);} /** Min value (from a sequence) unary operator.  \ingroup ArithRelations */ template< class T1, class T2 > inline Rel1<Min,CP::DomExpr< T1,T2> > min(const CP::DomExpr< T1,T2>& rh) { return Rel1<Min,CP::DomExpr< T1,T2> >(rh);} /** Max value (from a sequence) unary operator. \ingroup ArithRelations */ template< class T1, class T2 > inline Rel1<Max,CP::DomExpr< T1,T2> > max(const CP::DomExpr< T1,T2>& rh) { return Rel1<Max,CP::DomExpr< T1,T2> >(rh);}
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1, class T2, class T > inline Rel2<Equal,CP::DomExpr< T1,T2>,T > operator==(const CP::DomExpr< T1,T2>& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,CP::DomExpr< T1,T2>,T >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T2, class T > inline Rel2<GreaterEqual,CP::DomExpr< T1,T2>,T > operator>=(const CP::DomExpr< T1,T2>& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,CP::DomExpr< T1,T2>,T >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T2, class T > inline Rel2<LessEqual,CP::DomExpr< T1,T2>,T > operator<=(const CP::DomExpr< T1,T2>& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,CP::DomExpr< T1,T2>,T >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1, class T2, class T > inline Rel2<Distinct,CP::DomExpr< T1,T2>,T > operator!=(const CP::DomExpr< T1,T2>& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,CP::DomExpr< T1,T2>,T >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1, class T2, class T > inline Rel2<Greater,CP::DomExpr< T1,T2>,T > operator>(const CP::DomExpr< T1,T2>& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,CP::DomExpr< T1,T2>,T >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1, class T2, class T > inline Rel2<Less,CP::DomExpr< T1,T2>,T > operator<(const CP::DomExpr< T1,T2>& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,CP::DomExpr< T1,T2>,T >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ template< class T1, class T2, class T > inline Rel2<Add,CP::DomExpr< T1,T2>,T > operator+(const CP::DomExpr< T1,T2>& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,CP::DomExpr< T1,T2>,T >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1, class T2, class T > inline Rel2<Sub,CP::DomExpr< T1,T2>,T > operator-(const CP::DomExpr< T1,T2>& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,CP::DomExpr< T1,T2>,T >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1, class T2, class T > inline Rel2<Mul,CP::DomExpr< T1,T2>,T > operator*(const CP::DomExpr< T1,T2>& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,CP::DomExpr< T1,T2>,T >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class T1, class T2, class T > inline Rel2<Div,CP::DomExpr< T1,T2>,T > operator/(const CP::DomExpr< T1,T2>& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,CP::DomExpr< T1,T2>,T >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T1, class T2, class T > inline Rel2<And,CP::DomExpr< T1,T2>,T > operator&&(const CP::DomExpr< T1,T2>& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type,bool>::value, "first operand to '&&' (and) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<T>::Type,bool>::value, "second operand to '&&' (and) operator must have boolean evaluation type"); return Rel2<And,CP::DomExpr< T1,T2>,T >(lh,rh);} /** Logical OR operator.  \ingroup LogicalRelations */ template< class T1, class T2, class T > inline Rel2<Or,CP::DomExpr< T1,T2>,T > operator||(const CP::DomExpr< T1,T2>& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type,bool>::value, "first operand to '||' (or) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<T>::Type,bool>::value, "second operand to '||' (or) operator must have boolean evaluation type"); return Rel2<Or,CP::DomExpr< T1,T2>,T >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1, class T2 > inline Rel2<Equal,int,CP::DomExpr< T1,T2> > operator==(const int& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,int,CP::DomExpr< T1,T2> >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T2 > inline Rel2<GreaterEqual,int,CP::DomExpr< T1,T2> > operator>=(const int& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,int,CP::DomExpr< T1,T2> >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T2 > inline Rel2<LessEqual,int,CP::DomExpr< T1,T2> > operator<=(const int& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,int,CP::DomExpr< T1,T2> >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1, class T2 > inline Rel2<Distinct,int,CP::DomExpr< T1,T2> > operator!=(const int& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,int,CP::DomExpr< T1,T2> >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1, class T2 > inline Rel2<Greater,int,CP::DomExpr< T1,T2> > operator>(const int& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,int,CP::DomExpr< T1,T2> >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1, class T2 > inline Rel2<Less,int,CP::DomExpr< T1,T2> > operator<(const int& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,int,CP::DomExpr< T1,T2> >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ template< class T1, class T2 > inline Rel2<Add,int,CP::DomExpr< T1,T2> > operator+(const int& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,int,CP::DomExpr< T1,T2> >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1, class T2 > inline Rel2<Sub,int,CP::DomExpr< T1,T2> > operator-(const int& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,int,CP::DomExpr< T1,T2> >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1, class T2 > inline Rel2<Mul,int,CP::DomExpr< T1,T2> > operator*(const int& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,int,CP::DomExpr< T1,T2> >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class T1, class T2 > inline Rel2<Div,int,CP::DomExpr< T1,T2> > operator/(const int& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,int,CP::DomExpr< T1,T2> >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1, class T2 > inline Rel2<Equal,float,CP::DomExpr< T1,T2> > operator==(const float& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,float,CP::DomExpr< T1,T2> >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T2 > inline Rel2<GreaterEqual,float,CP::DomExpr< T1,T2> > operator>=(const float& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,float,CP::DomExpr< T1,T2> >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T2 > inline Rel2<LessEqual,float,CP::DomExpr< T1,T2> > operator<=(const float& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,float,CP::DomExpr< T1,T2> >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1, class T2 > inline Rel2<Distinct,float,CP::DomExpr< T1,T2> > operator!=(const float& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,float,CP::DomExpr< T1,T2> >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1, class T2 > inline Rel2<Greater,float,CP::DomExpr< T1,T2> > operator>(const float& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,float,CP::DomExpr< T1,T2> >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1, class T2 > inline Rel2<Less,float,CP::DomExpr< T1,T2> > operator<(const float& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,float,CP::DomExpr< T1,T2> >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ template< class T1, class T2 > inline Rel2<Add,float,CP::DomExpr< T1,T2> > operator+(const float& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,float,CP::DomExpr< T1,T2> >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1, class T2 > inline Rel2<Sub,float,CP::DomExpr< T1,T2> > operator-(const float& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,float,CP::DomExpr< T1,T2> >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1, class T2 > inline Rel2<Mul,float,CP::DomExpr< T1,T2> > operator*(const float& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,float,CP::DomExpr< T1,T2> >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class T1, class T2 > inline Rel2<Div,float,CP::DomExpr< T1,T2> > operator/(const float& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,float,CP::DomExpr< T1,T2> >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1, class T2 > inline Rel2<Equal,double,CP::DomExpr< T1,T2> > operator==(const double& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,double,CP::DomExpr< T1,T2> >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T2 > inline Rel2<GreaterEqual,double,CP::DomExpr< T1,T2> > operator>=(const double& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,double,CP::DomExpr< T1,T2> >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T2 > inline Rel2<LessEqual,double,CP::DomExpr< T1,T2> > operator<=(const double& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,double,CP::DomExpr< T1,T2> >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1, class T2 > inline Rel2<Distinct,double,CP::DomExpr< T1,T2> > operator!=(const double& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,double,CP::DomExpr< T1,T2> >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1, class T2 > inline Rel2<Greater,double,CP::DomExpr< T1,T2> > operator>(const double& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,double,CP::DomExpr< T1,T2> >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1, class T2 > inline Rel2<Less,double,CP::DomExpr< T1,T2> > operator<(const double& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,double,CP::DomExpr< T1,T2> >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ template< class T1, class T2 > inline Rel2<Add,double,CP::DomExpr< T1,T2> > operator+(const double& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,double,CP::DomExpr< T1,T2> >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1, class T2 > inline Rel2<Sub,double,CP::DomExpr< T1,T2> > operator-(const double& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,double,CP::DomExpr< T1,T2> >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1, class T2 > inline Rel2<Mul,double,CP::DomExpr< T1,T2> > operator*(const double& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,double,CP::DomExpr< T1,T2> >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class T1, class T2 > inline Rel2<Div,double,CP::DomExpr< T1,T2> > operator/(const double& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,double,CP::DomExpr< T1,T2> >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1, class T2 > inline Rel2<Equal,bool,CP::DomExpr< T1,T2> > operator==(const bool& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,bool,CP::DomExpr< T1,T2> >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T2 > inline Rel2<GreaterEqual,bool,CP::DomExpr< T1,T2> > operator>=(const bool& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,bool,CP::DomExpr< T1,T2> >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T2 > inline Rel2<LessEqual,bool,CP::DomExpr< T1,T2> > operator<=(const bool& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,bool,CP::DomExpr< T1,T2> >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1, class T2 > inline Rel2<Distinct,bool,CP::DomExpr< T1,T2> > operator!=(const bool& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,bool,CP::DomExpr< T1,T2> >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1, class T2 > inline Rel2<Greater,bool,CP::DomExpr< T1,T2> > operator>(const bool& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,bool,CP::DomExpr< T1,T2> >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1, class T2 > inline Rel2<Less,bool,CP::DomExpr< T1,T2> > operator<(const bool& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,bool,CP::DomExpr< T1,T2> >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ template< class T1, class T2 > inline Rel2<Add,bool,CP::DomExpr< T1,T2> > operator+(const bool& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,bool,CP::DomExpr< T1,T2> >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1, class T2 > inline Rel2<Sub,bool,CP::DomExpr< T1,T2> > operator-(const bool& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,bool,CP::DomExpr< T1,T2> >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1, class T2 > inline Rel2<Mul,bool,CP::DomExpr< T1,T2> > operator*(const bool& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,bool,CP::DomExpr< T1,T2> >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class T1, class T2 > inline Rel2<Div,bool,CP::DomExpr< T1,T2> > operator/(const bool& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,bool,CP::DomExpr< T1,T2> >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T1, class T2 > inline Rel2<And,bool,CP::DomExpr< T1,T2> > operator&&(const bool& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type,bool>::value, "first operand to '&&' (and) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type,bool>::value, "second operand to '&&' (and) operator must have boolean evaluation type"); return Rel2<And,bool,CP::DomExpr< T1,T2> >(lh,rh);} /** Logical OR operator.  \ingroup LogicalRelations */ template< class T1, class T2 > inline Rel2<Or,bool,CP::DomExpr< T1,T2> > operator||(const bool& lh, const CP::DomExpr< T1,T2>& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type,bool>::value, "first operand to '||' (or) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<CP::DomExpr< T1,T2> >::Type,bool>::value, "second operand to '||' (or) operator must have boolean evaluation type"); return Rel2<Or,bool,CP::DomExpr< T1,T2> >(lh,rh); }

} // Casper
