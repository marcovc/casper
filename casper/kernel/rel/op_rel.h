/************************************************************************** *   This file is part of CaSPER (http://proteina.di.fct.unl.pt/casper).   *
*
 *                                                                         *
 *   Copyright:                                                            *
 *   2005-2011 - Marco Correia <marco.v.correia@gmail.com>                 *
 *                                                                         *
 *   Licensed under the Apache License, Version 2.0 (the "License");       * 
 *   you may not use this file except in compliance with the License.      * 
 *   You may obtain a copy of the License at                               * 
 *            http://www.apache.org/licenses/LICENSE-2.0                   * 
 *   Unless required by applicable law or agreed to in writing, software   * 
 *   distributed under the License is distributed on an                    * 
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,          * 
 *   either express or implied.                                            * 
 *   See the License for the specific language governing permissions and   * 
 *   limitations under the License.                                        *
 \*************************************************************************/
/************************************************************************** *   This file is part of CaSPER (http://proteina.di.fct.unl.pt/casper).   *
*
 *                                                                         *
 *   Copyright:                                                            *
 *   2005-2011 - Marco Correia <marco.v.correia@gmail.com>                 *
 *                                                                         *
 *   Licensed under the Apache License, Version 2.0 (the "License");       * 
 *   you may not use this file except in compliance with the License.      * 
 *   You may obtain a copy of the License at                               * 
 *            http://www.apache.org/licenses/LICENSE-2.0                   * 
 *   Unless required by applicable law or agreed to in writing, software   * 
 *   distributed under the License is distributed on an                    * 
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,          * 
 *   either express or implied.                                            * 
 *   See the License for the specific language governing permissions and   * 
 *   limitations under the License.                                        *
 \*************************************************************************/
// --- RELATIONS (Compile time expressions) ---

namespace Casper {

// Rel0
/** Symmetric unary operator.  \ingroup ArithRelations */ template< class Op > inline Rel1<Sym,Rel0< Op > > operator-(const Rel0< Op >& rh) { return Rel1<Sym,Rel0< Op > >(rh);} /** Negation unary operator.  \ingroup LogicalRelations */ template< class Op > inline Rel1<Not,Rel0< Op > > operator!(const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel0< Op > >::Type,bool>::value, "operand to '!' (not) operator must have boolean evaluation type"); return Rel1<Not,Rel0< Op > >(rh);} /** Absolute value unary operator.  \ingroup ArithRelations */ template< class Op > inline Rel1<Abs,Rel0< Op > > abs(const Rel0< Op >& rh) { return Rel1<Abs,Rel0< Op > >(rh);} /** Min value (from a sequence) unary operator.  \ingroup ArithRelations */ template< class Op > inline Rel1<Min,Rel0< Op > > min(const Rel0< Op >& rh) { return Rel1<Min,Rel0< Op > >(rh);} /** Max value (from a sequence) unary operator. \ingroup ArithRelations */ template< class Op > inline Rel1<Max,Rel0< Op > > max(const Rel0< Op >& rh) { return Rel1<Max,Rel0< Op > >(rh);}
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T > inline Rel2<Equal,Rel0< Op >,T > operator==(const Rel0< Op >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel0< Op > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,Rel0< Op >,T >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T > inline Rel2<GreaterEqual,Rel0< Op >,T > operator>=(const Rel0< Op >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel0< Op > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,Rel0< Op >,T >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T > inline Rel2<LessEqual,Rel0< Op >,T > operator<=(const Rel0< Op >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel0< Op > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,Rel0< Op >,T >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T > inline Rel2<Distinct,Rel0< Op >,T > operator!=(const Rel0< Op >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel0< Op > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,Rel0< Op >,T >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T > inline Rel2<Greater,Rel0< Op >,T > operator>(const Rel0< Op >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel0< Op > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,Rel0< Op >,T >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T > inline Rel2<Less,Rel0< Op >,T > operator<(const Rel0< Op >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel0< Op > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,Rel0< Op >,T >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T > inline Rel2<Add,Rel0< Op >,T > operator+(const Rel0< Op >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel0< Op > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,Rel0< Op >,T >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T > inline Rel2<Sub,Rel0< Op >,T > operator-(const Rel0< Op >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel0< Op > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,Rel0< Op >,T >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T > inline Rel2<Mul,Rel0< Op >,T > operator*(const Rel0< Op >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel0< Op > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,Rel0< Op >,T >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T > inline Rel2<Div,Rel0< Op >,T > operator/(const Rel0< Op >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel0< Op > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,Rel0< Op >,T >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op, class T > inline Rel2<And,Rel0< Op >,T > operator&&(const Rel0< Op >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel0< Op > >::Type,bool>::value, "first operand to '&&' (and) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<T>::Type,bool>::value, "second operand to '&&' (and) operator must have boolean evaluation type"); return Rel2<And,Rel0< Op >,T >(lh,rh);} /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op, class T > inline Rel2<Or,Rel0< Op >,T > operator||(const Rel0< Op >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel0< Op > >::Type,bool>::value, "first operand to '||' (or) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<T>::Type,bool>::value, "second operand to '||' (or) operator must have boolean evaluation type"); return Rel2<Or,Rel0< Op >,T >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op > inline Rel2<Equal,int,Rel0< Op > > operator==(const int& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,int,Rel0< Op > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op > inline Rel2<GreaterEqual,int,Rel0< Op > > operator>=(const int& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,int,Rel0< Op > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op > inline Rel2<LessEqual,int,Rel0< Op > > operator<=(const int& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,int,Rel0< Op > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op > inline Rel2<Distinct,int,Rel0< Op > > operator!=(const int& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,int,Rel0< Op > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op > inline Rel2<Greater,int,Rel0< Op > > operator>(const int& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,int,Rel0< Op > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op > inline Rel2<Less,int,Rel0< Op > > operator<(const int& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,int,Rel0< Op > >(lh,rh);}
/** Addition binary operator.  \ingroup ArithRelations */ template< class Op > inline Rel2<Add,int,Rel0< Op > > operator+(const int& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,int,Rel0< Op > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op > inline Rel2<Sub,int,Rel0< Op > > operator-(const int& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,int,Rel0< Op > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op > inline Rel2<Mul,int,Rel0< Op > > operator*(const int& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,int,Rel0< Op > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class Op > inline Rel2<Div,int,Rel0< Op > > operator/(const int& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,int,Rel0< Op > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op > inline Rel2<Equal,double,Rel0< Op > > operator==(const double& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,double,Rel0< Op > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op > inline Rel2<GreaterEqual,double,Rel0< Op > > operator>=(const double& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,double,Rel0< Op > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op > inline Rel2<LessEqual,double,Rel0< Op > > operator<=(const double& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,double,Rel0< Op > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op > inline Rel2<Distinct,double,Rel0< Op > > operator!=(const double& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,double,Rel0< Op > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op > inline Rel2<Greater,double,Rel0< Op > > operator>(const double& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,double,Rel0< Op > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op > inline Rel2<Less,double,Rel0< Op > > operator<(const double& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,double,Rel0< Op > >(lh,rh);}
/** Addition binary operator.  \ingroup ArithRelations */ template< class Op > inline Rel2<Add,double,Rel0< Op > > operator+(const double& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,double,Rel0< Op > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op > inline Rel2<Sub,double,Rel0< Op > > operator-(const double& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,double,Rel0< Op > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op > inline Rel2<Mul,double,Rel0< Op > > operator*(const double& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,double,Rel0< Op > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class Op > inline Rel2<Div,double,Rel0< Op > > operator/(const double& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,double,Rel0< Op > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op > inline Rel2<Equal,float,Rel0< Op > > operator==(const float& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,float,Rel0< Op > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op > inline Rel2<GreaterEqual,float,Rel0< Op > > operator>=(const float& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,float,Rel0< Op > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op > inline Rel2<LessEqual,float,Rel0< Op > > operator<=(const float& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,float,Rel0< Op > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op > inline Rel2<Distinct,float,Rel0< Op > > operator!=(const float& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,float,Rel0< Op > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op > inline Rel2<Greater,float,Rel0< Op > > operator>(const float& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,float,Rel0< Op > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op > inline Rel2<Less,float,Rel0< Op > > operator<(const float& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,float,Rel0< Op > >(lh,rh);}
/** Addition binary operator.  \ingroup ArithRelations */ template< class Op > inline Rel2<Add,float,Rel0< Op > > operator+(const float& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,float,Rel0< Op > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op > inline Rel2<Sub,float,Rel0< Op > > operator-(const float& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,float,Rel0< Op > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op > inline Rel2<Mul,float,Rel0< Op > > operator*(const float& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,float,Rel0< Op > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class Op > inline Rel2<Div,float,Rel0< Op > > operator/(const float& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,float,Rel0< Op > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op > inline Rel2<Equal,bool,Rel0< Op > > operator==(const bool& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,bool,Rel0< Op > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op > inline Rel2<GreaterEqual,bool,Rel0< Op > > operator>=(const bool& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,bool,Rel0< Op > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op > inline Rel2<LessEqual,bool,Rel0< Op > > operator<=(const bool& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,bool,Rel0< Op > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op > inline Rel2<Distinct,bool,Rel0< Op > > operator!=(const bool& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,bool,Rel0< Op > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op > inline Rel2<Greater,bool,Rel0< Op > > operator>(const bool& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,bool,Rel0< Op > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op > inline Rel2<Less,bool,Rel0< Op > > operator<(const bool& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,bool,Rel0< Op > >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ template< class Op > inline Rel2<Add,bool,Rel0< Op > > operator+(const bool& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,bool,Rel0< Op > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op > inline Rel2<Sub,bool,Rel0< Op > > operator-(const bool& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,bool,Rel0< Op > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op > inline Rel2<Mul,bool,Rel0< Op > > operator*(const bool& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,bool,Rel0< Op > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class Op > inline Rel2<Div,bool,Rel0< Op > > operator/(const bool& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel0< Op > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,bool,Rel0< Op > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op > inline Rel2<And,bool,Rel0< Op > > operator&&(const bool& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type,bool>::value, "first operand to '&&' (and) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<Rel0< Op > >::Type,bool>::value, "second operand to '&&' (and) operator must have boolean evaluation type"); return Rel2<And,bool,Rel0< Op > >(lh,rh);} /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op > inline Rel2<Or,bool,Rel0< Op > > operator||(const bool& lh, const Rel0< Op >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type,bool>::value, "first operand to '||' (or) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<Rel0< Op > >::Type,bool>::value, "second operand to '||' (or) operator must have boolean evaluation type"); return Rel2<Or,bool,Rel0< Op > >(lh,rh); }

// Rel1
/** Symmetric unary operator.  \ingroup ArithRelations */ template< class Op, class T1 > inline Rel1<Sym,Rel1< Op,T1 > > operator-(const Rel1< Op,T1 >& rh) { return Rel1<Sym,Rel1< Op,T1 > >(rh);} /** Negation unary operator.  \ingroup LogicalRelations */ template< class Op, class T1 > inline Rel1<Not,Rel1< Op,T1 > > operator!(const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel1< Op,T1 > >::Type,bool>::value, "operand to '!' (not) operator must have boolean evaluation type"); return Rel1<Not,Rel1< Op,T1 > >(rh);} /** Absolute value unary operator.  \ingroup ArithRelations */ template< class Op, class T1 > inline Rel1<Abs,Rel1< Op,T1 > > abs(const Rel1< Op,T1 >& rh) { return Rel1<Abs,Rel1< Op,T1 > >(rh);} /** Min value (from a sequence) unary operator.  \ingroup ArithRelations */ template< class Op, class T1 > inline Rel1<Min,Rel1< Op,T1 > > min(const Rel1< Op,T1 >& rh) { return Rel1<Min,Rel1< Op,T1 > >(rh);} /** Max value (from a sequence) unary operator. \ingroup ArithRelations */ template< class Op, class T1 > inline Rel1<Max,Rel1< Op,T1 > > max(const Rel1< Op,T1 >& rh) { return Rel1<Max,Rel1< Op,T1 > >(rh);}
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T > inline Rel2<Equal,Rel1< Op,T1 >,T > operator==(const Rel1< Op,T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel1< Op,T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,Rel1< Op,T1 >,T >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T > inline Rel2<GreaterEqual,Rel1< Op,T1 >,T > operator>=(const Rel1< Op,T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel1< Op,T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,Rel1< Op,T1 >,T >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T > inline Rel2<LessEqual,Rel1< Op,T1 >,T > operator<=(const Rel1< Op,T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel1< Op,T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,Rel1< Op,T1 >,T >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T > inline Rel2<Distinct,Rel1< Op,T1 >,T > operator!=(const Rel1< Op,T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel1< Op,T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,Rel1< Op,T1 >,T >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T > inline Rel2<Greater,Rel1< Op,T1 >,T > operator>(const Rel1< Op,T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel1< Op,T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,Rel1< Op,T1 >,T >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T > inline Rel2<Less,Rel1< Op,T1 >,T > operator<(const Rel1< Op,T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel1< Op,T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,Rel1< Op,T1 >,T >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T > inline Rel2<Add,Rel1< Op,T1 >,T > operator+(const Rel1< Op,T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel1< Op,T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,Rel1< Op,T1 >,T >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T > inline Rel2<Sub,Rel1< Op,T1 >,T > operator-(const Rel1< Op,T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel1< Op,T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,Rel1< Op,T1 >,T >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T > inline Rel2<Mul,Rel1< Op,T1 >,T > operator*(const Rel1< Op,T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel1< Op,T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,Rel1< Op,T1 >,T >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T > inline Rel2<Div,Rel1< Op,T1 >,T > operator/(const Rel1< Op,T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel1< Op,T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,Rel1< Op,T1 >,T >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op, class T1, class T > inline Rel2<And,Rel1< Op,T1 >,T > operator&&(const Rel1< Op,T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel1< Op,T1 > >::Type,bool>::value, "first operand to '&&' (and) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<T>::Type,bool>::value, "second operand to '&&' (and) operator must have boolean evaluation type"); return Rel2<And,Rel1< Op,T1 >,T >(lh,rh);} /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op, class T1, class T > inline Rel2<Or,Rel1< Op,T1 >,T > operator||(const Rel1< Op,T1 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel1< Op,T1 > >::Type,bool>::value, "first operand to '||' (or) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<T>::Type,bool>::value, "second operand to '||' (or) operator must have boolean evaluation type"); return Rel2<Or,Rel1< Op,T1 >,T >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1 > inline Rel2<Equal,int,Rel1< Op,T1 > > operator==(const int& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,int,Rel1< Op,T1 > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1 > inline Rel2<GreaterEqual,int,Rel1< Op,T1 > > operator>=(const int& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,int,Rel1< Op,T1 > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1 > inline Rel2<LessEqual,int,Rel1< Op,T1 > > operator<=(const int& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,int,Rel1< Op,T1 > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1 > inline Rel2<Distinct,int,Rel1< Op,T1 > > operator!=(const int& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,int,Rel1< Op,T1 > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1 > inline Rel2<Greater,int,Rel1< Op,T1 > > operator>(const int& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,int,Rel1< Op,T1 > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1 > inline Rel2<Less,int,Rel1< Op,T1 > > operator<(const int& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,int,Rel1< Op,T1 > >(lh,rh);}
/** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1 > inline Rel2<Add,int,Rel1< Op,T1 > > operator+(const int& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,int,Rel1< Op,T1 > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1 > inline Rel2<Sub,int,Rel1< Op,T1 > > operator-(const int& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,int,Rel1< Op,T1 > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1 > inline Rel2<Mul,int,Rel1< Op,T1 > > operator*(const int& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,int,Rel1< Op,T1 > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1 > inline Rel2<Div,int,Rel1< Op,T1 > > operator/(const int& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,int,Rel1< Op,T1 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1 > inline Rel2<Equal,double,Rel1< Op,T1 > > operator==(const double& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,double,Rel1< Op,T1 > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1 > inline Rel2<GreaterEqual,double,Rel1< Op,T1 > > operator>=(const double& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,double,Rel1< Op,T1 > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1 > inline Rel2<LessEqual,double,Rel1< Op,T1 > > operator<=(const double& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,double,Rel1< Op,T1 > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1 > inline Rel2<Distinct,double,Rel1< Op,T1 > > operator!=(const double& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,double,Rel1< Op,T1 > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1 > inline Rel2<Greater,double,Rel1< Op,T1 > > operator>(const double& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,double,Rel1< Op,T1 > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1 > inline Rel2<Less,double,Rel1< Op,T1 > > operator<(const double& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,double,Rel1< Op,T1 > >(lh,rh);}
/** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1 > inline Rel2<Add,double,Rel1< Op,T1 > > operator+(const double& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,double,Rel1< Op,T1 > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1 > inline Rel2<Sub,double,Rel1< Op,T1 > > operator-(const double& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,double,Rel1< Op,T1 > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1 > inline Rel2<Mul,double,Rel1< Op,T1 > > operator*(const double& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,double,Rel1< Op,T1 > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1 > inline Rel2<Div,double,Rel1< Op,T1 > > operator/(const double& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,double,Rel1< Op,T1 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1 > inline Rel2<Equal,float,Rel1< Op,T1 > > operator==(const float& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,float,Rel1< Op,T1 > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1 > inline Rel2<GreaterEqual,float,Rel1< Op,T1 > > operator>=(const float& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,float,Rel1< Op,T1 > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1 > inline Rel2<LessEqual,float,Rel1< Op,T1 > > operator<=(const float& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,float,Rel1< Op,T1 > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1 > inline Rel2<Distinct,float,Rel1< Op,T1 > > operator!=(const float& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,float,Rel1< Op,T1 > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1 > inline Rel2<Greater,float,Rel1< Op,T1 > > operator>(const float& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,float,Rel1< Op,T1 > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1 > inline Rel2<Less,float,Rel1< Op,T1 > > operator<(const float& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,float,Rel1< Op,T1 > >(lh,rh);}
/** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1 > inline Rel2<Add,float,Rel1< Op,T1 > > operator+(const float& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,float,Rel1< Op,T1 > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1 > inline Rel2<Sub,float,Rel1< Op,T1 > > operator-(const float& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,float,Rel1< Op,T1 > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1 > inline Rel2<Mul,float,Rel1< Op,T1 > > operator*(const float& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,float,Rel1< Op,T1 > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1 > inline Rel2<Div,float,Rel1< Op,T1 > > operator/(const float& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,float,Rel1< Op,T1 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1 > inline Rel2<Equal,bool,Rel1< Op,T1 > > operator==(const bool& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,bool,Rel1< Op,T1 > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1 > inline Rel2<GreaterEqual,bool,Rel1< Op,T1 > > operator>=(const bool& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,bool,Rel1< Op,T1 > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1 > inline Rel2<LessEqual,bool,Rel1< Op,T1 > > operator<=(const bool& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,bool,Rel1< Op,T1 > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1 > inline Rel2<Distinct,bool,Rel1< Op,T1 > > operator!=(const bool& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,bool,Rel1< Op,T1 > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1 > inline Rel2<Greater,bool,Rel1< Op,T1 > > operator>(const bool& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,bool,Rel1< Op,T1 > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1 > inline Rel2<Less,bool,Rel1< Op,T1 > > operator<(const bool& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,bool,Rel1< Op,T1 > >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1 > inline Rel2<Add,bool,Rel1< Op,T1 > > operator+(const bool& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,bool,Rel1< Op,T1 > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1 > inline Rel2<Sub,bool,Rel1< Op,T1 > > operator-(const bool& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,bool,Rel1< Op,T1 > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1 > inline Rel2<Mul,bool,Rel1< Op,T1 > > operator*(const bool& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,bool,Rel1< Op,T1 > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1 > inline Rel2<Div,bool,Rel1< Op,T1 > > operator/(const bool& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel1< Op,T1 > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,bool,Rel1< Op,T1 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op, class T1 > inline Rel2<And,bool,Rel1< Op,T1 > > operator&&(const bool& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type,bool>::value, "first operand to '&&' (and) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<Rel1< Op,T1 > >::Type,bool>::value, "second operand to '&&' (and) operator must have boolean evaluation type"); return Rel2<And,bool,Rel1< Op,T1 > >(lh,rh);} /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op, class T1 > inline Rel2<Or,bool,Rel1< Op,T1 > > operator||(const bool& lh, const Rel1< Op,T1 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type,bool>::value, "first operand to '||' (or) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<Rel1< Op,T1 > >::Type,bool>::value, "second operand to '||' (or) operator must have boolean evaluation type"); return Rel2<Or,bool,Rel1< Op,T1 > >(lh,rh); }

// Rel2
/** Symmetric unary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel1<Sym,Rel2< Op,T1,T2 > > operator-(const Rel2< Op,T1,T2 >& rh) { return Rel1<Sym,Rel2< Op,T1,T2 > >(rh);} /** Negation unary operator.  \ingroup LogicalRelations */ template< class Op, class T1, class T2 > inline Rel1<Not,Rel2< Op,T1,T2 > > operator!(const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type,bool>::value, "operand to '!' (not) operator must have boolean evaluation type"); return Rel1<Not,Rel2< Op,T1,T2 > >(rh);} /** Absolute value unary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel1<Abs,Rel2< Op,T1,T2 > > abs(const Rel2< Op,T1,T2 >& rh) { return Rel1<Abs,Rel2< Op,T1,T2 > >(rh);} /** Min value (from a sequence) unary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel1<Min,Rel2< Op,T1,T2 > > min(const Rel2< Op,T1,T2 >& rh) { return Rel1<Min,Rel2< Op,T1,T2 > >(rh);} /** Max value (from a sequence) unary operator. \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel1<Max,Rel2< Op,T1,T2 > > max(const Rel2< Op,T1,T2 >& rh) { return Rel1<Max,Rel2< Op,T1,T2 > >(rh);}
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T2, class T > inline Rel2<Equal,Rel2< Op,T1,T2 >,T > operator==(const Rel2< Op,T1,T2 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,Rel2< Op,T1,T2 >,T >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T > inline Rel2<GreaterEqual,Rel2< Op,T1,T2 >,T > operator>=(const Rel2< Op,T1,T2 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,Rel2< Op,T1,T2 >,T >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T > inline Rel2<LessEqual,Rel2< Op,T1,T2 >,T > operator<=(const Rel2< Op,T1,T2 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,Rel2< Op,T1,T2 >,T >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T2, class T > inline Rel2<Distinct,Rel2< Op,T1,T2 >,T > operator!=(const Rel2< Op,T1,T2 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,Rel2< Op,T1,T2 >,T >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T > inline Rel2<Greater,Rel2< Op,T1,T2 >,T > operator>(const Rel2< Op,T1,T2 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,Rel2< Op,T1,T2 >,T >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T > inline Rel2<Less,Rel2< Op,T1,T2 >,T > operator<(const Rel2< Op,T1,T2 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,Rel2< Op,T1,T2 >,T >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T > inline Rel2<Add,Rel2< Op,T1,T2 >,T > operator+(const Rel2< Op,T1,T2 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,Rel2< Op,T1,T2 >,T >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T > inline Rel2<Sub,Rel2< Op,T1,T2 >,T > operator-(const Rel2< Op,T1,T2 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,Rel2< Op,T1,T2 >,T >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T > inline Rel2<Mul,Rel2< Op,T1,T2 >,T > operator*(const Rel2< Op,T1,T2 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,Rel2< Op,T1,T2 >,T >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T > inline Rel2<Div,Rel2< Op,T1,T2 >,T > operator/(const Rel2< Op,T1,T2 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,Rel2< Op,T1,T2 >,T >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T > inline Rel2<And,Rel2< Op,T1,T2 >,T > operator&&(const Rel2< Op,T1,T2 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type,bool>::value, "first operand to '&&' (and) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<T>::Type,bool>::value, "second operand to '&&' (and) operator must have boolean evaluation type"); return Rel2<And,Rel2< Op,T1,T2 >,T >(lh,rh);} /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T > inline Rel2<Or,Rel2< Op,T1,T2 >,T > operator||(const Rel2< Op,T1,T2 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type,bool>::value, "first operand to '||' (or) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<T>::Type,bool>::value, "second operand to '||' (or) operator must have boolean evaluation type"); return Rel2<Or,Rel2< Op,T1,T2 >,T >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T2 > inline Rel2<Equal,int,Rel2< Op,T1,T2 > > operator==(const int& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,int,Rel2< Op,T1,T2 > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<GreaterEqual,int,Rel2< Op,T1,T2 > > operator>=(const int& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,int,Rel2< Op,T1,T2 > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<LessEqual,int,Rel2< Op,T1,T2 > > operator<=(const int& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,int,Rel2< Op,T1,T2 > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<Distinct,int,Rel2< Op,T1,T2 > > operator!=(const int& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,int,Rel2< Op,T1,T2 > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<Greater,int,Rel2< Op,T1,T2 > > operator>(const int& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,int,Rel2< Op,T1,T2 > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<Less,int,Rel2< Op,T1,T2 > > operator<(const int& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,int,Rel2< Op,T1,T2 > >(lh,rh);}
/** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel2<Add,int,Rel2< Op,T1,T2 > > operator+(const int& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,int,Rel2< Op,T1,T2 > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel2<Sub,int,Rel2< Op,T1,T2 > > operator-(const int& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,int,Rel2< Op,T1,T2 > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel2<Mul,int,Rel2< Op,T1,T2 > > operator*(const int& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,int,Rel2< Op,T1,T2 > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel2<Div,int,Rel2< Op,T1,T2 > > operator/(const int& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,int,Rel2< Op,T1,T2 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T2 > inline Rel2<Equal,double,Rel2< Op,T1,T2 > > operator==(const double& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,double,Rel2< Op,T1,T2 > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<GreaterEqual,double,Rel2< Op,T1,T2 > > operator>=(const double& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,double,Rel2< Op,T1,T2 > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<LessEqual,double,Rel2< Op,T1,T2 > > operator<=(const double& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,double,Rel2< Op,T1,T2 > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<Distinct,double,Rel2< Op,T1,T2 > > operator!=(const double& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,double,Rel2< Op,T1,T2 > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<Greater,double,Rel2< Op,T1,T2 > > operator>(const double& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,double,Rel2< Op,T1,T2 > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<Less,double,Rel2< Op,T1,T2 > > operator<(const double& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,double,Rel2< Op,T1,T2 > >(lh,rh);}
/** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel2<Add,double,Rel2< Op,T1,T2 > > operator+(const double& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,double,Rel2< Op,T1,T2 > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel2<Sub,double,Rel2< Op,T1,T2 > > operator-(const double& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,double,Rel2< Op,T1,T2 > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel2<Mul,double,Rel2< Op,T1,T2 > > operator*(const double& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,double,Rel2< Op,T1,T2 > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel2<Div,double,Rel2< Op,T1,T2 > > operator/(const double& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,double,Rel2< Op,T1,T2 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T2 > inline Rel2<Equal,float,Rel2< Op,T1,T2 > > operator==(const float& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,float,Rel2< Op,T1,T2 > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<GreaterEqual,float,Rel2< Op,T1,T2 > > operator>=(const float& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,float,Rel2< Op,T1,T2 > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<LessEqual,float,Rel2< Op,T1,T2 > > operator<=(const float& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,float,Rel2< Op,T1,T2 > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<Distinct,float,Rel2< Op,T1,T2 > > operator!=(const float& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,float,Rel2< Op,T1,T2 > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<Greater,float,Rel2< Op,T1,T2 > > operator>(const float& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,float,Rel2< Op,T1,T2 > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<Less,float,Rel2< Op,T1,T2 > > operator<(const float& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,float,Rel2< Op,T1,T2 > >(lh,rh);}
/** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel2<Add,float,Rel2< Op,T1,T2 > > operator+(const float& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,float,Rel2< Op,T1,T2 > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel2<Sub,float,Rel2< Op,T1,T2 > > operator-(const float& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,float,Rel2< Op,T1,T2 > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel2<Mul,float,Rel2< Op,T1,T2 > > operator*(const float& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,float,Rel2< Op,T1,T2 > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel2<Div,float,Rel2< Op,T1,T2 > > operator/(const float& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,float,Rel2< Op,T1,T2 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T2 > inline Rel2<Equal,bool,Rel2< Op,T1,T2 > > operator==(const bool& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,bool,Rel2< Op,T1,T2 > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<GreaterEqual,bool,Rel2< Op,T1,T2 > > operator>=(const bool& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,bool,Rel2< Op,T1,T2 > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<LessEqual,bool,Rel2< Op,T1,T2 > > operator<=(const bool& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,bool,Rel2< Op,T1,T2 > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<Distinct,bool,Rel2< Op,T1,T2 > > operator!=(const bool& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,bool,Rel2< Op,T1,T2 > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<Greater,bool,Rel2< Op,T1,T2 > > operator>(const bool& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,bool,Rel2< Op,T1,T2 > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2 > inline Rel2<Less,bool,Rel2< Op,T1,T2 > > operator<(const bool& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,bool,Rel2< Op,T1,T2 > >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel2<Add,bool,Rel2< Op,T1,T2 > > operator+(const bool& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,bool,Rel2< Op,T1,T2 > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel2<Sub,bool,Rel2< Op,T1,T2 > > operator-(const bool& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,bool,Rel2< Op,T1,T2 > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel2<Mul,bool,Rel2< Op,T1,T2 > > operator*(const bool& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,bool,Rel2< Op,T1,T2 > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2 > inline Rel2<Div,bool,Rel2< Op,T1,T2 > > operator/(const bool& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,bool,Rel2< Op,T1,T2 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op, class T1, class T2 > inline Rel2<And,bool,Rel2< Op,T1,T2 > > operator&&(const bool& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type,bool>::value, "first operand to '&&' (and) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type,bool>::value, "second operand to '&&' (and) operator must have boolean evaluation type"); return Rel2<And,bool,Rel2< Op,T1,T2 > >(lh,rh);} /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op, class T1, class T2 > inline Rel2<Or,bool,Rel2< Op,T1,T2 > > operator||(const bool& lh, const Rel2< Op,T1,T2 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type,bool>::value, "first operand to '||' (or) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<Rel2< Op,T1,T2 > >::Type,bool>::value, "second operand to '||' (or) operator must have boolean evaluation type"); return Rel2<Or,bool,Rel2< Op,T1,T2 > >(lh,rh); }

// Rel3
/** Symmetric unary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel1<Sym,Rel3< Op,T1,T2,T3 > > operator-(const Rel3< Op,T1,T2,T3 >& rh) { return Rel1<Sym,Rel3< Op,T1,T2,T3 > >(rh);} /** Negation unary operator.  \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T3 > inline Rel1<Not,Rel3< Op,T1,T2,T3 > > operator!(const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type,bool>::value, "operand to '!' (not) operator must have boolean evaluation type"); return Rel1<Not,Rel3< Op,T1,T2,T3 > >(rh);} /** Absolute value unary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel1<Abs,Rel3< Op,T1,T2,T3 > > abs(const Rel3< Op,T1,T2,T3 >& rh) { return Rel1<Abs,Rel3< Op,T1,T2,T3 > >(rh);} /** Min value (from a sequence) unary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel1<Min,Rel3< Op,T1,T2,T3 > > min(const Rel3< Op,T1,T2,T3 >& rh) { return Rel1<Min,Rel3< Op,T1,T2,T3 > >(rh);} /** Max value (from a sequence) unary operator. \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel1<Max,Rel3< Op,T1,T2,T3 > > max(const Rel3< Op,T1,T2,T3 >& rh) { return Rel1<Max,Rel3< Op,T1,T2,T3 > >(rh);}
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T2, class T3, class T > inline Rel2<Equal,Rel3< Op,T1,T2,T3 >,T > operator==(const Rel3< Op,T1,T2,T3 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,Rel3< Op,T1,T2,T3 >,T >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T > inline Rel2<GreaterEqual,Rel3< Op,T1,T2,T3 >,T > operator>=(const Rel3< Op,T1,T2,T3 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,Rel3< Op,T1,T2,T3 >,T >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T > inline Rel2<LessEqual,Rel3< Op,T1,T2,T3 >,T > operator<=(const Rel3< Op,T1,T2,T3 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,Rel3< Op,T1,T2,T3 >,T >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T2, class T3, class T > inline Rel2<Distinct,Rel3< Op,T1,T2,T3 >,T > operator!=(const Rel3< Op,T1,T2,T3 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,Rel3< Op,T1,T2,T3 >,T >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T > inline Rel2<Greater,Rel3< Op,T1,T2,T3 >,T > operator>(const Rel3< Op,T1,T2,T3 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,Rel3< Op,T1,T2,T3 >,T >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T > inline Rel2<Less,Rel3< Op,T1,T2,T3 >,T > operator<(const Rel3< Op,T1,T2,T3 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,Rel3< Op,T1,T2,T3 >,T >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T > inline Rel2<Add,Rel3< Op,T1,T2,T3 >,T > operator+(const Rel3< Op,T1,T2,T3 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,Rel3< Op,T1,T2,T3 >,T >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T > inline Rel2<Sub,Rel3< Op,T1,T2,T3 >,T > operator-(const Rel3< Op,T1,T2,T3 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,Rel3< Op,T1,T2,T3 >,T >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T > inline Rel2<Mul,Rel3< Op,T1,T2,T3 >,T > operator*(const Rel3< Op,T1,T2,T3 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,Rel3< Op,T1,T2,T3 >,T >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T > inline Rel2<Div,Rel3< Op,T1,T2,T3 >,T > operator/(const Rel3< Op,T1,T2,T3 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,Rel3< Op,T1,T2,T3 >,T >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T3, class T > inline Rel2<And,Rel3< Op,T1,T2,T3 >,T > operator&&(const Rel3< Op,T1,T2,T3 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type,bool>::value, "first operand to '&&' (and) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<T>::Type,bool>::value, "second operand to '&&' (and) operator must have boolean evaluation type"); return Rel2<And,Rel3< Op,T1,T2,T3 >,T >(lh,rh);} /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T3, class T > inline Rel2<Or,Rel3< Op,T1,T2,T3 >,T > operator||(const Rel3< Op,T1,T2,T3 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type,bool>::value, "first operand to '||' (or) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<T>::Type,bool>::value, "second operand to '||' (or) operator must have boolean evaluation type"); return Rel2<Or,Rel3< Op,T1,T2,T3 >,T >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Equal,int,Rel3< Op,T1,T2,T3 > > operator==(const int& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,int,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<GreaterEqual,int,Rel3< Op,T1,T2,T3 > > operator>=(const int& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,int,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<LessEqual,int,Rel3< Op,T1,T2,T3 > > operator<=(const int& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,int,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Distinct,int,Rel3< Op,T1,T2,T3 > > operator!=(const int& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,int,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Greater,int,Rel3< Op,T1,T2,T3 > > operator>(const int& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,int,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Less,int,Rel3< Op,T1,T2,T3 > > operator<(const int& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,int,Rel3< Op,T1,T2,T3 > >(lh,rh);}
/** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Add,int,Rel3< Op,T1,T2,T3 > > operator+(const int& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,int,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Sub,int,Rel3< Op,T1,T2,T3 > > operator-(const int& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,int,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Mul,int,Rel3< Op,T1,T2,T3 > > operator*(const int& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,int,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Div,int,Rel3< Op,T1,T2,T3 > > operator/(const int& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,int,Rel3< Op,T1,T2,T3 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Equal,double,Rel3< Op,T1,T2,T3 > > operator==(const double& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,double,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<GreaterEqual,double,Rel3< Op,T1,T2,T3 > > operator>=(const double& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,double,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<LessEqual,double,Rel3< Op,T1,T2,T3 > > operator<=(const double& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,double,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Distinct,double,Rel3< Op,T1,T2,T3 > > operator!=(const double& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,double,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Greater,double,Rel3< Op,T1,T2,T3 > > operator>(const double& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,double,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Less,double,Rel3< Op,T1,T2,T3 > > operator<(const double& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,double,Rel3< Op,T1,T2,T3 > >(lh,rh);}
/** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Add,double,Rel3< Op,T1,T2,T3 > > operator+(const double& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,double,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Sub,double,Rel3< Op,T1,T2,T3 > > operator-(const double& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,double,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Mul,double,Rel3< Op,T1,T2,T3 > > operator*(const double& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,double,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Div,double,Rel3< Op,T1,T2,T3 > > operator/(const double& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,double,Rel3< Op,T1,T2,T3 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Equal,float,Rel3< Op,T1,T2,T3 > > operator==(const float& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,float,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<GreaterEqual,float,Rel3< Op,T1,T2,T3 > > operator>=(const float& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,float,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<LessEqual,float,Rel3< Op,T1,T2,T3 > > operator<=(const float& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,float,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Distinct,float,Rel3< Op,T1,T2,T3 > > operator!=(const float& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,float,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Greater,float,Rel3< Op,T1,T2,T3 > > operator>(const float& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,float,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Less,float,Rel3< Op,T1,T2,T3 > > operator<(const float& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,float,Rel3< Op,T1,T2,T3 > >(lh,rh);}
/** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Add,float,Rel3< Op,T1,T2,T3 > > operator+(const float& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,float,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Sub,float,Rel3< Op,T1,T2,T3 > > operator-(const float& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,float,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Mul,float,Rel3< Op,T1,T2,T3 > > operator*(const float& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,float,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Div,float,Rel3< Op,T1,T2,T3 > > operator/(const float& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,float,Rel3< Op,T1,T2,T3 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Equal,bool,Rel3< Op,T1,T2,T3 > > operator==(const bool& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,bool,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<GreaterEqual,bool,Rel3< Op,T1,T2,T3 > > operator>=(const bool& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,bool,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<LessEqual,bool,Rel3< Op,T1,T2,T3 > > operator<=(const bool& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,bool,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Distinct,bool,Rel3< Op,T1,T2,T3 > > operator!=(const bool& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,bool,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Greater,bool,Rel3< Op,T1,T2,T3 > > operator>(const bool& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,bool,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Less,bool,Rel3< Op,T1,T2,T3 > > operator<(const bool& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,bool,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Add,bool,Rel3< Op,T1,T2,T3 > > operator+(const bool& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,bool,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Sub,bool,Rel3< Op,T1,T2,T3 > > operator-(const bool& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,bool,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Mul,bool,Rel3< Op,T1,T2,T3 > > operator*(const bool& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,bool,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Div,bool,Rel3< Op,T1,T2,T3 > > operator/(const bool& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,bool,Rel3< Op,T1,T2,T3 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<And,bool,Rel3< Op,T1,T2,T3 > > operator&&(const bool& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type,bool>::value, "first operand to '&&' (and) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type,bool>::value, "second operand to '&&' (and) operator must have boolean evaluation type"); return Rel2<And,bool,Rel3< Op,T1,T2,T3 > >(lh,rh);} /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T3 > inline Rel2<Or,bool,Rel3< Op,T1,T2,T3 > > operator||(const bool& lh, const Rel3< Op,T1,T2,T3 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type,bool>::value, "first operand to '||' (or) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<Rel3< Op,T1,T2,T3 > >::Type,bool>::value, "second operand to '||' (or) operator must have boolean evaluation type"); return Rel2<Or,bool,Rel3< Op,T1,T2,T3 > >(lh,rh); }

// Rel4
/** Symmetric unary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel1<Sym,Rel4< Op,T1,T2,T3, T4 > > operator-(const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel1<Sym,Rel4< Op,T1,T2,T3, T4 > >(rh);} /** Negation unary operator.  \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel1<Not,Rel4< Op,T1,T2,T3, T4 > > operator!(const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type,bool>::value, "operand to '!' (not) operator must have boolean evaluation type"); return Rel1<Not,Rel4< Op,T1,T2,T3, T4 > >(rh);} /** Absolute value unary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel1<Abs,Rel4< Op,T1,T2,T3, T4 > > abs(const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel1<Abs,Rel4< Op,T1,T2,T3, T4 > >(rh);} /** Min value (from a sequence) unary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel1<Min,Rel4< Op,T1,T2,T3, T4 > > min(const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel1<Min,Rel4< Op,T1,T2,T3, T4 > >(rh);} /** Max value (from a sequence) unary operator. \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel1<Max,Rel4< Op,T1,T2,T3, T4 > > max(const Rel4< Op,T1,T2,T3, T4 >& rh) { return Rel1<Max,Rel4< Op,T1,T2,T3, T4 > >(rh);}
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T2, class T3, class T4, class T > inline Rel2<Equal,Rel4< Op,T1,T2,T3, T4 >,T > operator==(const Rel4< Op,T1,T2,T3, T4 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,Rel4< Op,T1,T2,T3, T4 >,T >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4, class T > inline Rel2<GreaterEqual,Rel4< Op,T1,T2,T3, T4 >,T > operator>=(const Rel4< Op,T1,T2,T3, T4 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,Rel4< Op,T1,T2,T3, T4 >,T >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4, class T > inline Rel2<LessEqual,Rel4< Op,T1,T2,T3, T4 >,T > operator<=(const Rel4< Op,T1,T2,T3, T4 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,Rel4< Op,T1,T2,T3, T4 >,T >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T2, class T3, class T4, class T > inline Rel2<Distinct,Rel4< Op,T1,T2,T3, T4 >,T > operator!=(const Rel4< Op,T1,T2,T3, T4 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,Rel4< Op,T1,T2,T3, T4 >,T >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4, class T > inline Rel2<Greater,Rel4< Op,T1,T2,T3, T4 >,T > operator>(const Rel4< Op,T1,T2,T3, T4 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,Rel4< Op,T1,T2,T3, T4 >,T >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4, class T > inline Rel2<Less,Rel4< Op,T1,T2,T3, T4 >,T > operator<(const Rel4< Op,T1,T2,T3, T4 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,Rel4< Op,T1,T2,T3, T4 >,T >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4, class T > inline Rel2<Add,Rel4< Op,T1,T2,T3, T4 >,T > operator+(const Rel4< Op,T1,T2,T3, T4 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,Rel4< Op,T1,T2,T3, T4 >,T >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4, class T > inline Rel2<Sub,Rel4< Op,T1,T2,T3, T4 >,T > operator-(const Rel4< Op,T1,T2,T3, T4 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,Rel4< Op,T1,T2,T3, T4 >,T >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4, class T > inline Rel2<Mul,Rel4< Op,T1,T2,T3, T4 >,T > operator*(const Rel4< Op,T1,T2,T3, T4 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,Rel4< Op,T1,T2,T3, T4 >,T >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4, class T > inline Rel2<Div,Rel4< Op,T1,T2,T3, T4 >,T > operator/(const Rel4< Op,T1,T2,T3, T4 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,Rel4< Op,T1,T2,T3, T4 >,T >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T3, class T4, class T > inline Rel2<And,Rel4< Op,T1,T2,T3, T4 >,T > operator&&(const Rel4< Op,T1,T2,T3, T4 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type,bool>::value, "first operand to '&&' (and) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<T>::Type,bool>::value, "second operand to '&&' (and) operator must have boolean evaluation type"); return Rel2<And,Rel4< Op,T1,T2,T3, T4 >,T >(lh,rh);} /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T3, class T4, class T > inline Rel2<Or,Rel4< Op,T1,T2,T3, T4 >,T > operator||(const Rel4< Op,T1,T2,T3, T4 >& lh, const T& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type,bool>::value, "first operand to '||' (or) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<T>::Type,bool>::value, "second operand to '||' (or) operator must have boolean evaluation type"); return Rel2<Or,Rel4< Op,T1,T2,T3, T4 >,T >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Equal,int,Rel4< Op,T1,T2,T3, T4 > > operator==(const int& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,int,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<GreaterEqual,int,Rel4< Op,T1,T2,T3, T4 > > operator>=(const int& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,int,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<LessEqual,int,Rel4< Op,T1,T2,T3, T4 > > operator<=(const int& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,int,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Distinct,int,Rel4< Op,T1,T2,T3, T4 > > operator!=(const int& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,int,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Greater,int,Rel4< Op,T1,T2,T3, T4 > > operator>(const int& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,int,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Less,int,Rel4< Op,T1,T2,T3, T4 > > operator<(const int& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,int,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);}
/** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Add,int,Rel4< Op,T1,T2,T3, T4 > > operator+(const int& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,int,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Sub,int,Rel4< Op,T1,T2,T3, T4 > > operator-(const int& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,int,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Mul,int,Rel4< Op,T1,T2,T3, T4 > > operator*(const int& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,int,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Div,int,Rel4< Op,T1,T2,T3, T4 > > operator/(const int& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,int,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Equal,double,Rel4< Op,T1,T2,T3, T4 > > operator==(const double& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,double,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<GreaterEqual,double,Rel4< Op,T1,T2,T3, T4 > > operator>=(const double& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,double,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<LessEqual,double,Rel4< Op,T1,T2,T3, T4 > > operator<=(const double& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,double,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Distinct,double,Rel4< Op,T1,T2,T3, T4 > > operator!=(const double& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,double,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Greater,double,Rel4< Op,T1,T2,T3, T4 > > operator>(const double& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,double,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Less,double,Rel4< Op,T1,T2,T3, T4 > > operator<(const double& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,double,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);}
/** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Add,double,Rel4< Op,T1,T2,T3, T4 > > operator+(const double& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,double,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Sub,double,Rel4< Op,T1,T2,T3, T4 > > operator-(const double& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,double,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Mul,double,Rel4< Op,T1,T2,T3, T4 > > operator*(const double& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,double,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Div,double,Rel4< Op,T1,T2,T3, T4 > > operator/(const double& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,double,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Equal,float,Rel4< Op,T1,T2,T3, T4 > > operator==(const float& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,float,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<GreaterEqual,float,Rel4< Op,T1,T2,T3, T4 > > operator>=(const float& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,float,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<LessEqual,float,Rel4< Op,T1,T2,T3, T4 > > operator<=(const float& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,float,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Distinct,float,Rel4< Op,T1,T2,T3, T4 > > operator!=(const float& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,float,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Greater,float,Rel4< Op,T1,T2,T3, T4 > > operator>(const float& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,float,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Less,float,Rel4< Op,T1,T2,T3, T4 > > operator<(const float& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,float,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);}
/** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Add,float,Rel4< Op,T1,T2,T3, T4 > > operator+(const float& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,float,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Sub,float,Rel4< Op,T1,T2,T3, T4 > > operator-(const float& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,float,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Mul,float,Rel4< Op,T1,T2,T3, T4 > > operator*(const float& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,float,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Div,float,Rel4< Op,T1,T2,T3, T4 > > operator/(const float& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,float,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Equal,bool,Rel4< Op,T1,T2,T3, T4 > > operator==(const bool& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,bool,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<GreaterEqual,bool,Rel4< Op,T1,T2,T3, T4 > > operator>=(const bool& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,bool,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<LessEqual,bool,Rel4< Op,T1,T2,T3, T4 > > operator<=(const bool& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,bool,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Distinct,bool,Rel4< Op,T1,T2,T3, T4 > > operator!=(const bool& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,bool,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Greater,bool,Rel4< Op,T1,T2,T3, T4 > > operator>(const bool& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,bool,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Less,bool,Rel4< Op,T1,T2,T3, T4 > > operator<(const bool& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,bool,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Add,bool,Rel4< Op,T1,T2,T3, T4 > > operator+(const bool& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,bool,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Sub,bool,Rel4< Op,T1,T2,T3, T4 > > operator-(const bool& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,bool,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Mul,bool,Rel4< Op,T1,T2,T3, T4 > > operator*(const bool& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,bool,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Div,bool,Rel4< Op,T1,T2,T3, T4 > > operator/(const bool& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,bool,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<And,bool,Rel4< Op,T1,T2,T3, T4 > > operator&&(const bool& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type,bool>::value, "first operand to '&&' (and) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type,bool>::value, "second operand to '&&' (and) operator must have boolean evaluation type"); return Rel2<And,bool,Rel4< Op,T1,T2,T3, T4 > >(lh,rh);} /** Logical OR operator.  \ingroup LogicalRelations */ template< class Op, class T1, class T2, class T3, class T4 > inline Rel2<Or,bool,Rel4< Op,T1,T2,T3, T4 > > operator||(const bool& lh, const Rel4< Op,T1,T2,T3, T4 >& rh) { static_assert(Util::IsSameType<typename Traits::GetEval<bool>::Type,bool>::value, "first operand to '||' (or) operator must have boolean evaluation type"); static_assert(Util::IsSameType<typename Traits::GetEval<Rel4< Op,T1,T2,T3, T4 > >::Type,bool>::value, "second operand to '||' (or) operator must have boolean evaluation type"); return Rel2<Or,bool,Rel4< Op,T1,T2,T3, T4 > >(lh,rh); }

} // Casper
