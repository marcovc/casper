/************************************************************************** *   This file is part of CaSPER (http://proteina.di.fct.unl.pt/casper).   *
*
 *                                                                         *
 *   Copyright:                                                            *
 *   2005-2011 - Marco Correia <marco.v.correia@gmail.com>                 *
 *                                                                         *
 *   Licensed under the Apache License, Version 2.0 (the "License");       * 
 *   you may not use this file except in compliance with the License.      * 
 *   You may obtain a copy of the License at                               * 
 *            http://www.apache.org/licenses/LICENSE-2.0                   * 
 *   Unless required by applicable law or agreed to in writing, software   * 
 *   distributed under the License is distributed on an                    * 
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,          * 
 *   either express or implied.                                            * 
 *   See the License for the specific language governing permissions and   * 
 *   limitations under the License.                                        *
 \*************************************************************************/
/************************************************************************** *   This file is part of CaSPER (http://proteina.di.fct.unl.pt/casper).   *
 *
 *                                                                         *

 *   Copyright:                                                            *

 *   2005-2011 - Marco Correia <marco.v.correia@gmail.com>                 *

 *                                                                         *

 *   Licensed under the Apache License, Version 2.0 (the "License");       * 

 *   you may not use this file except in compliance with the License.      * 

 *   You may obtain a copy of the License at                               * 

 *            http://www.apache.org/licenses/LICENSE-2.0                   * 

 *   Unless required by applicable law or agreed to in writing, software   * 

 *   distributed under the License is distributed on an                    * 

 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,          * 

 *   either express or implied.                                            * 

 *   See the License for the specific language governing permissions and   * 

 *   limitations under the License.                                        *

 \*************************************************************************/
// --- RELATIONS (Compile time expressions) ---
namespace Casper {
/** Symmetric unary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel1<Sym,Ref< T1 > > operator-(const Ref< T1 >& rh) { return Rel1<Sym,Ref< T1 > >(rh);} /** Negation unary operator.  \ingroup LogicalRelations */ template< class T1 > inline Rel1<Not,Ref< T1 > > operator!(const Ref< T1 >& rh) { static_assert(std::is_same<typename Traits::GetEval<Ref< T1 > >::Type,bool>::value, "operand to '!' (not) operator must have boolean evaluation type"); return Rel1<Not,Ref< T1 > >(rh);} /** Absolute value unary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel1<Abs,Ref< T1 > > abs(const Ref< T1 >& rh) { return Rel1<Abs,Ref< T1 > >(rh);} /** Min value (from a sequence) unary operator.  \ingroup ArithRelations */ template< class T1 > inline Rel1<Min,Ref< T1 > > min(const Ref< T1 >& rh) { return Rel1<Min,Ref< T1 > >(rh);} /** Max value (from a sequence) unary operator. \ingroup ArithRelations */ template< class T1 > inline Rel1<Max,Ref< T1 > > max(const Ref< T1 >& rh) { return Rel1<Max,Ref< T1 > >(rh);}
/** Equal binary operator.  \ingroup EqualityRelations */ template< class T1, class T > inline Rel2<Equal,Ref< T1 >,T > operator==(const Ref< T1 >& lh, const T& rh) { static_assert(std::is_same<typename Traits::GetEval<Ref< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,Ref< T1 >,T >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<GreaterEqual,Ref< T1 >,T > operator>=(const Ref< T1 >& lh, const T& rh) { static_assert(std::is_same<typename Traits::GetEval<Ref< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,Ref< T1 >,T >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<LessEqual,Ref< T1 >,T > operator<=(const Ref< T1 >& lh, const T& rh) { static_assert(std::is_same<typename Traits::GetEval<Ref< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,Ref< T1 >,T >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ template< class T1, class T > inline Rel2<Distinct,Ref< T1 >,T > operator!=(const Ref< T1 >& lh, const T& rh) { static_assert(std::is_same<typename Traits::GetEval<Ref< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,Ref< T1 >,T >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<Greater,Ref< T1 >,T > operator>(const Ref< T1 >& lh, const T& rh) { static_assert(std::is_same<typename Traits::GetEval<Ref< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,Ref< T1 >,T >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ template< class T1, class T > inline Rel2<Less,Ref< T1 >,T > operator<(const Ref< T1 >& lh, const T& rh) { static_assert(std::is_same<typename Traits::GetEval<Ref< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,Ref< T1 >,T >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Add,Ref< T1 >,T > operator+(const Ref< T1 >& lh, const T& rh) { static_assert(std::is_same<typename Traits::GetEval<Ref< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,Ref< T1 >,T >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Sub,Ref< T1 >,T > operator-(const Ref< T1 >& lh, const T& rh) { static_assert(std::is_same<typename Traits::GetEval<Ref< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,Ref< T1 >,T >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Mul,Ref< T1 >,T > operator*(const Ref< T1 >& lh, const T& rh) { static_assert(std::is_same<typename Traits::GetEval<Ref< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,Ref< T1 >,T >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ template< class T1, class T > inline Rel2<Div,Ref< T1 >,T > operator/(const Ref< T1 >& lh, const T& rh) { static_assert(std::is_same<typename Traits::GetEval<Ref< T1 > >::Type, typename Traits::GetEval<T>::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,Ref< T1 >,T >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ template< class T1, class T > inline Rel2<And,Ref< T1 >,T > operator&&(const Ref< T1 >& lh, const T& rh) { static_assert(std::is_same<typename Traits::GetEval<Ref< T1 > >::Type,bool>::value, "first operand to '&&' (and) operator must have boolean evaluation type"); static_assert(std::is_same<typename Traits::GetEval<T>::Type,bool>::value, "second operand to '&&' (and) operator must have boolean evaluation type"); return Rel2<And,Ref< T1 >,T >(lh,rh);} /** Logical OR operator.  \ingroup LogicalRelations */ template< class T1, class T > inline Rel2<Or,Ref< T1 >,T > operator||(const Ref< T1 >& lh, const T& rh) { static_assert(std::is_same<typename Traits::GetEval<Ref< T1 > >::Type,bool>::value, "first operand to '||' (or) operator must have boolean evaluation type"); static_assert(std::is_same<typename Traits::GetEval<T>::Type,bool>::value, "second operand to '||' (or) operator must have boolean evaluation type"); return Rel2<Or,Ref< T1 >,T >(lh,rh); }
/** Addition binary operator.  \ingroup ArithRelations */ inline Rel2<Add,int,Ref< int > > operator+(const int& lh, const Ref< int >& rh) { static_assert(std::is_same<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Ref< int > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,int,Ref< int > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ inline Rel2<Sub,int,Ref< int > > operator-(const int& lh, const Ref< int >& rh) { static_assert(std::is_same<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Ref< int > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,int,Ref< int > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ inline Rel2<Mul,int,Ref< int > > operator*(const int& lh, const Ref< int >& rh) { static_assert(std::is_same<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Ref< int > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,int,Ref< int > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ inline Rel2<Div,int,Ref< int > > operator/(const int& lh, const Ref< int >& rh) { static_assert(std::is_same<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Ref< int > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,int,Ref< int > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ inline Rel2<Equal,int,Ref< int > > operator==(const int& lh, const Ref< int >& rh) { static_assert(std::is_same<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Ref< int > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,int,Ref< int > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<GreaterEqual,int,Ref< int > > operator>=(const int& lh, const Ref< int >& rh) { static_assert(std::is_same<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Ref< int > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,int,Ref< int > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<LessEqual,int,Ref< int > > operator<=(const int& lh, const Ref< int >& rh) { static_assert(std::is_same<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Ref< int > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,int,Ref< int > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ inline Rel2<Distinct,int,Ref< int > > operator!=(const int& lh, const Ref< int >& rh) { static_assert(std::is_same<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Ref< int > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,int,Ref< int > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ inline Rel2<Greater,int,Ref< int > > operator>(const int& lh, const Ref< int >& rh) { static_assert(std::is_same<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Ref< int > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,int,Ref< int > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ inline Rel2<Less,int,Ref< int > > operator<(const int& lh, const Ref< int >& rh) { static_assert(std::is_same<typename Traits::GetEval<int>::Type, typename Traits::GetEval<Ref< int > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,int,Ref< int > >(lh,rh);}
/** Addition binary operator.  \ingroup ArithRelations */ inline Rel2<Add,double,Ref< double > > operator+(const double& lh, const Ref< double >& rh) { static_assert(std::is_same<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Ref< double > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,double,Ref< double > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ inline Rel2<Sub,double,Ref< double > > operator-(const double& lh, const Ref< double >& rh) { static_assert(std::is_same<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Ref< double > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,double,Ref< double > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ inline Rel2<Mul,double,Ref< double > > operator*(const double& lh, const Ref< double >& rh) { static_assert(std::is_same<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Ref< double > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,double,Ref< double > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ inline Rel2<Div,double,Ref< double > > operator/(const double& lh, const Ref< double >& rh) { static_assert(std::is_same<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Ref< double > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,double,Ref< double > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ inline Rel2<Equal,double,Ref< double > > operator==(const double& lh, const Ref< double >& rh) { static_assert(std::is_same<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Ref< double > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,double,Ref< double > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<GreaterEqual,double,Ref< double > > operator>=(const double& lh, const Ref< double >& rh) { static_assert(std::is_same<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Ref< double > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,double,Ref< double > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<LessEqual,double,Ref< double > > operator<=(const double& lh, const Ref< double >& rh) { static_assert(std::is_same<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Ref< double > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,double,Ref< double > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ inline Rel2<Distinct,double,Ref< double > > operator!=(const double& lh, const Ref< double >& rh) { static_assert(std::is_same<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Ref< double > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,double,Ref< double > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ inline Rel2<Greater,double,Ref< double > > operator>(const double& lh, const Ref< double >& rh) { static_assert(std::is_same<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Ref< double > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,double,Ref< double > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ inline Rel2<Less,double,Ref< double > > operator<(const double& lh, const Ref< double >& rh) { static_assert(std::is_same<typename Traits::GetEval<double>::Type, typename Traits::GetEval<Ref< double > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,double,Ref< double > >(lh,rh);}
/** Addition binary operator.  \ingroup ArithRelations */ inline Rel2<Add,float,Ref< float > > operator+(const float& lh, const Ref< float >& rh) { static_assert(std::is_same<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Ref< float > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,float,Ref< float > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ inline Rel2<Sub,float,Ref< float > > operator-(const float& lh, const Ref< float >& rh) { static_assert(std::is_same<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Ref< float > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,float,Ref< float > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ inline Rel2<Mul,float,Ref< float > > operator*(const float& lh, const Ref< float >& rh) { static_assert(std::is_same<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Ref< float > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,float,Ref< float > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ inline Rel2<Div,float,Ref< float > > operator/(const float& lh, const Ref< float >& rh) { static_assert(std::is_same<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Ref< float > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,float,Ref< float > >(lh,rh); }
/** Equal binary operator.  \ingroup EqualityRelations */ inline Rel2<Equal,float,Ref< float > > operator==(const float& lh, const Ref< float >& rh) { static_assert(std::is_same<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Ref< float > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,float,Ref< float > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<GreaterEqual,float,Ref< float > > operator>=(const float& lh, const Ref< float >& rh) { static_assert(std::is_same<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Ref< float > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,float,Ref< float > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<LessEqual,float,Ref< float > > operator<=(const float& lh, const Ref< float >& rh) { static_assert(std::is_same<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Ref< float > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,float,Ref< float > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ inline Rel2<Distinct,float,Ref< float > > operator!=(const float& lh, const Ref< float >& rh) { static_assert(std::is_same<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Ref< float > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,float,Ref< float > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ inline Rel2<Greater,float,Ref< float > > operator>(const float& lh, const Ref< float >& rh) { static_assert(std::is_same<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Ref< float > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,float,Ref< float > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ inline Rel2<Less,float,Ref< float > > operator<(const float& lh, const Ref< float >& rh) { static_assert(std::is_same<typename Traits::GetEval<float>::Type, typename Traits::GetEval<Ref< float > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,float,Ref< float > >(lh,rh);}
/** Equal binary operator.  \ingroup EqualityRelations */ inline Rel2<Equal,bool,Ref< bool > > operator==(const bool& lh, const Ref< bool >& rh) { static_assert(std::is_same<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Ref< bool > >::Type>::value, "operands to '==' operator must have equal evaluation types"); return Rel2<Equal,bool,Ref< bool > >(lh,rh);} /** Greater or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<GreaterEqual,bool,Ref< bool > > operator>=(const bool& lh, const Ref< bool >& rh) { static_assert(std::is_same<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Ref< bool > >::Type>::value, "operands to '>=' operator must have equal evaluation types"); return Rel2<GreaterEqual,bool,Ref< bool > >(lh,rh);} /** Less or equal binary operator.  \ingroup InequalityRelations */ inline Rel2<LessEqual,bool,Ref< bool > > operator<=(const bool& lh, const Ref< bool >& rh) { static_assert(std::is_same<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Ref< bool > >::Type>::value, "operands to '<=' operator must have equal evaluation types"); return Rel2<LessEqual,bool,Ref< bool > >(lh,rh);} /** Distinct binary operator.  \ingroup DisequalityRelations */ inline Rel2<Distinct,bool,Ref< bool > > operator!=(const bool& lh, const Ref< bool >& rh) { static_assert(std::is_same<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Ref< bool > >::Type>::value, "operands to '!=' operator must have equal evaluation types"); return Rel2<Distinct,bool,Ref< bool > >(lh,rh);} /** Greater than binary operator.  \ingroup InequalityRelations */ inline Rel2<Greater,bool,Ref< bool > > operator>(const bool& lh, const Ref< bool >& rh) { static_assert(std::is_same<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Ref< bool > >::Type>::value, "operands to '>' operator must have equal evaluation types"); return Rel2<Greater,bool,Ref< bool > >(lh,rh);} /** Less than binary operator.  \ingroup InequalityRelations */ inline Rel2<Less,bool,Ref< bool > > operator<(const bool& lh, const Ref< bool >& rh) { static_assert(std::is_same<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Ref< bool > >::Type>::value, "operands to '<' operator must have equal evaluation types"); return Rel2<Less,bool,Ref< bool > >(lh,rh);} /** Addition binary operator.  \ingroup ArithRelations */ inline Rel2<Add,bool,Ref< bool > > operator+(const bool& lh, const Ref< bool >& rh) { static_assert(std::is_same<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Ref< bool > >::Type>::value, "operands to '+' operator must have equal evaluation types"); return Rel2<Add,bool,Ref< bool > >(lh,rh);} /** Subtraction binary operator.  \ingroup ArithRelations */ inline Rel2<Sub,bool,Ref< bool > > operator-(const bool& lh, const Ref< bool >& rh) { static_assert(std::is_same<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Ref< bool > >::Type>::value, "operands to '-' operator must have equal evaluation types"); return Rel2<Sub,bool,Ref< bool > >(lh,rh);} /** Multiplication binary operator.   \ingroup ArithRelations */ inline Rel2<Mul,bool,Ref< bool > > operator*(const bool& lh, const Ref< bool >& rh) { static_assert(std::is_same<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Ref< bool > >::Type>::value, "operands to '*' operator must have equal evaluation types"); return Rel2<Mul,bool,Ref< bool > >(lh,rh);} /** Division binary operator.   \ingroup ArithRelations */ inline Rel2<Div,bool,Ref< bool > > operator/(const bool& lh, const Ref< bool >& rh) { static_assert(std::is_same<typename Traits::GetEval<bool>::Type, typename Traits::GetEval<Ref< bool > >::Type>::value, "operands to '/' operator must have equal evaluation types"); return Rel2<Div,bool,Ref< bool > >(lh,rh); } /** Logical AND binary operator.   \ingroup LogicalRelations */ inline Rel2<And,bool,Ref< bool > > operator&&(const bool& lh, const Ref< bool >& rh) { static_assert(std::is_same<typename Traits::GetEval<bool>::Type,bool>::value, "first operand to '&&' (and) operator must have boolean evaluation type"); static_assert(std::is_same<typename Traits::GetEval<Ref< bool > >::Type,bool>::value, "second operand to '&&' (and) operator must have boolean evaluation type"); return Rel2<And,bool,Ref< bool > >(lh,rh);} /** Logical OR operator.  \ingroup LogicalRelations */ inline Rel2<Or,bool,Ref< bool > > operator||(const bool& lh, const Ref< bool >& rh) { static_assert(std::is_same<typename Traits::GetEval<bool>::Type,bool>::value, "first operand to '||' (or) operator must have boolean evaluation type"); static_assert(std::is_same<typename Traits::GetEval<Ref< bool > >::Type,bool>::value, "second operand to '||' (or) operator must have boolean evaluation type"); return Rel2<Or,bool,Ref< bool > >(lh,rh); }
} // Casper
